
onlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007660  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08007a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000034c  24000014  08007a18  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000360  08007a18  00020360  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011d19  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002052  00000000  00000000  00031d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000af8  00000000  00000000  00033db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a50  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d0e  00000000  00000000  000352f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000114bf  00000000  00000000  0006b006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157a35  00000000  00000000  0007c4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3efa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d34  00000000  00000000  001d3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080078e0 	.word	0x080078e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080078e0 	.word	0x080078e0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
}
 8000648:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <__NVIC_SystemReset+0x24>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000652:	4904      	ldr	r1, [pc, #16]	; (8000664 <__NVIC_SystemReset+0x24>)
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_SystemReset+0x28>)
 8000656:	4313      	orrs	r3, r2
 8000658:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <__NVIC_SystemReset+0x20>
 8000664:	e000ed00 	.word	0xe000ed00
 8000668:	05fa0004 	.word	0x05fa0004

0800066c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800067c:	d301      	bcc.n	8000682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800067e:	2301      	movs	r3, #1
 8000680:	e00f      	b.n	80006a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <SysTick_Config+0x40>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b01      	subs	r3, #1
 8000688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068a:	210f      	movs	r1, #15
 800068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000690:	f7ff ffac 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <SysTick_Config+0x40>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <SysTick_Config+0x40>)
 800069c:	2207      	movs	r2, #7
 800069e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	e000e010 	.word	0xe000e010

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fd21 	bl	80010fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f853 	bl	8000764 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);	//IRQ every millisecond
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <main+0xa0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <main+0xa4>)
 80006c4:	fba2 2303 	umull	r2, r3, r2, r3
 80006c8:	099b      	lsrs	r3, r3, #6
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffce 	bl	800066c <SysTick_Config>
  HAL_NVIC_SetPriority(MY_IRQn, 2, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	202a      	movs	r0, #42	; 0x2a
 80006d6:	f000 fecc 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e2:	f000 fec6 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2026      	movs	r0, #38	; 0x26
 80006ec:	f000 fec1 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MY_IRQn);
 80006f0:	202a      	movs	r0, #42	; 0x2a
 80006f2:	f000 fed8 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f947 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f89d 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006fe:	f000 f8f7 	bl	80008f0 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  enum state prev_state;
  while (1) {
	  prev_state = current_state;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <main+0xa8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
	  current_state = FSM(current_state);
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <main+0xa8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f9c5 	bl	8000a9c <FSM>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <main+0xa8>)
 8000718:	701a      	strb	r2, [r3, #0]
	  if(prev_state != current_state)
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0xa8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d008      	beq.n	8000736 <main+0x86>
		  memset(recieved_message, '\0', strlen((char*) recieved_message));
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <main+0xac>)
 8000726:	f7ff fdd7 	bl	80002d8 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0xac>)
 8000732:	f007 f8a7 	bl	8007884 <memset>
	  if(strstr((char*)recieved_message, "busy"))
 8000736:	490a      	ldr	r1, [pc, #40]	; (8000760 <main+0xb0>)
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <main+0xac>)
 800073a:	f007 f8ba 	bl	80078b2 <strstr>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0de      	beq.n	8000702 <main+0x52>
		  HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f000 fd6a 	bl	8001220 <HAL_Delay>
	  prev_state = current_state;
 800074c:	e7d9      	b.n	8000702 <main+0x52>
 800074e:	bf00      	nop
 8000750:	24000004 	.word	0x24000004
 8000754:	10624dd3 	.word	0x10624dd3
 8000758:	24000000 	.word	0x24000000
 800075c:	2400015c 	.word	0x2400015c
 8000760:	080078f8 	.word	0x080078f8

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	224c      	movs	r2, #76	; 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f886 	bl	8007884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 f880 	bl	8007884 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000784:	2002      	movs	r0, #2
 8000786:	f001 fde5 	bl	8002354 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xd0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c0:	bf00      	nop
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <SystemClock_Config+0xd0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ce:	d1f8      	bne.n	80007c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fdef 	bl	80023c8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f0:	f000 faa4 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	233f      	movs	r3, #63	; 0x3f
 80007f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fa2f 	bl	8002c7c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 fa8a 	bl	8000d3c <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3770      	adds	r7, #112	; 0x70
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58000400 	.word	0x58000400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <MX_USART2_UART_Init+0xb0>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000880:	4818      	ldr	r0, [pc, #96]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000882:	f004 fbb3 	bl	8004fec <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 fa56 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 8000894:	f006 ff07 	bl	80076a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 fa4d 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 80008a6:	f006 ff3c 	bl	8007722 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 fa44 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 80008b6:	f006 febd 	bl	8007634 <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 fa3c 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	4909      	ldr	r1, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0xb4>)
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 80008ca:	f004 fc6d 	bl	80051a8 <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <MX_USART2_UART_Init+0xac>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0220 	orr.w	r2, r2, #32
 80008dc:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000030 	.word	0x24000030
 80008e8:	40004400 	.word	0x40004400
 80008ec:	24000158 	.word	0x24000158

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_USART3_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <MX_USART3_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_USART3_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800093a:	f004 fb57 	bl	8004fec <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f9fa 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800094c:	f006 feab 	bl	80076a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f9f1 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800095e:	f006 fee0 	bl	8007722 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9e8 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800096e:	f006 fe61 	bl	8007634 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f9e0 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	240000c4 	.word	0x240000c4
 8000984:	40004800 	.word	0x40004800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_GPIO_Init+0xe8>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_GPIO_Init+0xe8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_GPIO_Init+0xe8>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RST_Pin|GP0_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_GPIO_Init+0xec>)
 8000a1e:	f001 fc7f 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GP2_Pin|CHE_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2118      	movs	r1, #24
 8000a26:	4814      	ldr	r0, [pc, #80]	; (8000a78 <MX_GPIO_Init+0xf0>)
 8000a28:	f001 fc7a 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin GP0_Pin */
  GPIO_InitStruct.Pin = RST_Pin|GP0_Pin;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0xec>)
 8000a46:	f001 fabb 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP2_Pin CHE_Pin */
  GPIO_InitStruct.Pin = GP2_Pin|CHE_Pin;
 8000a4a:	2318      	movs	r3, #24
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_GPIO_Init+0xf0>)
 8000a62:	f001 faad 	bl	8001fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58021c00 	.word	0x58021c00
 8000a78:	58020000 	.word	0x58020000

08000a7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	strcat((char*)recieved_message, (char*)&rx_buffer);
 8000a84:	4903      	ldr	r1, [pc, #12]	; (8000a94 <HAL_UART_RxCpltCallback+0x18>)
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_UART_RxCpltCallback+0x1c>)
 8000a88:	f006 ff04 	bl	8007894 <strcat>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000158 	.word	0x24000158
 8000a98:	2400015c 	.word	0x2400015c

08000a9c <FSM>:

enum state FSM(enum state current_state){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	switch (current_state) {
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	f200 8083 	bhi.w	8000bb4 <FSM+0x118>
 8000aae:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <FSM+0x18>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b11 	.word	0x08000b11
 8000ab8:	08000b39 	.word	0x08000b39
 8000abc:	08000b61 	.word	0x08000b61
 8000ac0:	08000b89 	.word	0x08000b89
 8000ac4:	08000ae9 	.word	0x08000ae9
 8000ac8:	08000ad5 	.word	0x08000ad5
 8000acc:	08000b9f 	.word	0x08000b9f
 8000ad0:	08000aff 	.word	0x08000aff
		case STATE_READY:
			if(AT_halt_until("ready\r\n"))
 8000ad4:	483a      	ldr	r0, [pc, #232]	; (8000bc0 <FSM+0x124>)
 8000ad6:	f000 f8a1 	bl	8000c1c <AT_halt_until>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <FSM+0x48>
				return STATE_CONFIG;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	e068      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	e066      	b.n	8000bb6 <FSM+0x11a>

		case STATE_SEND_ATE0:
			if(send_string("ATE0\r\n", "OK\r\n"))
 8000ae8:	4936      	ldr	r1, [pc, #216]	; (8000bc4 <FSM+0x128>)
 8000aea:	4837      	ldr	r0, [pc, #220]	; (8000bc8 <FSM+0x12c>)
 8000aec:	f000 f8ea 	bl	8000cc4 <send_string>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <FSM+0x5e>
				return STATE_CONFIG;
 8000af6:	2307      	movs	r3, #7
 8000af8:	e05d      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000afa:	2306      	movs	r3, #6
 8000afc:	e05b      	b.n	8000bb6 <FSM+0x11a>

		case STATE_CONFIG:
			if(AT_config())
 8000afe:	f000 f8bb 	bl	8000c78 <AT_config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <FSM+0x70>
				return STATE_CONNECT_WIFI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e054      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	e052      	b.n	8000bb6 <FSM+0x11a>

		case STATE_CONNECT_WIFI:
			if(send_string(WIFI_CONNECT, "OK\r\n"))
 8000b10:	492c      	ldr	r1, [pc, #176]	; (8000bc4 <FSM+0x128>)
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <FSM+0x130>)
 8000b14:	f000 f8d6 	bl	8000cc4 <send_string>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <FSM+0x86>
				return STATE_CONNECT_SERVER;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e049      	b.n	8000bb6 <FSM+0x11a>
			else if(send_string(WIFI_CONNECT, "OK\r\n"))
 8000b22:	4928      	ldr	r1, [pc, #160]	; (8000bc4 <FSM+0x128>)
 8000b24:	4829      	ldr	r0, [pc, #164]	; (8000bcc <FSM+0x130>)
 8000b26:	f000 f8cd 	bl	8000cc4 <send_string>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <FSM+0x98>
				return STATE_CONNECT_SERVER;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e040      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000b34:	2306      	movs	r3, #6
 8000b36:	e03e      	b.n	8000bb6 <FSM+0x11a>

		case STATE_CONNECT_SERVER:
			if(send_string(SERVER_CONNECT, "OK\r\n"))
 8000b38:	4922      	ldr	r1, [pc, #136]	; (8000bc4 <FSM+0x128>)
 8000b3a:	4825      	ldr	r0, [pc, #148]	; (8000bd0 <FSM+0x134>)
 8000b3c:	f000 f8c2 	bl	8000cc4 <send_string>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <FSM+0xae>
				return STATE_SEND_CIPSEND;
 8000b46:	2302      	movs	r3, #2
 8000b48:	e035      	b.n	8000bb6 <FSM+0x11a>
			else if(send_string(SERVER_CONNECT, "OK\r\n"))
 8000b4a:	491e      	ldr	r1, [pc, #120]	; (8000bc4 <FSM+0x128>)
 8000b4c:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <FSM+0x134>)
 8000b4e:	f000 f8b9 	bl	8000cc4 <send_string>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <FSM+0xc0>
				return STATE_SEND_CIPSEND;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e02c      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	e02a      	b.n	8000bb6 <FSM+0x11a>

		case STATE_SEND_CIPSEND:
			if(send_string("AT+CIPSEND=5\r\n", "OK\r\n"))
 8000b60:	4918      	ldr	r1, [pc, #96]	; (8000bc4 <FSM+0x128>)
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <FSM+0x138>)
 8000b64:	f000 f8ae 	bl	8000cc4 <send_string>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <FSM+0xd6>
				return STATE_SEND_DATA;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e021      	b.n	8000bb6 <FSM+0x11a>
			else if(send_string("AT+CIPSEND=5\r\n", "OK\r\n"))
 8000b72:	4914      	ldr	r1, [pc, #80]	; (8000bc4 <FSM+0x128>)
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <FSM+0x138>)
 8000b76:	f000 f8a5 	bl	8000cc4 <send_string>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <FSM+0xe8>
				return STATE_SEND_DATA;
 8000b80:	2303      	movs	r3, #3
 8000b82:	e018      	b.n	8000bb6 <FSM+0x11a>
			return STATE_ERROR;
 8000b84:	2306      	movs	r3, #6
 8000b86:	e016      	b.n	8000bb6 <FSM+0x11a>

		case STATE_SEND_DATA:
			if(send_string("dataq", "OK\r\n"))
 8000b88:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <FSM+0x128>)
 8000b8a:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <FSM+0x13c>)
 8000b8c:	f000 f89a 	bl	8000cc4 <send_string>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <FSM+0xfe>
				return STATE_SEND_CIPSEND;
 8000b96:	2302      	movs	r3, #2
 8000b98:	e00d      	b.n	8000bb6 <FSM+0x11a>
			else
				return STATE_SEND_DATA;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e00b      	b.n	8000bb6 <FSM+0x11a>

		case STATE_ERROR:
			if(send_string("AT+RESTORE\r\n", "ready\r\n"))
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <FSM+0x124>)
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <FSM+0x140>)
 8000ba2:	f000 f88f 	bl	8000cc4 <send_string>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <FSM+0x114>
				return STATE_CONFIG;
 8000bac:	2307      	movs	r3, #7
 8000bae:	e002      	b.n	8000bb6 <FSM+0x11a>
			else
				NVIC_SystemReset();
 8000bb0:	f7ff fd46 	bl	8000640 <__NVIC_SystemReset>
		}
	return current_state;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08007900 	.word	0x08007900
 8000bc4:	08007908 	.word	0x08007908
 8000bc8:	08007910 	.word	0x08007910
 8000bcc:	08007918 	.word	0x08007918
 8000bd0:	08007948 	.word	0x08007948
 8000bd4:	08007974 	.word	0x08007974
 8000bd8:	08007984 	.word	0x08007984
 8000bdc:	0800798c 	.word	0x0800798c

08000be0 <My_IRQ_Handler>:

void My_IRQ_Handler(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	current_state = FSM(current_state);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <My_IRQ_Handler+0x34>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff57 	bl	8000a9c <FSM>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <My_IRQ_Handler+0x34>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	memset(recieved_message, '\0', strlen((char*) recieved_message));
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <My_IRQ_Handler+0x38>)
 8000bf8:	f7ff fb6e 	bl	80002d8 <strlen>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <My_IRQ_Handler+0x38>)
 8000c04:	f006 fe3e 	bl	8007884 <memset>
	HAL_NVIC_ClearPendingIRQ(MY_IRQn);
 8000c08:	202a      	movs	r0, #42	; 0x2a
 8000c0a:	f000 fc66 	bl	80014da <HAL_NVIC_ClearPendingIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000000 	.word	0x24000000
 8000c18:	2400015c 	.word	0x2400015c

08000c1c <AT_halt_until>:

bool AT_halt_until(const char *array){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	uint32_t start_time = uwTick;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <AT_halt_until+0x50>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
	  while(1){
		  if((uwTick - start_time) > 5000)//5 seconds has passed
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <AT_halt_until+0x50>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d901      	bls.n	8000c3e <AT_halt_until+0x22>
			  return false;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e012      	b.n	8000c64 <AT_halt_until+0x48>
		  if(strstr((char*)recieved_message, "busy") != NULL)
 8000c3e:	490c      	ldr	r1, [pc, #48]	; (8000c70 <AT_halt_until+0x54>)
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <AT_halt_until+0x58>)
 8000c42:	f006 fe36 	bl	80078b2 <strstr>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <AT_halt_until+0x38>
			  HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f000 fae6 	bl	8001220 <HAL_Delay>
		  if(strstr((char*)recieved_message, array) != NULL)
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <AT_halt_until+0x58>)
 8000c58:	f006 fe2b 	bl	80078b2 <strstr>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0e3      	beq.n	8000c2a <AT_halt_until+0xe>
			  return true;
 8000c62:	2301      	movs	r3, #1

	  }
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2400035c 	.word	0x2400035c
 8000c70:	080078f8 	.word	0x080078f8
 8000c74:	2400015c 	.word	0x2400015c

08000c78 <AT_config>:

bool AT_config(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	if(send_string("AT+CIPMODE=0\r\n", "OK\r\n")){
 8000c7c:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <AT_config+0x3c>)
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <AT_config+0x40>)
 8000c80:	f000 f820 	bl	8000cc4 <send_string>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d011      	beq.n	8000cae <AT_config+0x36>
		memset(recieved_message, '\0', strlen((char*)recieved_message));
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <AT_config+0x44>)
 8000c8c:	f7ff fb24 	bl	80002d8 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <AT_config+0x44>)
 8000c98:	f006 fdf4 	bl	8007884 <memset>
		if(send_string("AT+CWMODE=1\r\n", "OK\r\n"))
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <AT_config+0x3c>)
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <AT_config+0x48>)
 8000ca0:	f000 f810 	bl	8000cc4 <send_string>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <AT_config+0x36>
			return true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <AT_config+0x38>
	}
	return false;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	08007908 	.word	0x08007908
 8000cb8:	0800799c 	.word	0x0800799c
 8000cbc:	2400015c 	.word	0x2400015c
 8000cc0:	080079ac 	.word	0x080079ac

08000cc4 <send_string>:

// transmit the string over the USART interface
//if false is sent -> ERROR
bool send_string(const char *str, const char *resp) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	if(HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_UART_TIMEOUT_VALUE) != HAL_OK){
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fb02 	bl	80002d8 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <send_string+0x74>)
 8000ce0:	f004 f9d4 	bl	800508c <HAL_UART_Transmit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d01d      	beq.n	8000d26 <send_string+0x62>
		for(int i = 0; i < 3; i ++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e015      	b.n	8000d1c <send_string+0x58>
			if(HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_UART_TIMEOUT_VALUE) == HAL_OK)
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff faf1 	bl	80002d8 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <send_string+0x74>)
 8000d02:	f004 f9c3 	bl	800508c <HAL_UART_Transmit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00b      	beq.n	8000d24 <send_string+0x60>
				break;
			else if(i == 2)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d101      	bne.n	8000d16 <send_string+0x52>
				return false;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e00b      	b.n	8000d2e <send_string+0x6a>
		for(int i = 0; i < 3; i ++){
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dde6      	ble.n	8000cf0 <send_string+0x2c>
 8000d22:	e000      	b.n	8000d26 <send_string+0x62>
				break;
 8000d24:	bf00      	nop
		}
	}
	return AT_halt_until(resp);
 8000d26:	6838      	ldr	r0, [r7, #0]
 8000d28:	f7ff ff78 	bl	8000c1c <AT_halt_until>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000030 	.word	0x24000030

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x30>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0bc      	sub	sp, #240	; 0xf0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	22c0      	movs	r2, #192	; 0xc0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fd71 	bl	8007884 <memset>
  if(huart->Instance==USART2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a55      	ldr	r2, [pc, #340]	; (8000efc <HAL_UART_MspInit+0x180>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d14e      	bne.n	8000e4a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dac:	f04f 0202 	mov.w	r2, #2
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fae6 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dce:	f7ff ffb5 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd8:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
 8000e0e:	2360      	movs	r3, #96	; 0x60
 8000e10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e30:	4619      	mov	r1, r3
 8000e32:	4834      	ldr	r0, [pc, #208]	; (8000f04 <HAL_UART_MspInit+0x188>)
 8000e34:	f001 f8c4 	bl	8001fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2026      	movs	r0, #38	; 0x26
 8000e3e:	f000 fb18 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e42:	2026      	movs	r0, #38	; 0x26
 8000e44:	f000 fb2f 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e48:	e053      	b.n	8000ef2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d14e      	bne.n	8000ef2 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e54:	f04f 0202 	mov.w	r2, #2
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fa92 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000e76:	f7ff ff61 	bl	8000d3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_UART_MspInit+0x190>)
 8000ede:	f001 f86f 	bl	8001fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2027      	movs	r0, #39	; 0x27
 8000ee8:	f000 fac3 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eec:	2027      	movs	r0, #39	; 0x27
 8000eee:	f000 fada 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	37f0      	adds	r7, #240	; 0xf0
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004400 	.word	0x40004400
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020c00 	.word	0x58020c00
 8000f08:	40004800 	.word	0x40004800
 8000f0c:	58020400 	.word	0x58020400

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f940 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <USART2_IRQHandler+0x18>)
 8000f6a:	f004 f969 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4903      	ldr	r1, [pc, #12]	; (8000f80 <USART2_IRQHandler+0x1c>)
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x18>)
 8000f74:	f004 f918 	bl	80051a8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24000030 	.word	0x24000030
 8000f80:	24000158 	.word	0x24000158

08000f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USART3_IRQHandler+0x10>)
 8000f8a:	f004 f959 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	240000c4 	.word	0x240000c4

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <SystemInit+0xe4>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <SystemInit+0xe4>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <SystemInit+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d807      	bhi.n	8000fc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <SystemInit+0xe8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	; (8001080 <SystemInit+0xe8>)
 8000fc2:	f043 0307 	orr.w	r3, r3, #7
 8000fc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <SystemInit+0xec>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <SystemInit+0xec>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <SystemInit+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <SystemInit+0xec>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4929      	ldr	r1, [pc, #164]	; (8001084 <SystemInit+0xec>)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <SystemInit+0xf0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <SystemInit+0xe8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <SystemInit+0xe8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 030f 	bic.w	r3, r3, #15
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <SystemInit+0xe8>)
 8000ffc:	f043 0307 	orr.w	r3, r3, #7
 8001000:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <SystemInit+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <SystemInit+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <SystemInit+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <SystemInit+0xec>)
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <SystemInit+0xf4>)
 8001018:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <SystemInit+0xec>)
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <SystemInit+0xf8>)
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <SystemInit+0xec>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <SystemInit+0xfc>)
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <SystemInit+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <SystemInit+0xec>)
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <SystemInit+0xfc>)
 8001030:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <SystemInit+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <SystemInit+0xec>)
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <SystemInit+0xfc>)
 800103c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <SystemInit+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <SystemInit+0xec>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <SystemInit+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <SystemInit+0x100>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <SystemInit+0x104>)
 800105c:	4013      	ands	r3, r2
 800105e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001062:	d202      	bcs.n	800106a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <SystemInit+0x108>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <SystemInit+0x10c>)
 800106c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001070:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	52002000 	.word	0x52002000
 8001084:	58024400 	.word	0x58024400
 8001088:	eaf6ed7f 	.word	0xeaf6ed7f
 800108c:	02020200 	.word	0x02020200
 8001090:	01ff0000 	.word	0x01ff0000
 8001094:	01010280 	.word	0x01010280
 8001098:	5c001000 	.word	0x5c001000
 800109c:	ffff0000 	.word	0xffff0000
 80010a0:	51008108 	.word	0x51008108
 80010a4:	52004000 	.word	0x52004000

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ac:	f7ff ff74 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f006 fbb1 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fae9 	bl	80006b0 <main>
  bx  lr
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010e8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80010ec:	08007a04 	.word	0x08007a04
  ldr r2, =_sbss
 80010f0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80010f4:	24000360 	.word	0x24000360

080010f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC3_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f9aa 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001108:	f001 ff6e 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 800110c:	4602      	mov	r2, r0
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_Init+0x68>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	4913      	ldr	r1, [pc, #76]	; (8001168 <HAL_Init+0x6c>)
 800111a:	5ccb      	ldrb	r3, [r1, r3]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_Init+0x68>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_Init+0x6c>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_Init+0x70>)
 800113e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_Init+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f814 	bl	8001174 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e002      	b.n	800115c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fdf7 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	58024400 	.word	0x58024400
 8001168:	080079bc 	.word	0x080079bc
 800116c:	24000008 	.word	0x24000008
 8001170:	24000004 	.word	0x24000004

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_InitTick+0x60>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e021      	b.n	80011cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_InitTick+0x64>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_InitTick+0x60>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f98f 	bl	80014c2 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f000 f959 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x68>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24000010 	.word	0x24000010
 80011d8:	24000004 	.word	0x24000004
 80011dc:	2400000c 	.word	0x2400000c

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24000010 	.word	0x24000010
 8001204:	2400035c 	.word	0x2400035c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2400035c 	.word	0x2400035c

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24000010 	.word	0x24000010

08001268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetREVID+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	5c001000 	.word	0x5c001000

08001280 <__NVIC_SetPriorityGrouping>:
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00
 80012c4:	05fa0000 	.word	0x05fa0000

080012c8 <__NVIC_GetPriorityGrouping>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_ClearPendingIRQ>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0c      	blt.n	800134c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_ClearPendingIRQ+0x38>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	3360      	adds	r3, #96	; 0x60
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff0b 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff22 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff15 	bl	80012e4 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa4 	bl	8001418 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80014e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff19 	bl	8001320 <__NVIC_ClearPendingIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff fe82 	bl	8001208 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e2dc      	b.n	8001aca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d008      	beq.n	800152e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e2cd      	b.n	8001aca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a76      	ldr	r2, [pc, #472]	; (800170c <HAL_DMA_Abort+0x214>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d04a      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a74      	ldr	r2, [pc, #464]	; (8001710 <HAL_DMA_Abort+0x218>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d045      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a73      	ldr	r2, [pc, #460]	; (8001714 <HAL_DMA_Abort+0x21c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d040      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a71      	ldr	r2, [pc, #452]	; (8001718 <HAL_DMA_Abort+0x220>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d03b      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a70      	ldr	r2, [pc, #448]	; (800171c <HAL_DMA_Abort+0x224>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d036      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6e      	ldr	r2, [pc, #440]	; (8001720 <HAL_DMA_Abort+0x228>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d031      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6d      	ldr	r2, [pc, #436]	; (8001724 <HAL_DMA_Abort+0x22c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d02c      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6b      	ldr	r2, [pc, #428]	; (8001728 <HAL_DMA_Abort+0x230>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d027      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6a      	ldr	r2, [pc, #424]	; (800172c <HAL_DMA_Abort+0x234>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d022      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a68      	ldr	r2, [pc, #416]	; (8001730 <HAL_DMA_Abort+0x238>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01d      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a67      	ldr	r2, [pc, #412]	; (8001734 <HAL_DMA_Abort+0x23c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d018      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_DMA_Abort+0x240>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a64      	ldr	r2, [pc, #400]	; (800173c <HAL_DMA_Abort+0x244>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00e      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a62      	ldr	r2, [pc, #392]	; (8001740 <HAL_DMA_Abort+0x248>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d009      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a61      	ldr	r2, [pc, #388]	; (8001744 <HAL_DMA_Abort+0x24c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d004      	beq.n	80015ce <HAL_DMA_Abort+0xd6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <HAL_DMA_Abort+0x250>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_DMA_Abort+0xda>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_DMA_Abort+0xdc>
 80015d2:	2300      	movs	r3, #0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 021e 	bic.w	r2, r2, #30
 80015e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e00a      	b.n	8001616 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 020e 	bic.w	r2, r2, #14
 800160e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a3c      	ldr	r2, [pc, #240]	; (800170c <HAL_DMA_Abort+0x214>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d072      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <HAL_DMA_Abort+0x218>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d06d      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a39      	ldr	r2, [pc, #228]	; (8001714 <HAL_DMA_Abort+0x21c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d068      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a37      	ldr	r2, [pc, #220]	; (8001718 <HAL_DMA_Abort+0x220>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d063      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a36      	ldr	r2, [pc, #216]	; (800171c <HAL_DMA_Abort+0x224>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d05e      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_DMA_Abort+0x228>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d059      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <HAL_DMA_Abort+0x22c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d054      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_DMA_Abort+0x230>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d04f      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a30      	ldr	r2, [pc, #192]	; (800172c <HAL_DMA_Abort+0x234>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d04a      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_DMA_Abort+0x238>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d045      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <HAL_DMA_Abort+0x23c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d040      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <HAL_DMA_Abort+0x240>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d03b      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_DMA_Abort+0x244>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d036      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_DMA_Abort+0x248>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d031      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_DMA_Abort+0x24c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d02c      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_DMA_Abort+0x250>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d027      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_DMA_Abort+0x254>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d022      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_DMA_Abort+0x258>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01d      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_DMA_Abort+0x25c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d018      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_DMA_Abort+0x260>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_DMA_Abort+0x264>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00e      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_DMA_Abort+0x268>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d009      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_DMA_Abort+0x26c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_Abort+0x20e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_DMA_Abort+0x270>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d132      	bne.n	800176c <HAL_DMA_Abort+0x274>
 8001706:	2301      	movs	r3, #1
 8001708:	e031      	b.n	800176e <HAL_DMA_Abort+0x276>
 800170a:	bf00      	nop
 800170c:	40020010 	.word	0x40020010
 8001710:	40020028 	.word	0x40020028
 8001714:	40020040 	.word	0x40020040
 8001718:	40020058 	.word	0x40020058
 800171c:	40020070 	.word	0x40020070
 8001720:	40020088 	.word	0x40020088
 8001724:	400200a0 	.word	0x400200a0
 8001728:	400200b8 	.word	0x400200b8
 800172c:	40020410 	.word	0x40020410
 8001730:	40020428 	.word	0x40020428
 8001734:	40020440 	.word	0x40020440
 8001738:	40020458 	.word	0x40020458
 800173c:	40020470 	.word	0x40020470
 8001740:	40020488 	.word	0x40020488
 8001744:	400204a0 	.word	0x400204a0
 8001748:	400204b8 	.word	0x400204b8
 800174c:	58025408 	.word	0x58025408
 8001750:	5802541c 	.word	0x5802541c
 8001754:	58025430 	.word	0x58025430
 8001758:	58025444 	.word	0x58025444
 800175c:	58025458 	.word	0x58025458
 8001760:	5802546c 	.word	0x5802546c
 8001764:	58025480 	.word	0x58025480
 8001768:	58025494 	.word	0x58025494
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001780:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6d      	ldr	r2, [pc, #436]	; (800193c <HAL_DMA_Abort+0x444>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04a      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6b      	ldr	r2, [pc, #428]	; (8001940 <HAL_DMA_Abort+0x448>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d045      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_DMA_Abort+0x44c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d040      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a68      	ldr	r2, [pc, #416]	; (8001948 <HAL_DMA_Abort+0x450>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d03b      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a67      	ldr	r2, [pc, #412]	; (800194c <HAL_DMA_Abort+0x454>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d036      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a65      	ldr	r2, [pc, #404]	; (8001950 <HAL_DMA_Abort+0x458>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d031      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a64      	ldr	r2, [pc, #400]	; (8001954 <HAL_DMA_Abort+0x45c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d02c      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a62      	ldr	r2, [pc, #392]	; (8001958 <HAL_DMA_Abort+0x460>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d027      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_DMA_Abort+0x464>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d022      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5f      	ldr	r2, [pc, #380]	; (8001960 <HAL_DMA_Abort+0x468>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01d      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_DMA_Abort+0x46c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d018      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a5c      	ldr	r2, [pc, #368]	; (8001968 <HAL_DMA_Abort+0x470>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a5b      	ldr	r2, [pc, #364]	; (800196c <HAL_DMA_Abort+0x474>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a59      	ldr	r2, [pc, #356]	; (8001970 <HAL_DMA_Abort+0x478>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_DMA_Abort+0x47c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_DMA_Abort+0x32a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a56      	ldr	r2, [pc, #344]	; (8001978 <HAL_DMA_Abort+0x480>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d108      	bne.n	8001834 <HAL_DMA_Abort+0x33c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e007      	b.n	8001844 <HAL_DMA_Abort+0x34c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001844:	e013      	b.n	800186e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001846:	f7ff fcdf 	bl	8001208 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b05      	cmp	r3, #5
 8001852:	d90c      	bls.n	800186e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2220      	movs	r2, #32
 8001858:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e12d      	b.n	8001aca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e5      	bne.n	8001846 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <HAL_DMA_Abort+0x444>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d04a      	beq.n	800191a <HAL_DMA_Abort+0x422>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_DMA_Abort+0x448>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d045      	beq.n	800191a <HAL_DMA_Abort+0x422>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <HAL_DMA_Abort+0x44c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d040      	beq.n	800191a <HAL_DMA_Abort+0x422>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_DMA_Abort+0x450>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d03b      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a29      	ldr	r2, [pc, #164]	; (800194c <HAL_DMA_Abort+0x454>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d036      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_DMA_Abort+0x458>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d031      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a26      	ldr	r2, [pc, #152]	; (8001954 <HAL_DMA_Abort+0x45c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d02c      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_DMA_Abort+0x460>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d027      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <HAL_DMA_Abort+0x464>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d022      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_DMA_Abort+0x468>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01d      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_DMA_Abort+0x46c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d018      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_DMA_Abort+0x470>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_DMA_Abort+0x474>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00e      	beq.n	800191a <HAL_DMA_Abort+0x422>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_DMA_Abort+0x478>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_DMA_Abort+0x422>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <HAL_DMA_Abort+0x47c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_DMA_Abort+0x422>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <HAL_DMA_Abort+0x480>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_DMA_Abort+0x426>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_DMA_Abort+0x428>
 800191e:	2300      	movs	r3, #0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d02b      	beq.n	800197c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	223f      	movs	r2, #63	; 0x3f
 8001934:	409a      	lsls	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	e02a      	b.n	8001992 <HAL_DMA_Abort+0x49a>
 800193c:	40020010 	.word	0x40020010
 8001940:	40020028 	.word	0x40020028
 8001944:	40020040 	.word	0x40020040
 8001948:	40020058 	.word	0x40020058
 800194c:	40020070 	.word	0x40020070
 8001950:	40020088 	.word	0x40020088
 8001954:	400200a0 	.word	0x400200a0
 8001958:	400200b8 	.word	0x400200b8
 800195c:	40020410 	.word	0x40020410
 8001960:	40020428 	.word	0x40020428
 8001964:	40020440 	.word	0x40020440
 8001968:	40020458 	.word	0x40020458
 800196c:	40020470 	.word	0x40020470
 8001970:	40020488 	.word	0x40020488
 8001974:	400204a0 	.word	0x400204a0
 8001978:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2201      	movs	r2, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_DMA_Abort+0x5dc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d072      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_DMA_Abort+0x5e0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d06d      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_DMA_Abort+0x5e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d068      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_DMA_Abort+0x5e8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d063      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_DMA_Abort+0x5ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d05e      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_DMA_Abort+0x5f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d059      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a46      	ldr	r2, [pc, #280]	; (8001aec <HAL_DMA_Abort+0x5f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d054      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a44      	ldr	r2, [pc, #272]	; (8001af0 <HAL_DMA_Abort+0x5f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d04f      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a43      	ldr	r2, [pc, #268]	; (8001af4 <HAL_DMA_Abort+0x5fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d04a      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_DMA_Abort+0x600>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d045      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_DMA_Abort+0x604>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d040      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a3e      	ldr	r2, [pc, #248]	; (8001b00 <HAL_DMA_Abort+0x608>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d03b      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_DMA_Abort+0x60c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d036      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_DMA_Abort+0x610>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <HAL_DMA_Abort+0x614>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d02c      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_DMA_Abort+0x618>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d027      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <HAL_DMA_Abort+0x61c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d022      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <HAL_DMA_Abort+0x620>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01d      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <HAL_DMA_Abort+0x624>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d018      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <HAL_DMA_Abort+0x628>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_DMA_Abort+0x62c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_DMA_Abort+0x630>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d009      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <HAL_DMA_Abort+0x634>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d004      	beq.n	8001a82 <HAL_DMA_Abort+0x58a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <HAL_DMA_Abort+0x638>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_DMA_Abort+0x58e>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_DMA_Abort+0x590>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a94:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ab6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020010 	.word	0x40020010
 8001ad8:	40020028 	.word	0x40020028
 8001adc:	40020040 	.word	0x40020040
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	40020070 	.word	0x40020070
 8001ae8:	40020088 	.word	0x40020088
 8001aec:	400200a0 	.word	0x400200a0
 8001af0:	400200b8 	.word	0x400200b8
 8001af4:	40020410 	.word	0x40020410
 8001af8:	40020428 	.word	0x40020428
 8001afc:	40020440 	.word	0x40020440
 8001b00:	40020458 	.word	0x40020458
 8001b04:	40020470 	.word	0x40020470
 8001b08:	40020488 	.word	0x40020488
 8001b0c:	400204a0 	.word	0x400204a0
 8001b10:	400204b8 	.word	0x400204b8
 8001b14:	58025408 	.word	0x58025408
 8001b18:	5802541c 	.word	0x5802541c
 8001b1c:	58025430 	.word	0x58025430
 8001b20:	58025444 	.word	0x58025444
 8001b24:	58025458 	.word	0x58025458
 8001b28:	5802546c 	.word	0x5802546c
 8001b2c:	58025480 	.word	0x58025480
 8001b30:	58025494 	.word	0x58025494

08001b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e237      	b.n	8001fb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e22c      	b.n	8001fb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5c      	ldr	r2, [pc, #368]	; (8001cd4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d04a      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d045      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_DMA_Abort_IT+0x1a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d040      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_DMA_Abort_IT+0x1ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d03b      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <HAL_DMA_Abort_IT+0x1b0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d036      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <HAL_DMA_Abort_IT+0x1b4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a53      	ldr	r2, [pc, #332]	; (8001cec <HAL_DMA_Abort_IT+0x1b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02c      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_DMA_Abort_IT+0x1bc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d027      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a50      	ldr	r2, [pc, #320]	; (8001cf4 <HAL_DMA_Abort_IT+0x1c0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d022      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_DMA_Abort_IT+0x1c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d01d      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4d      	ldr	r2, [pc, #308]	; (8001cfc <HAL_DMA_Abort_IT+0x1c8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d018      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_DMA_Abort_IT+0x1cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_DMA_Abort_IT+0x1d0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_DMA_Abort_IT+0x1d4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a47      	ldr	r2, [pc, #284]	; (8001d0c <HAL_DMA_Abort_IT+0x1d8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xc8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a46      	ldr	r2, [pc, #280]	; (8001d10 <HAL_DMA_Abort_IT+0x1dc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Abort_IT+0xcc>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_DMA_Abort_IT+0xce>
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8086 	beq.w	8001d14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <HAL_DMA_Abort_IT+0x1a0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04a      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <HAL_DMA_Abort_IT+0x1a4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d045      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <HAL_DMA_Abort_IT+0x1a8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <HAL_DMA_Abort_IT+0x1ac>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d03b      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_DMA_Abort_IT+0x1b0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d036      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_DMA_Abort_IT+0x1b4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d031      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_DMA_Abort_IT+0x1b8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02c      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <HAL_DMA_Abort_IT+0x1bc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d027      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_DMA_Abort_IT+0x1c0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d022      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <HAL_DMA_Abort_IT+0x1c4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01d      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_DMA_Abort_IT+0x1c8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d018      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_DMA_Abort_IT+0x1cc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_DMA_Abort_IT+0x1d0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_DMA_Abort_IT+0x1d4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_DMA_Abort_IT+0x1d8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x17c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_DMA_Abort_IT+0x1dc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d108      	bne.n	8001cc2 <HAL_DMA_Abort_IT+0x18e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e178      	b.n	8001fb4 <HAL_DMA_Abort_IT+0x480>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e16f      	b.n	8001fb4 <HAL_DMA_Abort_IT+0x480>
 8001cd4:	40020010 	.word	0x40020010
 8001cd8:	40020028 	.word	0x40020028
 8001cdc:	40020040 	.word	0x40020040
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	40020070 	.word	0x40020070
 8001ce8:	40020088 	.word	0x40020088
 8001cec:	400200a0 	.word	0x400200a0
 8001cf0:	400200b8 	.word	0x400200b8
 8001cf4:	40020410 	.word	0x40020410
 8001cf8:	40020428 	.word	0x40020428
 8001cfc:	40020440 	.word	0x40020440
 8001d00:	40020458 	.word	0x40020458
 8001d04:	40020470 	.word	0x40020470
 8001d08:	40020488 	.word	0x40020488
 8001d0c:	400204a0 	.word	0x400204a0
 8001d10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020e 	bic.w	r2, r2, #14
 8001d22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6c      	ldr	r2, [pc, #432]	; (8001edc <HAL_DMA_Abort_IT+0x3a8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d04a      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_DMA_Abort_IT+0x3ac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d045      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_DMA_Abort_IT+0x3b0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d040      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a68      	ldr	r2, [pc, #416]	; (8001ee8 <HAL_DMA_Abort_IT+0x3b4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d03b      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a66      	ldr	r2, [pc, #408]	; (8001eec <HAL_DMA_Abort_IT+0x3b8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d036      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_DMA_Abort_IT+0x3bc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d031      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <HAL_DMA_Abort_IT+0x3c0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02c      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a62      	ldr	r2, [pc, #392]	; (8001ef8 <HAL_DMA_Abort_IT+0x3c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d027      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a60      	ldr	r2, [pc, #384]	; (8001efc <HAL_DMA_Abort_IT+0x3c8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d022      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5f      	ldr	r2, [pc, #380]	; (8001f00 <HAL_DMA_Abort_IT+0x3cc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d01d      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5d      	ldr	r2, [pc, #372]	; (8001f04 <HAL_DMA_Abort_IT+0x3d0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d018      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <HAL_DMA_Abort_IT+0x3d4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5a      	ldr	r2, [pc, #360]	; (8001f0c <HAL_DMA_Abort_IT+0x3d8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00e      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <HAL_DMA_Abort_IT+0x3dc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <HAL_DMA_Abort_IT+0x3e0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x290>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a56      	ldr	r2, [pc, #344]	; (8001f18 <HAL_DMA_Abort_IT+0x3e4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <HAL_DMA_Abort_IT+0x2a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_DMA_Abort_IT+0x2b2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_DMA_Abort_IT+0x3a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d072      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <HAL_DMA_Abort_IT+0x3ac>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d06d      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a39      	ldr	r2, [pc, #228]	; (8001ee4 <HAL_DMA_Abort_IT+0x3b0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d068      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_DMA_Abort_IT+0x3b4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d063      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a36      	ldr	r2, [pc, #216]	; (8001eec <HAL_DMA_Abort_IT+0x3b8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_DMA_Abort_IT+0x3bc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d059      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_DMA_Abort_IT+0x3c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d054      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <HAL_DMA_Abort_IT+0x3c4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d04f      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a30      	ldr	r2, [pc, #192]	; (8001efc <HAL_DMA_Abort_IT+0x3c8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2e      	ldr	r2, [pc, #184]	; (8001f00 <HAL_DMA_Abort_IT+0x3cc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <HAL_DMA_Abort_IT+0x3d0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_DMA_Abort_IT+0x3d4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_DMA_Abort_IT+0x3d8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_DMA_Abort_IT+0x3dc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_DMA_Abort_IT+0x3e0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <HAL_DMA_Abort_IT+0x3e4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_DMA_Abort_IT+0x3e8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_DMA_Abort_IT+0x3ec>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <HAL_DMA_Abort_IT+0x3f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_DMA_Abort_IT+0x3f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_DMA_Abort_IT+0x3f8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_DMA_Abort_IT+0x3fc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_DMA_Abort_IT+0x400>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x3a2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_DMA_Abort_IT+0x404>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d132      	bne.n	8001f3c <HAL_DMA_Abort_IT+0x408>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e031      	b.n	8001f3e <HAL_DMA_Abort_IT+0x40a>
 8001eda:	bf00      	nop
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	40020040 	.word	0x40020040
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	40020070 	.word	0x40020070
 8001ef0:	40020088 	.word	0x40020088
 8001ef4:	400200a0 	.word	0x400200a0
 8001ef8:	400200b8 	.word	0x400200b8
 8001efc:	40020410 	.word	0x40020410
 8001f00:	40020428 	.word	0x40020428
 8001f04:	40020440 	.word	0x40020440
 8001f08:	40020458 	.word	0x40020458
 8001f0c:	40020470 	.word	0x40020470
 8001f10:	40020488 	.word	0x40020488
 8001f14:	400204a0 	.word	0x400204a0
 8001f18:	400204b8 	.word	0x400204b8
 8001f1c:	58025408 	.word	0x58025408
 8001f20:	5802541c 	.word	0x5802541c
 8001f24:	58025430 	.word	0x58025430
 8001f28:	58025444 	.word	0x58025444
 8001f2c:	58025458 	.word	0x58025458
 8001f30:	5802546c 	.word	0x5802546c
 8001f34:	58025480 	.word	0x58025480
 8001f38:	58025494 	.word	0x58025494
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2201      	movs	r2, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <HAL_GPIO_Init+0x234>)
 8001fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fd2:	e194      	b.n	80022fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8186 	beq.w	80022f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d005      	beq.n	8002004 <HAL_GPIO_Init+0x44>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d130      	bne.n	8002066 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203a:	2201      	movs	r2, #1
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	f003 0201 	and.w	r2, r3, #1
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b03      	cmp	r3, #3
 8002070:	d017      	beq.n	80020a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d123      	bne.n	80020f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	69b9      	ldr	r1, [r7, #24]
 80020f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0203 	and.w	r2, r3, #3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80e0 	beq.w	80022f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_GPIO_Init+0x238>)
 800213a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800213e:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <HAL_GPIO_Init+0x238>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_GPIO_Init+0x238>)
 800214a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002156:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HAL_GPIO_Init+0x23c>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_GPIO_Init+0x240>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d052      	beq.n	8002228 <HAL_GPIO_Init+0x268>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_GPIO_Init+0x244>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_GPIO_Init+0x22e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_GPIO_Init+0x248>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02b      	beq.n	80021ea <HAL_GPIO_Init+0x22a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_GPIO_Init+0x24c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_GPIO_Init+0x250>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_GPIO_Init+0x254>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <HAL_GPIO_Init+0x258>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_GPIO_Init+0x25c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x260>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_GPIO_Init+0x264>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x20e>
 80021ca:	2309      	movs	r3, #9
 80021cc:	e02d      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021ce:	230a      	movs	r3, #10
 80021d0:	e02b      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021d2:	2308      	movs	r3, #8
 80021d4:	e029      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e027      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021da:	2306      	movs	r3, #6
 80021dc:	e025      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021de:	2305      	movs	r3, #5
 80021e0:	e023      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e021      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e01f      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e01d      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e01b      	b.n	800222a <HAL_GPIO_Init+0x26a>
 80021f2:	bf00      	nop
 80021f4:	58000080 	.word	0x58000080
 80021f8:	58024400 	.word	0x58024400
 80021fc:	58000400 	.word	0x58000400
 8002200:	58020000 	.word	0x58020000
 8002204:	58020400 	.word	0x58020400
 8002208:	58020800 	.word	0x58020800
 800220c:	58020c00 	.word	0x58020c00
 8002210:	58021000 	.word	0x58021000
 8002214:	58021400 	.word	0x58021400
 8002218:	58021800 	.word	0x58021800
 800221c:	58021c00 	.word	0x58021c00
 8002220:	58022000 	.word	0x58022000
 8002224:	58022400 	.word	0x58022400
 8002228:	2300      	movs	r3, #0
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	4093      	lsls	r3, r2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223a:	4938      	ldr	r1, [pc, #224]	; (800231c <HAL_GPIO_Init+0x35c>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800226e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800229c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f ae63 	bne.w	8001fd4 <HAL_GPIO_Init+0x14>
  }
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	3724      	adds	r7, #36	; 0x24
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	58000400 	.word	0x58000400

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800233c:	e003      	b.n	8002346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_PWREx_ConfigSupply+0x70>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00a      	beq.n	800237e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_PWREx_ConfigSupply+0x70>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e01f      	b.n	80023ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e01d      	b.n	80023ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	490f      	ldr	r1, [pc, #60]	; (80023c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800238e:	f7fe ff3b 	bl	8001208 <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002394:	e009      	b.n	80023aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002396:	f7fe ff37 	bl	8001208 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d901      	bls.n	80023aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_PWREx_ConfigSupply+0x70>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b6:	d1ee      	bne.n	8002396 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	58024800 	.word	0x58024800

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f000 bc48 	b.w	8002c6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8088 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b99      	ldr	r3, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f4:	4b96      	ldr	r3, [pc, #600]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d007      	beq.n	8002410 <HAL_RCC_OscConfig+0x48>
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2b18      	cmp	r3, #24
 8002404:	d111      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06d      	beq.n	80024f8 <HAL_RCC_OscConfig+0x130>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d169      	bne.n	80024f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f000 bc21 	b.w	8002c6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x7a>
 8002434:	4b86      	ldr	r3, [pc, #536]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a85      	ldr	r2, [pc, #532]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x9c>
 800244a:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a80      	ldr	r2, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b7e      	ldr	r3, [pc, #504]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7d      	ldr	r2, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xc0>
 800246e:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b75      	ldr	r3, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a74      	ldr	r2, [pc, #464]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a70      	ldr	r2, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe feae 	bl	8001208 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe feaa 	bl	8001208 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e3d4      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe9a 	bl	8001208 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fe96 	bl	8001208 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e3c0      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ea:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80ca 	beq.w	800269c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002508:	4b51      	ldr	r3, [pc, #324]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002510:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_RCC_OscConfig+0x166>
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	2b18      	cmp	r3, #24
 8002522:	d156      	bne.n	80025d2 <HAL_RCC_OscConfig+0x20a>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d151      	bne.n	80025d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x17e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e392      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0219 	bic.w	r2, r3, #25
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	493f      	ldr	r1, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fe56 	bl	8001208 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fe52 	bl	8001208 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e37c      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	f7fe fe73 	bl	8001268 <HAL_GetREVID>
 8002582:	4603      	mov	r3, r0
 8002584:	f241 0203 	movw	r2, #4099	; 0x1003
 8002588:	4293      	cmp	r3, r2
 800258a:	d817      	bhi.n	80025bc <HAL_RCC_OscConfig+0x1f4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d108      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1de>
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e07a      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	031b      	lsls	r3, r3, #12
 80025b4:	4926      	ldr	r1, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ba:	e06f      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4921      	ldr	r1, [pc, #132]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	e064      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d047      	beq.n	800266a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0219 	bic.w	r2, r3, #25
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	491a      	ldr	r1, [pc, #104]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe0c 	bl	8001208 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fe08 	bl	8001208 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e332      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	f7fe fe29 	bl	8001268 <HAL_GetREVID>
 8002616:	4603      	mov	r3, r0
 8002618:	f241 0203 	movw	r2, #4099	; 0x1003
 800261c:	4293      	cmp	r3, r2
 800261e:	d819      	bhi.n	8002654 <HAL_RCC_OscConfig+0x28c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d108      	bne.n	800263a <HAL_RCC_OscConfig+0x272>
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002636:	6053      	str	r3, [r2, #4]
 8002638:	e030      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	031b      	lsls	r3, r3, #12
 8002648:	4901      	ldr	r1, [pc, #4]	; (8002650 <HAL_RCC_OscConfig+0x288>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	e025      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
 8002650:	58024400 	.word	0x58024400
 8002654:	4b9a      	ldr	r3, [pc, #616]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	4997      	ldr	r1, [pc, #604]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e018      	b.n	800269c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b95      	ldr	r3, [pc, #596]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a94      	ldr	r2, [pc, #592]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fdc7 	bl	8001208 <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fdc3 	bl	8001208 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e2ed      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002690:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a9 	beq.w	80027fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b4:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d007      	beq.n	80026d0 <HAL_RCC_OscConfig+0x308>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b18      	cmp	r3, #24
 80026c4:	d13a      	bne.n	800273c <HAL_RCC_OscConfig+0x374>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d135      	bne.n	800273c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026d0:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x320>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e2c1      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e8:	f7fe fdbe 	bl	8001268 <HAL_GetREVID>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d817      	bhi.n	8002726 <HAL_RCC_OscConfig+0x35e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x348>
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002706:	4a6e      	ldr	r2, [pc, #440]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800270c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270e:	e075      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002710:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	4968      	ldr	r1, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002724:	e06a      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002726:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	4962      	ldr	r1, [pc, #392]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800273a:	e05f      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d042      	beq.n	80027ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fd5a 	bl	8001208 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002758:	f7fe fd56 	bl	8001208 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e280      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800276a:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002776:	f7fe fd77 	bl	8001268 <HAL_GetREVID>
 800277a:	4603      	mov	r3, r0
 800277c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002780:	4293      	cmp	r3, r2
 8002782:	d817      	bhi.n	80027b4 <HAL_RCC_OscConfig+0x3ec>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	2b20      	cmp	r3, #32
 800278a:	d108      	bne.n	800279e <HAL_RCC_OscConfig+0x3d6>
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800279a:	6053      	str	r3, [r2, #4]
 800279c:	e02e      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	069b      	lsls	r3, r3, #26
 80027ac:	4944      	ldr	r1, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e023      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
 80027b4:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	493f      	ldr	r1, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fd17 	bl	8001208 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027de:	f7fe fd13 	bl	8001208 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e23d      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f0:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d036      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d019      	beq.n	8002844 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fcf4 	bl	8001208 <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe fcf0 	bl	8001208 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e21a      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x45c>
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fcda 	bl	8001208 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002858:	f7fe fcd6 	bl	8001208 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e200      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d039      	beq.n	80028f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002894:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002896:	f7fe fcb7 	bl	8001208 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800289e:	f7fe fcb3 	bl	8001208 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1dd      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x4d6>
 80028bc:	e01b      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028c4:	4b9b      	ldr	r3, [pc, #620]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a9a      	ldr	r2, [pc, #616]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fc9a 	bl	8001208 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d8:	f7fe fc96 	bl	8001208 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1c0      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ea:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8081 	beq.w	8002a06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002904:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <HAL_RCC_OscConfig+0x770>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8b      	ldr	r2, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x770>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002910:	f7fe fc7a 	bl	8001208 <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe fc76 	bl	8001208 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1a0      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x770>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x584>
 800293e:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a7c      	ldr	r2, [pc, #496]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	e02d      	b.n	80029a8 <HAL_RCC_OscConfig+0x5e0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x5a6>
 8002954:	4b77      	ldr	r3, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b74      	ldr	r3, [pc, #464]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a73      	ldr	r2, [pc, #460]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x5e0>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c8>
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x5e0>
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a64      	ldr	r2, [pc, #400]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fc2a 	bl	8001208 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fc26 	bl	8001208 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e14e      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x5f0>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe fc14 	bl	8001208 <HAL_GetTick>
 80029e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fc10 	bl	8001208 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e138      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029fa:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 812d 	beq.w	8002c6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a10:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a18:	2b18      	cmp	r3, #24
 8002a1a:	f000 80bd 	beq.w	8002b98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	f040 809e 	bne.w	8002b64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fbe8 	bl	8001208 <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fbe4 	bl	8001208 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e10e      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4e:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCC_OscConfig+0x774>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	4931      	ldr	r1, [pc, #196]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	628b      	str	r3, [r1, #40]	; 0x28
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	3b01      	subs	r3, #1
 8002a84:	025b      	lsls	r3, r3, #9
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002aa4:	4923      	ldr	r1, [pc, #140]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac2:	00d2      	lsls	r2, r2, #3
 8002ac4:	491b      	ldr	r1, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f023 020c 	bic.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4917      	ldr	r1, [pc, #92]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	f023 0202 	bic.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	4912      	ldr	r1, [pc, #72]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fb6d 	bl	8001208 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b30:	e011      	b.n	8002b56 <HAL_RCC_OscConfig+0x78e>
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	58024800 	.word	0x58024800
 8002b3c:	fffffc0c 	.word	0xfffffc0c
 8002b40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fb60 	bl	8001208 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e08a      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x77c>
 8002b62:	e082      	b.n	8002c6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fb4a 	bl	8001208 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fb46 	bl	8001208 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e070      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x7b0>
 8002b96:	e068      	b.n	8002c6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d031      	beq.n	8002c10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0203 	and.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d12a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d122      	bne.n	8002c10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0a5b      	lsrs	r3, r3, #9
 8002bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d108      	bne.n	8002c10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0e1b      	lsrs	r3, r3, #24
 8002c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e02b      	b.n	8002c6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d01f      	beq.n	8002c6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c36:	f7fe fae7 	bl	8001208 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c3c:	bf00      	nop
 8002c3e:	f7fe fae3 	bl	8001208 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d0f9      	beq.n	8002c3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_OscConfig+0x8b0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c56:	00d2      	lsls	r2, r2, #3
 8002c58:	4906      	ldr	r1, [pc, #24]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_RCC_OscConfig+0x8ac>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3730      	adds	r7, #48	; 0x30
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	ffff0007 	.word	0xffff0007

08002c7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e19c      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b87      	ldr	r3, [pc, #540]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 020f 	bic.w	r2, r3, #15
 8002ca6:	4985      	ldr	r1, [pc, #532]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e184      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	4975      	ldr	r1, [pc, #468]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	496a      	ldr	r1, [pc, #424]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d010      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d908      	bls.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	495e      	ldr	r1, [pc, #376]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d908      	bls.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d66:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4953      	ldr	r1, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d908      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f023 020f 	bic.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4947      	ldr	r1, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d055      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4940      	ldr	r1, [pc, #256]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0f6      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0ea      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0de      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0d6      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f023 0207 	bic.w	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2e:	f7fe f9eb 	bl	8001208 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e36:	f7fe f9e7 	bl	8001208 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0be      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d1eb      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d208      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d214      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4906      	ldr	r1, [pc, #24]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e086      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
 8002ebc:	52002000 	.word	0x52002000
 8002ec0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d208      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	492e      	ldr	r1, [pc, #184]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d208      	bcs.n	8002f4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4922      	ldr	r1, [pc, #136]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d208      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4917      	ldr	r1, [pc, #92]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f7c:	f000 f834 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <HAL_RCC_ClockConfig+0x35c>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_RCC_ClockConfig+0x35c>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x360>)
 8002fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x364>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x368>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe f8d8 	bl	8001174 <HAL_InitTick>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	080079bc 	.word	0x080079bc
 8002fdc:	24000008 	.word	0x24000008
 8002fe0:	24000004 	.word	0x24000004
 8002fe4:	2400000c 	.word	0x2400000c

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fee:	4bb3      	ldr	r3, [pc, #716]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff6:	2b18      	cmp	r3, #24
 8002ff8:	f200 8155 	bhi.w	80032a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003069 	.word	0x08003069
 8003008:	080032a7 	.word	0x080032a7
 800300c:	080032a7 	.word	0x080032a7
 8003010:	080032a7 	.word	0x080032a7
 8003014:	080032a7 	.word	0x080032a7
 8003018:	080032a7 	.word	0x080032a7
 800301c:	080032a7 	.word	0x080032a7
 8003020:	080032a7 	.word	0x080032a7
 8003024:	0800308f 	.word	0x0800308f
 8003028:	080032a7 	.word	0x080032a7
 800302c:	080032a7 	.word	0x080032a7
 8003030:	080032a7 	.word	0x080032a7
 8003034:	080032a7 	.word	0x080032a7
 8003038:	080032a7 	.word	0x080032a7
 800303c:	080032a7 	.word	0x080032a7
 8003040:	080032a7 	.word	0x080032a7
 8003044:	08003095 	.word	0x08003095
 8003048:	080032a7 	.word	0x080032a7
 800304c:	080032a7 	.word	0x080032a7
 8003050:	080032a7 	.word	0x080032a7
 8003054:	080032a7 	.word	0x080032a7
 8003058:	080032a7 	.word	0x080032a7
 800305c:	080032a7 	.word	0x080032a7
 8003060:	080032a7 	.word	0x080032a7
 8003064:	0800309b 	.word	0x0800309b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	4b94      	ldr	r3, [pc, #592]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003074:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003086:	e111      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003088:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800308a:	61bb      	str	r3, [r7, #24]
      break;
 800308c:	e10e      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003090:	61bb      	str	r3, [r7, #24]
      break;
 8003092:	e10b      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003094:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003096:	61bb      	str	r3, [r7, #24]
      break;
 8003098:	e108      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030a4:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030b0:	4b82      	ldr	r3, [pc, #520]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ba:	4b80      	ldr	r3, [pc, #512]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	08db      	lsrs	r3, r3, #3
 80030c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80e1 	beq.w	80032a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f000 8083 	beq.w	80031ec <HAL_RCC_GetSysClockFreq+0x204>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f200 80a1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x248>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x114>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d056      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030fa:	e099      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003108:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	4a6b      	ldr	r2, [pc, #428]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b62      	ldr	r3, [pc, #392]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a02 	vldr	s12, [r7, #8]
 8003146:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003162:	e087      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003186:	ed97 6a02 	vldr	s12, [r7, #8]
 800318a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800318e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a6:	e065      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ea:	e043      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800322e:	e021      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003272:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	0a5b      	lsrs	r3, r3, #9
 800327a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327e:	3301      	adds	r3, #1
 8003280:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800328c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003298:	ee17 3a90 	vmov	r3, s15
 800329c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800329e:	e005      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
      break;
 80032a4:	e002      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032a8:	61bb      	str	r3, [r7, #24]
      break;
 80032aa:	bf00      	nop
  }

  return sysclockfreq;
 80032ac:	69bb      	ldr	r3, [r7, #24]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	; 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	03d09000 	.word	0x03d09000
 80032c4:	003d0900 	.word	0x003d0900
 80032c8:	017d7840 	.word	0x017d7840
 80032cc:	46000000 	.word	0x46000000
 80032d0:	4c742400 	.word	0x4c742400
 80032d4:	4a742400 	.word	0x4a742400
 80032d8:	4bbebc20 	.word	0x4bbebc20

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032e2:	f7ff fe81 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_GetHCLKFreq+0x50>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490f      	ldr	r1, [pc, #60]	; (8003330 <HAL_RCC_GetHCLKFreq+0x54>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_RCC_GetHCLKFreq+0x50>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_RCC_GetHCLKFreq+0x54>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_RCC_GetHCLKFreq+0x58>)
 8003318:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_RCC_GetHCLKFreq+0x5c>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_RCC_GetHCLKFreq+0x58>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	080079bc 	.word	0x080079bc
 8003334:	24000008 	.word	0x24000008
 8003338:	24000004 	.word	0x24000004

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003340:	f7ff ffcc 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	080079bc 	.word	0x080079bc

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800336c:	f7ff ffb6 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	080079bc 	.word	0x080079bc

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b0ca      	sub	sp, #296	; 0x128
 800339a:	af00      	add	r7, sp, #0
 800339c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80033b8:	2500      	movs	r5, #0
 80033ba:	ea54 0305 	orrs.w	r3, r4, r5
 80033be:	d049      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d0:	d828      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d6:	d01a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033dc:	d822      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e6:	d007      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033e8:	e01c      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ea:	4bb8      	ldr	r3, [pc, #736]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	4ab7      	ldr	r2, [pc, #732]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f6:	e01a      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	3308      	adds	r3, #8
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f001 fc8f 	bl	8004d24 <RCCEx_PLL2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340c:	e00f      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003412:	3328      	adds	r3, #40	; 0x28
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fd36 	bl	8004e88 <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800342c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003436:	4ba5      	ldr	r3, [pc, #660]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003444:	4aa1      	ldr	r2, [pc, #644]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003446:	430b      	orrs	r3, r1
 8003448:	6513      	str	r3, [r2, #80]	; 0x50
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003460:	f04f 0900 	mov.w	r9, #0
 8003464:	ea58 0309 	orrs.w	r3, r8, r9
 8003468:	d047      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	2b04      	cmp	r3, #4
 8003472:	d82a      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	08003491 	.word	0x08003491
 8003480:	0800349f 	.word	0x0800349f
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034d3 	.word	0x080034d3
 800348c:	080034d3 	.word	0x080034d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a8d      	ldr	r2, [pc, #564]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349c:	e01a      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a2:	3308      	adds	r3, #8
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fc3c 	bl	8004d24 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e00f      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b8:	3328      	adds	r3, #40	; 0x28
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fce3 	bl	8004e88 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034dc:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f023 0107 	bic.w	r1, r3, #7
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	4a78      	ldr	r2, [pc, #480]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6513      	str	r3, [r2, #80]	; 0x50
 80034f0:	e003      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	ea5a 030b 	orrs.w	r3, sl, fp
 800350e:	d04c      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d030      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800351c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003520:	d829      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d02d      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003526:	2bc0      	cmp	r3, #192	; 0xc0
 8003528:	d825      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d018      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d821      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d007      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800353a:	e01c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4b63      	ldr	r3, [pc, #396]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a62      	ldr	r2, [pc, #392]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003548:	e01c      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354e:	3308      	adds	r3, #8
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fbe6 	bl	8004d24 <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800355e:	e011      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003564:	3328      	adds	r3, #40	; 0x28
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f001 fc8d 	bl	8004e88 <RCCEx_PLL3_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003574:	e006      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800358c:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6513      	str	r3, [r2, #80]	; 0x50
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80035b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d053      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d6:	d035      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035dc:	d82e      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035e2:	d031      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035e8:	d828      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ee:	d01a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d822      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fe:	d007      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003600:	e01c      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800360e:	e01c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003614:	3308      	adds	r3, #8
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fb83 	bl	8004d24 <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003624:	e011      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fc2a 	bl	8004e88 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003662:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6593      	str	r3, [r2, #88]	; 0x58
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800367e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003688:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d056      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800369a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369e:	d038      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a4:	d831      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036aa:	d034      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b0:	d82b      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b6:	d01d      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036bc:	d825      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036c8:	e01f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4ba2      	ldr	r3, [pc, #648]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4aa1      	ldr	r2, [pc, #644]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036dc:	e01c      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e2:	3308      	adds	r3, #8
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fb1c 	bl	8004d24 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036f2:	e011      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f8:	3328      	adds	r3, #40	; 0x28
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fbc3 	bl	8004e88 <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003720:	4b8e      	ldr	r3, [pc, #568]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003730:	4a8a      	ldr	r2, [pc, #552]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003732:	430b      	orrs	r3, r1
 8003734:	6593      	str	r3, [r2, #88]	; 0x58
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800374c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003756:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d03a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	2b30      	cmp	r3, #48	; 0x30
 8003768:	d01f      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800376a:	2b30      	cmp	r3, #48	; 0x30
 800376c:	d819      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800376e:	2b20      	cmp	r3, #32
 8003770:	d00c      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d815      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d019      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800377a:	2b10      	cmp	r3, #16
 800377c:	d111      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377e:	4b77      	ldr	r3, [pc, #476]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a76      	ldr	r2, [pc, #472]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800378a:	e011      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	3308      	adds	r3, #8
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fac5 	bl	8004d24 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037a0:	e006      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	4a65      	ldr	r2, [pc, #404]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80037e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d051      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003800:	d035      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003806:	d82e      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800380c:	d031      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800380e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003812:	d828      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d01a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d822      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d007      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800382a:	e01c      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003838:	e01c      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	3308      	adds	r3, #8
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fa6e 	bl	8004d24 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800384e:	e011      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003854:	3328      	adds	r3, #40	; 0x28
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fb15 	bl	8004e88 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800387c:	4b37      	ldr	r3, [pc, #220]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	4a34      	ldr	r2, [pc, #208]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388c:	430b      	orrs	r3, r1
 800388e:	6513      	str	r3, [r2, #80]	; 0x50
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038b4:	460b      	mov	r3, r1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	d056      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d033      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ca:	d82c      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d0:	d02f      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d6:	d826      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038dc:	d02b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e2:	d820      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e8:	d012      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ee:	d81a      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d022      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d115      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	3308      	adds	r3, #8
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fa0e 	bl	8004d24 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800390e:	e015      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fab5 	bl	8004e88 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003924:	e00a      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003952:	4a02      	ldr	r2, [pc, #8]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003954:	430b      	orrs	r3, r1
 8003956:	6513      	str	r3, [r2, #80]	; 0x50
 8003958:	e006      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800395a:	bf00      	nop
 800395c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003964:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800397e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d055      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003994:	d033      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399a:	d82c      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d02f      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d826      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ac:	d02b      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b2:	d820      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d012      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039be:	d81a      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d022      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c8:	d115      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ce:	3308      	adds	r3, #8
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f9a6 	bl	8004d24 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039de:	e015      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fa4d 	bl	8004e88 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039fe:	bf00      	nop
 8003a00:	e004      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a14:	4ba3      	ldr	r3, [pc, #652]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a24:	4a9f      	ldr	r2, [pc, #636]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a26:	430b      	orrs	r3, r1
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2a:	e003      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d037      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5e:	d00e      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a64:	d816      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4b8c      	ldr	r3, [pc, #560]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4a8b      	ldr	r2, [pc, #556]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f94c 	bl	8004d24 <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aa6:	4b7f      	ldr	r3, [pc, #508]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a7b      	ldr	r2, [pc, #492]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6513      	str	r3, [r2, #80]	; 0x50
 8003aba:	e003      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ada:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d039      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d81c      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b31 	.word	0x08003b31
 8003af8:	08003b05 	.word	0x08003b05
 8003afc:	08003b13 	.word	0x08003b13
 8003b00:	08003b31 	.word	0x08003b31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b67      	ldr	r3, [pc, #412]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a66      	ldr	r2, [pc, #408]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f902 	bl	8004d24 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	f023 0103 	bic.w	r1, r3, #3
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	4a56      	ldr	r2, [pc, #344]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f000 809f 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b86:	f7fd fb3f 	bl	8001208 <HAL_GetTick>
 8003b8a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b90:	f7fd fb3a 	bl	8001208 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d903      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ed      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d179      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bc8:	4053      	eors	r3, r2
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bf6:	4a2b      	ldr	r2, [pc, #172]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0a:	d118      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fafc 	bl	8001208 <HAL_GetTick>
 8003c10:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c14:	e00d      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fd faf7 	bl	8001208 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d903      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003c30:	e005      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0eb      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d129      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c56:	d10e      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c68:	091a      	lsrs	r2, r3, #4
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6113      	str	r3, [r2, #16]
 8003c74:	e005      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c80:	6113      	str	r3, [r2, #16]
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	e00e      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58024800 	.word	0x58024800
 8003cac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f002 0301 	and.w	r3, r2, #1
 8003cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f000 8089 	beq.w	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce0:	2b28      	cmp	r3, #40	; 0x28
 8003ce2:	d86b      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003dc5 	.word	0x08003dc5
 8003cf0:	08003dbd 	.word	0x08003dbd
 8003cf4:	08003dbd 	.word	0x08003dbd
 8003cf8:	08003dbd 	.word	0x08003dbd
 8003cfc:	08003dbd 	.word	0x08003dbd
 8003d00:	08003dbd 	.word	0x08003dbd
 8003d04:	08003dbd 	.word	0x08003dbd
 8003d08:	08003dbd 	.word	0x08003dbd
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003dbd 	.word	0x08003dbd
 8003d14:	08003dbd 	.word	0x08003dbd
 8003d18:	08003dbd 	.word	0x08003dbd
 8003d1c:	08003dbd 	.word	0x08003dbd
 8003d20:	08003dbd 	.word	0x08003dbd
 8003d24:	08003dbd 	.word	0x08003dbd
 8003d28:	08003dbd 	.word	0x08003dbd
 8003d2c:	08003da7 	.word	0x08003da7
 8003d30:	08003dbd 	.word	0x08003dbd
 8003d34:	08003dbd 	.word	0x08003dbd
 8003d38:	08003dbd 	.word	0x08003dbd
 8003d3c:	08003dbd 	.word	0x08003dbd
 8003d40:	08003dbd 	.word	0x08003dbd
 8003d44:	08003dbd 	.word	0x08003dbd
 8003d48:	08003dbd 	.word	0x08003dbd
 8003d4c:	08003dc5 	.word	0x08003dc5
 8003d50:	08003dbd 	.word	0x08003dbd
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003dbd 	.word	0x08003dbd
 8003d60:	08003dbd 	.word	0x08003dbd
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dbd 	.word	0x08003dbd
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003dc5 	.word	0x08003dc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d94:	3308      	adds	r3, #8
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 ffc3 	bl	8004d24 <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003daa:	3328      	adds	r3, #40	; 0x28
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f86a 	bl	8004e88 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dce:	4bbf      	ldr	r3, [pc, #764]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	4abb      	ldr	r2, [pc, #748]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6553      	str	r3, [r2, #84]	; 0x54
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 0302 	and.w	r3, r2, #2
 8003df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d041      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d824      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e69 	.word	0x08003e69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ff71 	bl	8004d24 <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3328      	adds	r3, #40	; 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f818 	bl	8004e88 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e72:	4b96      	ldr	r3, [pc, #600]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f023 0107 	bic.w	r1, r3, #7
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e80:	4a92      	ldr	r2, [pc, #584]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6553      	str	r3, [r2, #84]	; 0x54
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f002 0304 	and.w	r3, r2, #4
 8003e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d044      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d825      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003edd 	.word	0x08003edd
 8003ecc:	08003ef3 	.word	0x08003ef3
 8003ed0:	08003f11 	.word	0x08003f11
 8003ed4:	08003f11 	.word	0x08003f11
 8003ed8:	08003f11 	.word	0x08003f11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ff1d 	bl	8004d24 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef6:	3328      	adds	r3, #40	; 0x28
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ffc4 	bl	8004e88 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f023 0107 	bic.w	r1, r3, #7
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	4a68      	ldr	r2, [pc, #416]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	f002 0320 	and.w	r3, r2, #32
 8003f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f54:	460b      	mov	r3, r1
 8003f56:	4313      	orrs	r3, r2
 8003f58:	d055      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f66:	d033      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f6c:	d82c      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d02f      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d826      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f7e:	d02b      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f84:	d820      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8a:	d012      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f90:	d81a      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d022      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 febd 	bl	8004d24 <RCCEx_PLL2_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fb0:	e015      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb6:	3328      	adds	r3, #40	; 0x28
 8003fb8:	2102      	movs	r1, #2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff64 	bl	8004e88 <RCCEx_PLL3_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fc6:	e00a      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fce:	e006      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6553      	str	r3, [r2, #84]	; 0x54
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800401c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d058      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800402e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004032:	d033      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004038:	d82c      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d02f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d826      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d02b      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800404c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004050:	d820      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d012      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d81a      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d022      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d115      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	3308      	adds	r3, #8
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fe57 	bl	8004d24 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800407c:	e015      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fefe 	bl	8004e88 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004092:	e00a      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800409a:	e006      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800409c:	bf00      	nop
 800409e:	e004      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a0:	bf00      	nop
 80040a2:	e002      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10e      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c2:	4a02      	ldr	r2, [pc, #8]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d055      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004100:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004104:	d033      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004106:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800410a:	d82c      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	d02f      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004116:	d826      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004118:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800411c:	d02b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800411e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004122:	d820      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004128:	d012      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412e:	d81a      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d022      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004138:	d115      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413e:	3308      	adds	r3, #8
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fdee 	bl	8004d24 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800414e:	e015      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004154:	3328      	adds	r3, #40	; 0x28
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fe95 	bl	8004e88 <RCCEx_PLL3_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004164:	e00a      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004184:	4ba1      	ldr	r3, [pc, #644]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004194:	4a9d      	ldr	r2, [pc, #628]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004196:	430b      	orrs	r3, r1
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
 800419a:	e003      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f002 0308 	and.w	r3, r2, #8
 80041b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d01e      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d6:	3328      	adds	r3, #40	; 0x28
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fe54 	bl	8004e88 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041ec:	4b87      	ldr	r3, [pc, #540]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fc:	4a83      	ldr	r2, [pc, #524]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f002 0310 	and.w	r3, r2, #16
 800420e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004218:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800421c:	460b      	mov	r3, r1
 800421e:	4313      	orrs	r3, r2
 8004220:	d01e      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422e:	d10c      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fe25 	bl	8004e88 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424a:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800425a:	4a6c      	ldr	r2, [pc, #432]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800426c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004276:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d03e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428c:	d022      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004292:	d81b      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d00b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800429e:	e015      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	3308      	adds	r3, #8
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fd3b 	bl	8004d24 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b4:	e00f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	3328      	adds	r3, #40	; 0x28
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fde2 	bl	8004e88 <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042de:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042ee:	4a47      	ldr	r2, [pc, #284]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6593      	str	r3, [r2, #88]	; 0x58
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800430a:	67bb      	str	r3, [r7, #120]	; 0x78
 800430c:	2300      	movs	r3, #0
 800430e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004310:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004314:	460b      	mov	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004326:	d01f      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432c:	d818      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004338:	d007      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800433a:	e011      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004348:	e00f      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434e:	3328      	adds	r3, #40	; 0x28
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fd98 	bl	8004e88 <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6553      	str	r3, [r2, #84]	; 0x54
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800439e:	673b      	str	r3, [r7, #112]	; 0x70
 80043a0:	2300      	movs	r3, #0
 80043a2:	677b      	str	r3, [r7, #116]	; 0x74
 80043a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d034      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d007      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043cc:	e00e      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	3308      	adds	r3, #8
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fca4 	bl	8004d24 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	4a02      	ldr	r2, [pc, #8]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004404:	430b      	orrs	r3, r1
 8004406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004408:	e006      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800440a:	bf00      	nop
 800440c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
 8004426:	2300      	movs	r3, #0
 8004428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800442a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d00c      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004438:	3328      	adds	r3, #40	; 0x28
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fd23 	bl	8004e88 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800445a:	663b      	str	r3, [r7, #96]	; 0x60
 800445c:	2300      	movs	r3, #0
 800445e:	667b      	str	r3, [r7, #100]	; 0x64
 8004460:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d038      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d018      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447c:	d811      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800447e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004482:	d014      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d80b      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d011      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4bc3      	ldr	r3, [pc, #780]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4ac2      	ldr	r2, [pc, #776]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044bc:	4bb9      	ldr	r3, [pc, #740]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044cc:	4ab5      	ldr	r2, [pc, #724]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6553      	str	r3, [r2, #84]	; 0x54
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ea:	2300      	movs	r3, #0
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f8:	4baa      	ldr	r3, [pc, #680]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004506:	4aa7      	ldr	r2, [pc, #668]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004518:	653b      	str	r3, [r7, #80]	; 0x50
 800451a:	2300      	movs	r3, #0
 800451c:	657b      	str	r3, [r7, #84]	; 0x54
 800451e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004528:	4b9e      	ldr	r3, [pc, #632]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004538:	4a9a      	ldr	r2, [pc, #616]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453a:	430b      	orrs	r3, r1
 800453c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	2300      	movs	r3, #0
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800455a:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004568:	4a8e      	ldr	r2, [pc, #568]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800457a:	643b      	str	r3, [r7, #64]	; 0x40
 800457c:	2300      	movs	r3, #0
 800457e:	647b      	str	r3, [r7, #68]	; 0x44
 8004580:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800458a:	4b86      	ldr	r3, [pc, #536]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	4a85      	ldr	r2, [pc, #532]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045a2:	4a80      	ldr	r2, [pc, #512]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b6:	2300      	movs	r3, #0
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045c4:	4b77      	ldr	r3, [pc, #476]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d4:	430b      	orrs	r3, r1
 80045d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f4:	4b6b      	ldr	r3, [pc, #428]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004604:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004606:	430b      	orrs	r3, r1
 8004608:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	2100      	movs	r1, #0
 8004614:	62b9      	str	r1, [r7, #40]	; 0x28
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	3308      	adds	r3, #8
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fb78 	bl	8004d24 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800463a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	2100      	movs	r1, #0
 8004654:	6239      	str	r1, [r7, #32]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d011      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	3308      	adds	r3, #8
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fb58 	bl	8004d24 <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	2100      	movs	r1, #0
 8004694:	61b9      	str	r1, [r7, #24]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d011      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046aa:	3308      	adds	r3, #8
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb38 	bl	8004d24 <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	2100      	movs	r1, #0
 80046d4:	6139      	str	r1, [r7, #16]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d011      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ea:	3328      	adds	r3, #40	; 0x28
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fbca 	bl	8004e88 <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	2100      	movs	r1, #0
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d011      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	3328      	adds	r3, #40	; 0x28
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fbaa 	bl	8004e88 <RCCEx_PLL3_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800473a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	2100      	movs	r1, #0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004760:	460b      	mov	r3, r1
 8004762:	4313      	orrs	r3, r2
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	3328      	adds	r3, #40	; 0x28
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fb8a 	bl	8004e88 <RCCEx_PLL3_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800478a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
}
 8004798:	4618      	mov	r0, r3
 800479a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a4:	58024400 	.word	0x58024400

080047a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047ac:	f7fe fd96 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	; (80047d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	58024400 	.word	0x58024400
 80047d0:	080079bc 	.word	0x080079bc

080047d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047dc:	4ba1      	ldr	r3, [pc, #644]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047e6:	4b9f      	ldr	r3, [pc, #636]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	0b1b      	lsrs	r3, r3, #12
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047f2:	4b9c      	ldr	r3, [pc, #624]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047fe:	4b99      	ldr	r3, [pc, #612]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8111 	beq.w	8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b02      	cmp	r3, #2
 8004826:	f000 8083 	beq.w	8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b02      	cmp	r3, #2
 800482e:	f200 80a1 	bhi.w	8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d056      	beq.n	80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800483e:	e099      	b.n	8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004840:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02d      	beq.n	80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800484c:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	4a84      	ldr	r2, [pc, #528]	; (8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a03 	vldr	s12, [r7, #12]
 800488a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048a6:	e087      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ea:	e065      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fe:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004912:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492e:	e043      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800493e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004942:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004952:	ed97 6a03 	vldr	s12, [r7, #12]
 8004956:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800495a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004972:	e021      	b.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a03 	vldr	s12, [r7, #12]
 800499a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	0a5b      	lsrs	r3, r3, #9
 80049be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049de:	ee17 2a90 	vmov	r2, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0c:	ee17 2a90 	vmov	r2, s15
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a14:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	0e1b      	lsrs	r3, r3, #24
 8004a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3a:	ee17 2a90 	vmov	r2, s15
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a42:	e008      	b.n	8004a56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
}
 8004a56:	bf00      	nop
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	03d09000 	.word	0x03d09000
 8004a6c:	46000000 	.word	0x46000000
 8004a70:	4c742400 	.word	0x4c742400
 8004a74:	4a742400 	.word	0x4a742400
 8004a78:	4bbebc20 	.word	0x4bbebc20

08004a7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a84:	4ba1      	ldr	r3, [pc, #644]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a8e:	4b9f      	ldr	r3, [pc, #636]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	0d1b      	lsrs	r3, r3, #20
 8004a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a9a:	4b9c      	ldr	r3, [pc, #624]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aa6:	4b99      	ldr	r3, [pc, #612]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8111 	beq.w	8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	f000 8083 	beq.w	8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	f200 80a1 	bhi.w	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d056      	beq.n	8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ae6:	e099      	b.n	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae8:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d02d      	beq.n	8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af4:	4b85      	ldr	r3, [pc, #532]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	4a84      	ldr	r2, [pc, #528]	; (8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b7b      	ldr	r3, [pc, #492]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b4e:	e087      	b.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b6a      	ldr	r3, [pc, #424]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b92:	e065      	b.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd6:	e043      	b.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b48      	ldr	r3, [pc, #288]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1a:	e021      	b.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c60:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	0a5b      	lsrs	r3, r3, #9
 8004c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c86:	ee17 2a90 	vmov	r2, s15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c8e:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb4:	ee17 2a90 	vmov	r2, s15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce2:	ee17 2a90 	vmov	r2, s15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cea:	e008      	b.n	8004cfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	03d09000 	.word	0x03d09000
 8004d14:	46000000 	.word	0x46000000
 8004d18:	4c742400 	.word	0x4c742400
 8004d1c:	4a742400 	.word	0x4a742400
 8004d20:	4bbebc20 	.word	0x4bbebc20

08004d24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d32:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d101      	bne.n	8004d42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e099      	b.n	8004e76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d42:	4b4f      	ldr	r3, [pc, #316]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a4e      	ldr	r2, [pc, #312]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4e:	f7fc fa5b 	bl	8001208 <HAL_GetTick>
 8004d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d56:	f7fc fa57 	bl	8001208 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e086      	b.n	8004e76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d68:	4b45      	ldr	r3, [pc, #276]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d74:	4b42      	ldr	r3, [pc, #264]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	493f      	ldr	r1, [pc, #252]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	628b      	str	r3, [r1, #40]	; 0x28
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	025b      	lsls	r3, r3, #9
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	061b      	lsls	r3, r3, #24
 8004db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004db8:	4931      	ldr	r1, [pc, #196]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	492d      	ldr	r1, [pc, #180]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f023 0220 	bic.w	r2, r3, #32
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	4928      	ldr	r1, [pc, #160]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004de2:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	f023 0310 	bic.w	r3, r3, #16
 8004dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <RCCEx_PLL2_Config+0x160>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	69d2      	ldr	r2, [r2, #28]
 8004dfa:	00d2      	lsls	r2, r2, #3
 8004dfc:	4920      	ldr	r1, [pc, #128]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e02:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	f043 0310 	orr.w	r3, r3, #16
 8004e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e20:	e00f      	b.n	8004e42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d106      	bne.n	8004e36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e34:	e005      	b.n	8004e42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fc f9db 	bl	8001208 <HAL_GetTick>
 8004e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e56:	f7fc f9d7 	bl	8001208 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e006      	b.n	8004e76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <RCCEx_PLL2_Config+0x15c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	58024400 	.word	0x58024400
 8004e84:	ffff0007 	.word	0xffff0007

08004e88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e96:	4b53      	ldr	r3, [pc, #332]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d101      	bne.n	8004ea6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e099      	b.n	8004fda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ea6:	4b4f      	ldr	r3, [pc, #316]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4e      	ldr	r2, [pc, #312]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb2:	f7fc f9a9 	bl	8001208 <HAL_GetTick>
 8004eb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eba:	f7fc f9a5 	bl	8001208 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e086      	b.n	8004fda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ecc:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	493f      	ldr	r1, [pc, #252]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	628b      	str	r3, [r1, #40]	; 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	025b      	lsls	r3, r3, #9
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f1c:	4931      	ldr	r1, [pc, #196]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f22:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	492d      	ldr	r1, [pc, #180]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4928      	ldr	r1, [pc, #160]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f46:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <RCCEx_PLL3_Config+0x160>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	69d2      	ldr	r2, [r2, #28]
 8004f5e:	00d2      	lsls	r2, r2, #3
 8004f60:	4920      	ldr	r1, [pc, #128]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f84:	e00f      	b.n	8004fa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f98:	e005      	b.n	8004fa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc f929 	bl	8001208 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fba:	f7fc f925 	bl	8001208 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <RCCEx_PLL3_Config+0x15c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	ffff0007 	.word	0xffff0007

08004fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e042      	b.n	8005084 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fb feb3 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2224      	movs	r2, #36	; 0x24
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fce0 	bl	80059f4 <UART_SetConfig>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e022      	b.n	8005084 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 fa3c 	bl	80064c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fac3 	bl	8006608 <UART_CheckIdleState>
 8005082:	4603      	mov	r3, r0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d17b      	bne.n	800519e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_UART_Transmit+0x26>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e074      	b.n	80051a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2221      	movs	r2, #33	; 0x21
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c6:	f7fc f89f 	bl	8001208 <HAL_GetTick>
 80050ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e4:	d108      	bne.n	80050f8 <HAL_UART_Transmit+0x6c>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e003      	b.n	8005100 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005100:	e030      	b.n	8005164 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f001 fb25 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e03d      	b.n	80051a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005138:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3302      	adds	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e007      	b.n	8005152 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1c8      	bne.n	8005102 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	2140      	movs	r1, #64	; 0x40
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f001 faee 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e006      	b.n	80051a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d137      	bne.n	8005230 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Receive_IT+0x24>
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e030      	b.n	8005232 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_UART_Receive_IT+0x94>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01f      	beq.n	8005220 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	613b      	str	r3, [r7, #16]
   return(result);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	61bb      	str	r3, [r7, #24]
   return(result);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	461a      	mov	r2, r3
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f001 fb00 	bl	800682c <UART_Start_Receive_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	e000      	b.n	8005232 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3728      	adds	r7, #40	; 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	58000c00 	.word	0x58000c00

08005240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	; 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800526a:	f640 030f 	movw	r3, #2063	; 0x80f
 800526e:	4013      	ands	r3, r2
 8005270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11b      	bne.n	80052b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8377 	beq.w	8005998 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
      }
      return;
 80052b2:	e371      	b.n	8005998 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8123 	beq.w	8005504 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052c2:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <HAL_UART_IRQHandler+0x2b8>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052ce:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <HAL_UART_IRQHandler+0x2bc>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8116 	beq.w	8005504 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d011      	beq.n	8005308 <HAL_UART_IRQHandler+0xc8>
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2201      	movs	r2, #1
 80052f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d011      	beq.n	8005338 <HAL_UART_IRQHandler+0xf8>
 8005314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2202      	movs	r2, #2
 8005326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d011      	beq.n	8005368 <HAL_UART_IRQHandler+0x128>
 8005344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2204      	movs	r2, #4
 8005356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f043 0202 	orr.w	r2, r3, #2
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d017      	beq.n	80053a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005380:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005384:	4b5c      	ldr	r3, [pc, #368]	; (80054f8 <HAL_UART_IRQHandler+0x2b8>)
 8005386:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2208      	movs	r2, #8
 8005392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <HAL_UART_IRQHandler+0x196>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 82dd 	beq.w	800599c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d013      	beq.n	8005416 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d005      	beq.n	800543a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800542e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005432:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005436:	2b00      	cmp	r3, #0
 8005438:	d054      	beq.n	80054e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fb18 	bl	8006a70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d146      	bne.n	80054dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800547a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800547e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1d9      	bne.n	800544e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_UART_IRQHandler+0x2c0>)
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fc fb3d 	bl	8001b34 <HAL_DMA_Abort_IT>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80054ce:	4610      	mov	r0, r2
 80054d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d2:	e00f      	b.n	80054f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa77 	bl	80059c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054da:	e00b      	b.n	80054f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa73 	bl	80059c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e2:	e007      	b.n	80054f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa6f 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80054f2:	e253      	b.n	800599c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	bf00      	nop
    return;
 80054f6:	e251      	b.n	800599c <HAL_UART_IRQHandler+0x75c>
 80054f8:	10000001 	.word	0x10000001
 80054fc:	04000120 	.word	0x04000120
 8005500:	08006b3d 	.word	0x08006b3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005508:	2b01      	cmp	r3, #1
 800550a:	f040 81e7 	bne.w	80058dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 81e0 	beq.w	80058dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 81d9 	beq.w	80058dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2210      	movs	r2, #16
 8005530:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	f040 8151 	bne.w	80057e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a96      	ldr	r2, [pc, #600]	; (80057a4 <HAL_UART_IRQHandler+0x564>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d068      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a93      	ldr	r2, [pc, #588]	; (80057a8 <HAL_UART_IRQHandler+0x568>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d061      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a91      	ldr	r2, [pc, #580]	; (80057ac <HAL_UART_IRQHandler+0x56c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d05a      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a8e      	ldr	r2, [pc, #568]	; (80057b0 <HAL_UART_IRQHandler+0x570>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d053      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a8c      	ldr	r2, [pc, #560]	; (80057b4 <HAL_UART_IRQHandler+0x574>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d04c      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a89      	ldr	r2, [pc, #548]	; (80057b8 <HAL_UART_IRQHandler+0x578>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d045      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a87      	ldr	r2, [pc, #540]	; (80057bc <HAL_UART_IRQHandler+0x57c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03e      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a84      	ldr	r2, [pc, #528]	; (80057c0 <HAL_UART_IRQHandler+0x580>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d037      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a82      	ldr	r2, [pc, #520]	; (80057c4 <HAL_UART_IRQHandler+0x584>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d030      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7f      	ldr	r2, [pc, #508]	; (80057c8 <HAL_UART_IRQHandler+0x588>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d029      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a7d      	ldr	r2, [pc, #500]	; (80057cc <HAL_UART_IRQHandler+0x58c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d022      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a7a      	ldr	r2, [pc, #488]	; (80057d0 <HAL_UART_IRQHandler+0x590>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a78      	ldr	r2, [pc, #480]	; (80057d4 <HAL_UART_IRQHandler+0x594>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d014      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a75      	ldr	r2, [pc, #468]	; (80057d8 <HAL_UART_IRQHandler+0x598>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a73      	ldr	r2, [pc, #460]	; (80057dc <HAL_UART_IRQHandler+0x59c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d006      	beq.n	8005622 <HAL_UART_IRQHandler+0x3e2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a70      	ldr	r2, [pc, #448]	; (80057e0 <HAL_UART_IRQHandler+0x5a0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d106      	bne.n	8005630 <HAL_UART_IRQHandler+0x3f0>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	b29b      	uxth	r3, r3
 800562e:	e005      	b.n	800563c <HAL_UART_IRQHandler+0x3fc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81ab 	beq.w	80059a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005650:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005654:	429a      	cmp	r2, r3
 8005656:	f080 81a3 	bcs.w	80059a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005670:	f000 8087 	beq.w	8005782 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800568c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800569e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1da      	bne.n	8005674 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e1      	bne.n	80056be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800570a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800571e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800572c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005762:	65bb      	str	r3, [r7, #88]	; 0x58
 8005764:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e4      	bne.n	8005740 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb febb 	bl	80014f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b29b      	uxth	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f91d 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057a2:	e0fd      	b.n	80059a0 <HAL_UART_IRQHandler+0x760>
 80057a4:	40020010 	.word	0x40020010
 80057a8:	40020028 	.word	0x40020028
 80057ac:	40020040 	.word	0x40020040
 80057b0:	40020058 	.word	0x40020058
 80057b4:	40020070 	.word	0x40020070
 80057b8:	40020088 	.word	0x40020088
 80057bc:	400200a0 	.word	0x400200a0
 80057c0:	400200b8 	.word	0x400200b8
 80057c4:	40020410 	.word	0x40020410
 80057c8:	40020428 	.word	0x40020428
 80057cc:	40020440 	.word	0x40020440
 80057d0:	40020458 	.word	0x40020458
 80057d4:	40020470 	.word	0x40020470
 80057d8:	40020488 	.word	0x40020488
 80057dc:	400204a0 	.word	0x400204a0
 80057e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80cf 	beq.w	80059a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80ca 	beq.w	80059a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005832:	647b      	str	r3, [r7, #68]	; 0x44
 8005834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e4      	bne.n	8005810 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	623b      	str	r3, [r7, #32]
   return(result);
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <HAL_UART_IRQHandler+0x770>)
 800585a:	4013      	ands	r3, r2
 800585c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800586a:	633a      	str	r2, [r7, #48]	; 0x30
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e3      	bne.n	8005846 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	617b      	str	r3, [r7, #20]
   return(result);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e4      	bne.n	8005892 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f881 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058da:	e063      	b.n	80059a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00e      	beq.n	8005906 <HAL_UART_IRQHandler+0x6c6>
 80058e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fe7a 	bl	80075f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005904:	e051      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d014      	beq.n	800593c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800591e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	2b00      	cmp	r3, #0
 8005930:	d03a      	beq.n	80059a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
    }
    return;
 800593a:	e035      	b.n	80059a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <HAL_UART_IRQHandler+0x71c>
 8005948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f907 	bl	8006b68 <UART_EndTransmit_IT>
    return;
 800595a:	e026      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_UART_IRQHandler+0x73c>
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fe53 	bl	8007620 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800597a:	e016      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_UART_IRQHandler+0x76a>
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	2b00      	cmp	r3, #0
 800598e:	da0c      	bge.n	80059aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fe3b 	bl	800760c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005996:	e008      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
      return;
 8005998:	bf00      	nop
 800599a:	e006      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
    return;
 800599c:	bf00      	nop
 800599e:	e004      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
      return;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
      return;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_UART_IRQHandler+0x76a>
    return;
 80059a8:	bf00      	nop
  }
}
 80059aa:	37e8      	adds	r7, #232	; 0xe8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	effffffe 	.word	0xeffffffe

080059b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b092      	sub	sp, #72	; 0x48
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4bbe      	ldr	r3, [pc, #760]	; (8005d1c <UART_SetConfig+0x328>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4ab3      	ldr	r2, [pc, #716]	; (8005d20 <UART_SetConfig+0x32c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4baf      	ldr	r3, [pc, #700]	; (8005d24 <UART_SetConfig+0x330>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	f023 010f 	bic.w	r1, r3, #15
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4aa6      	ldr	r2, [pc, #664]	; (8005d28 <UART_SetConfig+0x334>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d177      	bne.n	8005b84 <UART_SetConfig+0x190>
 8005a94:	4ba5      	ldr	r3, [pc, #660]	; (8005d2c <UART_SetConfig+0x338>)
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9c:	2b28      	cmp	r3, #40	; 0x28
 8005a9e:	d86d      	bhi.n	8005b7c <UART_SetConfig+0x188>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0xb4>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005b4d 	.word	0x08005b4d
 8005aac:	08005b7d 	.word	0x08005b7d
 8005ab0:	08005b7d 	.word	0x08005b7d
 8005ab4:	08005b7d 	.word	0x08005b7d
 8005ab8:	08005b7d 	.word	0x08005b7d
 8005abc:	08005b7d 	.word	0x08005b7d
 8005ac0:	08005b7d 	.word	0x08005b7d
 8005ac4:	08005b7d 	.word	0x08005b7d
 8005ac8:	08005b55 	.word	0x08005b55
 8005acc:	08005b7d 	.word	0x08005b7d
 8005ad0:	08005b7d 	.word	0x08005b7d
 8005ad4:	08005b7d 	.word	0x08005b7d
 8005ad8:	08005b7d 	.word	0x08005b7d
 8005adc:	08005b7d 	.word	0x08005b7d
 8005ae0:	08005b7d 	.word	0x08005b7d
 8005ae4:	08005b7d 	.word	0x08005b7d
 8005ae8:	08005b5d 	.word	0x08005b5d
 8005aec:	08005b7d 	.word	0x08005b7d
 8005af0:	08005b7d 	.word	0x08005b7d
 8005af4:	08005b7d 	.word	0x08005b7d
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005b7d 	.word	0x08005b7d
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b65 	.word	0x08005b65
 8005b0c:	08005b7d 	.word	0x08005b7d
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005b7d 	.word	0x08005b7d
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b6d 	.word	0x08005b6d
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005b7d 	.word	0x08005b7d
 8005b34:	08005b7d 	.word	0x08005b7d
 8005b38:	08005b7d 	.word	0x08005b7d
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005b7d 	.word	0x08005b7d
 8005b44:	08005b7d 	.word	0x08005b7d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e222      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e21e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e21a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e216      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e212      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e20e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e20a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a69      	ldr	r2, [pc, #420]	; (8005d30 <UART_SetConfig+0x33c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d130      	bne.n	8005bf0 <UART_SetConfig+0x1fc>
 8005b8e:	4b67      	ldr	r3, [pc, #412]	; (8005d2c <UART_SetConfig+0x338>)
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d826      	bhi.n	8005be8 <UART_SetConfig+0x1f4>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x1ac>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e1ec      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e1e8      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e1e4      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e1e0      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e1dc      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e1d8      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e1d4      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a4f      	ldr	r2, [pc, #316]	; (8005d34 <UART_SetConfig+0x340>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d130      	bne.n	8005c5c <UART_SetConfig+0x268>
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <UART_SetConfig+0x338>)
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d826      	bhi.n	8005c54 <UART_SetConfig+0x260>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x218>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c25 	.word	0x08005c25
 8005c10:	08005c2d 	.word	0x08005c2d
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e1b6      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e1b2      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e1ae      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e1aa      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c44:	2320      	movs	r3, #32
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e1a6      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c4c:	2340      	movs	r3, #64	; 0x40
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e1a2      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e19e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <UART_SetConfig+0x344>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d130      	bne.n	8005cc8 <UART_SetConfig+0x2d4>
 8005c66:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <UART_SetConfig+0x338>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	d826      	bhi.n	8005cc0 <UART_SetConfig+0x2cc>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <UART_SetConfig+0x284>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c91 	.word	0x08005c91
 8005c7c:	08005c99 	.word	0x08005c99
 8005c80:	08005ca1 	.word	0x08005ca1
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	2300      	movs	r3, #0
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e180      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e17c      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e178      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cae:	e174      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb6:	e170      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cbe:	e16c      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	e168      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <UART_SetConfig+0x348>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d142      	bne.n	8005d58 <UART_SetConfig+0x364>
 8005cd2:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <UART_SetConfig+0x338>)
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d838      	bhi.n	8005d50 <UART_SetConfig+0x35c>
 8005cde:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x2f0>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005d05 	.word	0x08005d05
 8005cec:	08005d0d 	.word	0x08005d0d
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d49 	.word	0x08005d49
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e14a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e146      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e142      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e13e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d1c:	cfff69f3 	.word	0xcfff69f3
 8005d20:	58000c00 	.word	0x58000c00
 8005d24:	11fff4ff 	.word	0x11fff4ff
 8005d28:	40011000 	.word	0x40011000
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	40004400 	.word	0x40004400
 8005d34:	40004800 	.word	0x40004800
 8005d38:	40004c00 	.word	0x40004c00
 8005d3c:	40005000 	.word	0x40005000
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e128      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e124      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e120      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4acb      	ldr	r2, [pc, #812]	; (800608c <UART_SetConfig+0x698>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d176      	bne.n	8005e50 <UART_SetConfig+0x45c>
 8005d62:	4bcb      	ldr	r3, [pc, #812]	; (8006090 <UART_SetConfig+0x69c>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6a:	2b28      	cmp	r3, #40	; 0x28
 8005d6c:	d86c      	bhi.n	8005e48 <UART_SetConfig+0x454>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x380>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005e19 	.word	0x08005e19
 8005d78:	08005e49 	.word	0x08005e49
 8005d7c:	08005e49 	.word	0x08005e49
 8005d80:	08005e49 	.word	0x08005e49
 8005d84:	08005e49 	.word	0x08005e49
 8005d88:	08005e49 	.word	0x08005e49
 8005d8c:	08005e49 	.word	0x08005e49
 8005d90:	08005e49 	.word	0x08005e49
 8005d94:	08005e21 	.word	0x08005e21
 8005d98:	08005e49 	.word	0x08005e49
 8005d9c:	08005e49 	.word	0x08005e49
 8005da0:	08005e49 	.word	0x08005e49
 8005da4:	08005e49 	.word	0x08005e49
 8005da8:	08005e49 	.word	0x08005e49
 8005dac:	08005e49 	.word	0x08005e49
 8005db0:	08005e49 	.word	0x08005e49
 8005db4:	08005e29 	.word	0x08005e29
 8005db8:	08005e49 	.word	0x08005e49
 8005dbc:	08005e49 	.word	0x08005e49
 8005dc0:	08005e49 	.word	0x08005e49
 8005dc4:	08005e49 	.word	0x08005e49
 8005dc8:	08005e49 	.word	0x08005e49
 8005dcc:	08005e49 	.word	0x08005e49
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e31 	.word	0x08005e31
 8005dd8:	08005e49 	.word	0x08005e49
 8005ddc:	08005e49 	.word	0x08005e49
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005e49 	.word	0x08005e49
 8005de8:	08005e49 	.word	0x08005e49
 8005dec:	08005e49 	.word	0x08005e49
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e39 	.word	0x08005e39
 8005df8:	08005e49 	.word	0x08005e49
 8005dfc:	08005e49 	.word	0x08005e49
 8005e00:	08005e49 	.word	0x08005e49
 8005e04:	08005e49 	.word	0x08005e49
 8005e08:	08005e49 	.word	0x08005e49
 8005e0c:	08005e49 	.word	0x08005e49
 8005e10:	08005e49 	.word	0x08005e49
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e0bc      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e0b8      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e0b4      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e0b0      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e0ac      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e40:	2340      	movs	r3, #64	; 0x40
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e0a8      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e0a4      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a8f      	ldr	r2, [pc, #572]	; (8006094 <UART_SetConfig+0x6a0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d130      	bne.n	8005ebc <UART_SetConfig+0x4c8>
 8005e5a:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <UART_SetConfig+0x69c>)
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d826      	bhi.n	8005eb4 <UART_SetConfig+0x4c0>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0x478>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e85 	.word	0x08005e85
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e086      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e082      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e07e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e07a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e076      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005eac:	2340      	movs	r3, #64	; 0x40
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e072      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005eb4:	2380      	movs	r3, #128	; 0x80
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e06e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a75      	ldr	r2, [pc, #468]	; (8006098 <UART_SetConfig+0x6a4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d130      	bne.n	8005f28 <UART_SetConfig+0x534>
 8005ec6:	4b72      	ldr	r3, [pc, #456]	; (8006090 <UART_SetConfig+0x69c>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d826      	bhi.n	8005f20 <UART_SetConfig+0x52c>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x4e4>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ef1 	.word	0x08005ef1
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f01 	.word	0x08005f01
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e050      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e04c      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e048      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e044      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e040      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e03c      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e038      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5b      	ldr	r2, [pc, #364]	; (800609c <UART_SetConfig+0x6a8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d130      	bne.n	8005f94 <UART_SetConfig+0x5a0>
 8005f32:	4b57      	ldr	r3, [pc, #348]	; (8006090 <UART_SetConfig+0x69c>)
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d826      	bhi.n	8005f8c <UART_SetConfig+0x598>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x550>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e01a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6a:	e016      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e012      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e00e      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e00a      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e006      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e002      	b.n	8005f9a <UART_SetConfig+0x5a6>
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a3f      	ldr	r2, [pc, #252]	; (800609c <UART_SetConfig+0x6a8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f040 80f8 	bne.w	8006196 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	dc46      	bgt.n	800603c <UART_SetConfig+0x648>
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	f2c0 8082 	blt.w	80060b8 <UART_SetConfig+0x6c4>
 8005fb4:	3b02      	subs	r3, #2
 8005fb6:	2b1e      	cmp	r3, #30
 8005fb8:	d87e      	bhi.n	80060b8 <UART_SetConfig+0x6c4>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x5cc>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08006043 	.word	0x08006043
 8005fc4:	080060b9 	.word	0x080060b9
 8005fc8:	0800604b 	.word	0x0800604b
 8005fcc:	080060b9 	.word	0x080060b9
 8005fd0:	080060b9 	.word	0x080060b9
 8005fd4:	080060b9 	.word	0x080060b9
 8005fd8:	0800605b 	.word	0x0800605b
 8005fdc:	080060b9 	.word	0x080060b9
 8005fe0:	080060b9 	.word	0x080060b9
 8005fe4:	080060b9 	.word	0x080060b9
 8005fe8:	080060b9 	.word	0x080060b9
 8005fec:	080060b9 	.word	0x080060b9
 8005ff0:	080060b9 	.word	0x080060b9
 8005ff4:	080060b9 	.word	0x080060b9
 8005ff8:	0800606b 	.word	0x0800606b
 8005ffc:	080060b9 	.word	0x080060b9
 8006000:	080060b9 	.word	0x080060b9
 8006004:	080060b9 	.word	0x080060b9
 8006008:	080060b9 	.word	0x080060b9
 800600c:	080060b9 	.word	0x080060b9
 8006010:	080060b9 	.word	0x080060b9
 8006014:	080060b9 	.word	0x080060b9
 8006018:	080060b9 	.word	0x080060b9
 800601c:	080060b9 	.word	0x080060b9
 8006020:	080060b9 	.word	0x080060b9
 8006024:	080060b9 	.word	0x080060b9
 8006028:	080060b9 	.word	0x080060b9
 800602c:	080060b9 	.word	0x080060b9
 8006030:	080060b9 	.word	0x080060b9
 8006034:	080060b9 	.word	0x080060b9
 8006038:	080060ab 	.word	0x080060ab
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d037      	beq.n	80060b0 <UART_SetConfig+0x6bc>
 8006040:	e03a      	b.n	80060b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006042:	f7fe fbb1 	bl	80047a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006048:	e03c      	b.n	80060c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800604a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fbc0 	bl	80047d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006058:	e034      	b.n	80060c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800605a:	f107 0318 	add.w	r3, r7, #24
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fd0c 	bl	8004a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006068:	e02c      	b.n	80060c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <UART_SetConfig+0x69c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <UART_SetConfig+0x69c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	08db      	lsrs	r3, r3, #3
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <UART_SetConfig+0x6ac>)
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006088:	e01c      	b.n	80060c4 <UART_SetConfig+0x6d0>
 800608a:	bf00      	nop
 800608c:	40011400 	.word	0x40011400
 8006090:	58024400 	.word	0x58024400
 8006094:	40007800 	.word	0x40007800
 8006098:	40007c00 	.word	0x40007c00
 800609c:	58000c00 	.word	0x58000c00
 80060a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b9d      	ldr	r3, [pc, #628]	; (800631c <UART_SetConfig+0x928>)
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a8:	e00c      	b.n	80060c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060aa:	4b9d      	ldr	r3, [pc, #628]	; (8006320 <UART_SetConfig+0x92c>)
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ae:	e009      	b.n	80060c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b6:	e005      	b.n	80060c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 81de 	beq.w	8006488 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	4a94      	ldr	r2, [pc, #592]	; (8006324 <UART_SetConfig+0x930>)
 80060d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	fbb3 f3f2 	udiv	r3, r3, r2
 80060de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d305      	bcc.n	80060fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d903      	bls.n	8006104 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006102:	e1c1      	b.n	8006488 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	2200      	movs	r2, #0
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	60fa      	str	r2, [r7, #12]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	4a84      	ldr	r2, [pc, #528]	; (8006324 <UART_SetConfig+0x930>)
 8006112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006116:	b29b      	uxth	r3, r3
 8006118:	2200      	movs	r2, #0
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006126:	f7fa f8df 	bl	80002e8 <__aeabi_uldivmod>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4610      	mov	r0, r2
 8006130:	4619      	mov	r1, r3
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	020b      	lsls	r3, r1, #8
 800613c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006140:	0202      	lsls	r2, r0, #8
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	6849      	ldr	r1, [r1, #4]
 8006146:	0849      	lsrs	r1, r1, #1
 8006148:	2000      	movs	r0, #0
 800614a:	460c      	mov	r4, r1
 800614c:	4605      	mov	r5, r0
 800614e:	eb12 0804 	adds.w	r8, r2, r4
 8006152:	eb43 0905 	adc.w	r9, r3, r5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	469a      	mov	sl, r3
 800615e:	4693      	mov	fp, r2
 8006160:	4652      	mov	r2, sl
 8006162:	465b      	mov	r3, fp
 8006164:	4640      	mov	r0, r8
 8006166:	4649      	mov	r1, r9
 8006168:	f7fa f8be 	bl	80002e8 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617a:	d308      	bcc.n	800618e <UART_SetConfig+0x79a>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d204      	bcs.n	800618e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	e17c      	b.n	8006488 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006194:	e178      	b.n	8006488 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	f040 80c5 	bne.w	800632c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	dc48      	bgt.n	800623c <UART_SetConfig+0x848>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	db7b      	blt.n	80062a6 <UART_SetConfig+0x8b2>
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d879      	bhi.n	80062a6 <UART_SetConfig+0x8b2>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <UART_SetConfig+0x7c4>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	08006243 	.word	0x08006243
 80061bc:	0800624b 	.word	0x0800624b
 80061c0:	080062a7 	.word	0x080062a7
 80061c4:	080062a7 	.word	0x080062a7
 80061c8:	08006253 	.word	0x08006253
 80061cc:	080062a7 	.word	0x080062a7
 80061d0:	080062a7 	.word	0x080062a7
 80061d4:	080062a7 	.word	0x080062a7
 80061d8:	08006263 	.word	0x08006263
 80061dc:	080062a7 	.word	0x080062a7
 80061e0:	080062a7 	.word	0x080062a7
 80061e4:	080062a7 	.word	0x080062a7
 80061e8:	080062a7 	.word	0x080062a7
 80061ec:	080062a7 	.word	0x080062a7
 80061f0:	080062a7 	.word	0x080062a7
 80061f4:	080062a7 	.word	0x080062a7
 80061f8:	08006273 	.word	0x08006273
 80061fc:	080062a7 	.word	0x080062a7
 8006200:	080062a7 	.word	0x080062a7
 8006204:	080062a7 	.word	0x080062a7
 8006208:	080062a7 	.word	0x080062a7
 800620c:	080062a7 	.word	0x080062a7
 8006210:	080062a7 	.word	0x080062a7
 8006214:	080062a7 	.word	0x080062a7
 8006218:	080062a7 	.word	0x080062a7
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062a7 	.word	0x080062a7
 8006224:	080062a7 	.word	0x080062a7
 8006228:	080062a7 	.word	0x080062a7
 800622c:	080062a7 	.word	0x080062a7
 8006230:	080062a7 	.word	0x080062a7
 8006234:	080062a7 	.word	0x080062a7
 8006238:	08006299 	.word	0x08006299
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d02e      	beq.n	800629e <UART_SetConfig+0x8aa>
 8006240:	e031      	b.n	80062a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006242:	f7fd f87b 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8006246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006248:	e033      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800624a:	f7fd f88d 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 800624e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006250:	e02f      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fabc 	bl	80047d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006260:	e027      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006262:	f107 0318 	add.w	r3, r7, #24
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fc08 	bl	8004a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006270:	e01f      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006272:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <UART_SetConfig+0x934>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <UART_SetConfig+0x934>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	4a24      	ldr	r2, [pc, #144]	; (800631c <UART_SetConfig+0x928>)
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006290:	e00f      	b.n	80062b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006292:	4b22      	ldr	r3, [pc, #136]	; (800631c <UART_SetConfig+0x928>)
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006296:	e00c      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006298:	4b21      	ldr	r3, [pc, #132]	; (8006320 <UART_SetConfig+0x92c>)
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80e7 	beq.w	8006488 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <UART_SetConfig+0x930>)
 80062c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062cc:	005a      	lsls	r2, r3, #1
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	441a      	add	r2, r3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2b0f      	cmp	r3, #15
 80062e4:	d916      	bls.n	8006314 <UART_SetConfig+0x920>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ec:	d212      	bcs.n	8006314 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f023 030f 	bic.w	r3, r3, #15
 80062f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	b29a      	uxth	r2, r3
 8006304:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006306:	4313      	orrs	r3, r2
 8006308:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	e0b9      	b.n	8006488 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800631a:	e0b5      	b.n	8006488 <UART_SetConfig+0xa94>
 800631c:	03d09000 	.word	0x03d09000
 8006320:	003d0900 	.word	0x003d0900
 8006324:	080079cc 	.word	0x080079cc
 8006328:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800632c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006330:	2b20      	cmp	r3, #32
 8006332:	dc49      	bgt.n	80063c8 <UART_SetConfig+0x9d4>
 8006334:	2b00      	cmp	r3, #0
 8006336:	db7c      	blt.n	8006432 <UART_SetConfig+0xa3e>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d87a      	bhi.n	8006432 <UART_SetConfig+0xa3e>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x950>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	080063cf 	.word	0x080063cf
 8006348:	080063d7 	.word	0x080063d7
 800634c:	08006433 	.word	0x08006433
 8006350:	08006433 	.word	0x08006433
 8006354:	080063df 	.word	0x080063df
 8006358:	08006433 	.word	0x08006433
 800635c:	08006433 	.word	0x08006433
 8006360:	08006433 	.word	0x08006433
 8006364:	080063ef 	.word	0x080063ef
 8006368:	08006433 	.word	0x08006433
 800636c:	08006433 	.word	0x08006433
 8006370:	08006433 	.word	0x08006433
 8006374:	08006433 	.word	0x08006433
 8006378:	08006433 	.word	0x08006433
 800637c:	08006433 	.word	0x08006433
 8006380:	08006433 	.word	0x08006433
 8006384:	080063ff 	.word	0x080063ff
 8006388:	08006433 	.word	0x08006433
 800638c:	08006433 	.word	0x08006433
 8006390:	08006433 	.word	0x08006433
 8006394:	08006433 	.word	0x08006433
 8006398:	08006433 	.word	0x08006433
 800639c:	08006433 	.word	0x08006433
 80063a0:	08006433 	.word	0x08006433
 80063a4:	08006433 	.word	0x08006433
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006433 	.word	0x08006433
 80063b0:	08006433 	.word	0x08006433
 80063b4:	08006433 	.word	0x08006433
 80063b8:	08006433 	.word	0x08006433
 80063bc:	08006433 	.word	0x08006433
 80063c0:	08006433 	.word	0x08006433
 80063c4:	08006425 	.word	0x08006425
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d02e      	beq.n	800642a <UART_SetConfig+0xa36>
 80063cc:	e031      	b.n	8006432 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ce:	f7fc ffb5 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80063d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063d4:	e033      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d6:	f7fc ffc7 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 80063da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063dc:	e02f      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe f9f6 	bl	80047d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ec:	e027      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ee:	f107 0318 	add.w	r3, r7, #24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fb42 	bl	8004a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	e01f      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <UART_SetConfig+0xac0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800640a:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <UART_SetConfig+0xac0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	08db      	lsrs	r3, r3, #3
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <UART_SetConfig+0xac4>)
 8006416:	fa22 f303 	lsr.w	r3, r2, r3
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800641c:	e00f      	b.n	800643e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800641e:	4b26      	ldr	r3, [pc, #152]	; (80064b8 <UART_SetConfig+0xac4>)
 8006420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006422:	e00c      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006424:	4b25      	ldr	r3, [pc, #148]	; (80064bc <UART_SetConfig+0xac8>)
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	e009      	b.n	800643e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006430:	e005      	b.n	800643e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800643c:	bf00      	nop
    }

    if (pclk != 0U)
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d021      	beq.n	8006488 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <UART_SetConfig+0xacc>)
 800644a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644e:	461a      	mov	r2, r3
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	fbb3 f2f2 	udiv	r2, r3, r2
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	441a      	add	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d909      	bls.n	8006482 <UART_SetConfig+0xa8e>
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d205      	bcs.n	8006482 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	b29a      	uxth	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	e002      	b.n	8006488 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2201      	movs	r2, #1
 800648c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2201      	movs	r2, #1
 8006494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2200      	movs	r2, #0
 800649c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2200      	movs	r2, #0
 80064a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3748      	adds	r7, #72	; 0x48
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	58024400 	.word	0x58024400
 80064b8:	03d09000 	.word	0x03d09000
 80064bc:	003d0900 	.word	0x003d0900
 80064c0:	080079cc 	.word	0x080079cc

080064c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01a      	beq.n	80065da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c2:	d10a      	bne.n	80065da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b098      	sub	sp, #96	; 0x60
 800660c:	af02      	add	r7, sp, #8
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006618:	f7fa fdf6 	bl	8001208 <HAL_GetTick>
 800661c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d12f      	bne.n	800668c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800662c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006634:	2200      	movs	r2, #0
 8006636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f88e 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d022      	beq.n	800668c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800665a:	653b      	str	r3, [r7, #80]	; 0x50
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006664:	647b      	str	r3, [r7, #68]	; 0x44
 8006666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800666a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e6      	bne.n	8006646 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e063      	b.n	8006754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d149      	bne.n	800672e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a2:	2200      	movs	r2, #0
 80066a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f857 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03c      	beq.n	800672e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	623b      	str	r3, [r7, #32]
   return(result);
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
 80066d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e6      	bne.n	80066b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3308      	adds	r3, #8
 80066ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006706:	61fa      	str	r2, [r7, #28]
 8006708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	617b      	str	r3, [r7, #20]
   return(result);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e5      	bne.n	80066e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e012      	b.n	8006754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3758      	adds	r7, #88	; 0x58
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	e049      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006774:	d045      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fa fd47 	bl	8001208 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <UART_WaitOnFlagUntilTimeout+0x30>
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e048      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d031      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d110      	bne.n	80067ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2208      	movs	r2, #8
 80067b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f95b 	bl	8006a70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2208      	movs	r2, #8
 80067be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e029      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067dc:	d111      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f941 	bl	8006a70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e00f      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	bf0c      	ite	eq
 8006812:	2301      	moveq	r3, #1
 8006814:	2300      	movne	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	429a      	cmp	r2, r3
 800681e:	d0a6      	beq.n	800676e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682c:	b480      	push	{r7}
 800682e:	b0a3      	sub	sp, #140	; 0x8c
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d10e      	bne.n	800687e <UART_Start_Receive_IT+0x52>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <UART_Start_Receive_IT+0x48>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800686e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006872:	e02d      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800687c:	e028      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <UART_Start_Receive_IT+0x76>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <UART_Start_Receive_IT+0x6c>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006896:	e01b      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	227f      	movs	r2, #127	; 0x7f
 800689c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068a0:	e016      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068aa:	d10d      	bne.n	80068c8 <UART_Start_Receive_IT+0x9c>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <UART_Start_Receive_IT+0x92>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	227f      	movs	r2, #127	; 0x7f
 80068b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068bc:	e008      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	223f      	movs	r2, #63	; 0x3f
 80068c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068c6:	e003      	b.n	80068d0 <UART_Start_Receive_IT+0xa4>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2222      	movs	r2, #34	; 0x22
 80068dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80068f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006904:	673a      	str	r2, [r7, #112]	; 0x70
 8006906:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800690a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e3      	bne.n	80068e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d14f      	bne.n	80069c2 <UART_Start_Receive_IT+0x196>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	429a      	cmp	r2, r3
 800692c:	d349      	bcc.n	80069c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d107      	bne.n	8006948 <UART_Start_Receive_IT+0x11c>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a47      	ldr	r2, [pc, #284]	; (8006a60 <UART_Start_Receive_IT+0x234>)
 8006944:	675a      	str	r2, [r3, #116]	; 0x74
 8006946:	e002      	b.n	800694e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a46      	ldr	r2, [pc, #280]	; (8006a64 <UART_Start_Receive_IT+0x238>)
 800694c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800697a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800697e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80069ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_Start_Receive_IT+0x160>
 80069c0:	e046      	b.n	8006a50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ca:	d107      	bne.n	80069dc <UART_Start_Receive_IT+0x1b0>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <UART_Start_Receive_IT+0x23c>)
 80069d8:	675a      	str	r2, [r3, #116]	; 0x74
 80069da:	e002      	b.n	80069e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <UART_Start_Receive_IT+0x240>)
 80069e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d019      	beq.n	8006a1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_Start_Receive_IT+0x1be>
 8006a1c:	e018      	b.n	8006a50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f043 0320 	orr.w	r3, r3, #32
 8006a32:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e6      	bne.n	8006a1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	378c      	adds	r7, #140	; 0x8c
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	08007291 	.word	0x08007291
 8006a64:	08006f31 	.word	0x08006f31
 8006a68:	08006d79 	.word	0x08006d79
 8006a6c:	08006bc1 	.word	0x08006bc1

08006a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b095      	sub	sp, #84	; 0x54
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a96:	643b      	str	r3, [r7, #64]	; 0x40
 8006a98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <UART_EndRxTransfer+0xc8>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d118      	bne.n	8006b18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b2c:	bf00      	nop
 8006b2e:	3754      	adds	r7, #84	; 0x54
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	effffffe 	.word	0xeffffffe

08006b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fe ff34 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6979      	ldr	r1, [r7, #20]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe feff 	bl	80059b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb6:	bf00      	nop
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b09c      	sub	sp, #112	; 0x70
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd8:	2b22      	cmp	r3, #34	; 0x22
 8006bda:	f040 80be 	bne.w	8006d5a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bec:	b2d9      	uxtb	r1, r3
 8006bee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 80a1 	bne.w	8006d6a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	667b      	str	r3, [r7, #100]	; 0x64
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a33      	ldr	r2, [pc, #204]	; (8006d74 <UART_RxISR_8BIT+0x1b4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01f      	beq.n	8006cec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cce:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d12e      	bne.n	8006d52 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	69b9      	ldr	r1, [r7, #24]
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	617b      	str	r3, [r7, #20]
   return(result);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d103      	bne.n	8006d42 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fe fe46 	bl	80059dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d50:	e00b      	b.n	8006d6a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7f9 fe92 	bl	8000a7c <HAL_UART_RxCpltCallback>
}
 8006d58:	e007      	b.n	8006d6a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0208 	orr.w	r2, r2, #8
 8006d68:	619a      	str	r2, [r3, #24]
}
 8006d6a:	bf00      	nop
 8006d6c:	3770      	adds	r7, #112	; 0x70
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	58000c00 	.word	0x58000c00

08006d78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b09c      	sub	sp, #112	; 0x70
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d90:	2b22      	cmp	r3, #34	; 0x22
 8006d92:	f040 80be 	bne.w	8006f12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006da6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006daa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006dae:	4013      	ands	r3, r2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006db4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	1c9a      	adds	r2, r3, #2
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 80a1 	bne.w	8006f22 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006df4:	667b      	str	r3, [r7, #100]	; 0x64
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8006e00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	663b      	str	r3, [r7, #96]	; 0x60
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e32:	643a      	str	r2, [r7, #64]	; 0x40
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a33      	ldr	r2, [pc, #204]	; (8006f2c <UART_RxISR_16BIT+0x1b4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d01f      	beq.n	8006ea4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d12e      	bne.n	8006f0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 0310 	bic.w	r3, r3, #16
 8006ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6979      	ldr	r1, [r7, #20]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d103      	bne.n	8006efa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fe fd6a 	bl	80059dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f08:	e00b      	b.n	8006f22 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7f9 fdb6 	bl	8000a7c <HAL_UART_RxCpltCallback>
}
 8006f10:	e007      	b.n	8006f22 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0208 	orr.w	r2, r2, #8
 8006f20:	619a      	str	r2, [r3, #24]
}
 8006f22:	bf00      	nop
 8006f24:	3770      	adds	r7, #112	; 0x70
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	58000c00 	.word	0x58000c00

08006f30 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b0ac      	sub	sp, #176	; 0xb0
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f66:	2b22      	cmp	r3, #34	; 0x22
 8006f68:	f040 8180 	bne.w	800726c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f72:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f76:	e123      	b.n	80071c0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f82:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006f86:	b2d9      	uxtb	r1, r3
 8006f88:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f92:	400a      	ands	r2, r1
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d053      	beq.n	8007072 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d011      	beq.n	8006ffa <UART_RxISR_8BIT_FIFOEN+0xca>
 8006fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	f043 0201 	orr.w	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2202      	movs	r2, #2
 8007018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f043 0204 	orr.w	r2, r3, #4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2204      	movs	r2, #4
 8007048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	f043 0202 	orr.w	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7fe fcaf 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 80a0 	bne.w	80071c0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070a4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80070a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80070b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e4      	bne.n	8007080 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80070c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070c8:	4b6e      	ldr	r3, [pc, #440]	; (8007284 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070da:	66ba      	str	r2, [r7, #104]	; 0x68
 80070dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80070e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80070e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e3      	bne.n	80070b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a60      	ldr	r2, [pc, #384]	; (8007288 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d021      	beq.n	8007150 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01a      	beq.n	8007150 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800712e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800713c:	657b      	str	r3, [r7, #84]	; 0x54
 800713e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e4      	bne.n	800711a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d130      	bne.n	80071ba <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	f023 0310 	bic.w	r3, r3, #16
 8007172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007180:	643b      	str	r3, [r7, #64]	; 0x40
 8007182:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e4      	bne.n	800715e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b10      	cmp	r3, #16
 80071a0:	d103      	bne.n	80071aa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2210      	movs	r2, #16
 80071a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fe fc12 	bl	80059dc <HAL_UARTEx_RxEventCallback>
 80071b8:	e002      	b.n	80071c0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7f9 fc5e 	bl	8000a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80071c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f aed1 	bne.w	8006f78 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d049      	beq.n	800727c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d242      	bcs.n	800727c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	61fb      	str	r3, [r7, #28]
   return(result);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800721a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e3      	bne.n	80071f6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007232:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	60bb      	str	r3, [r7, #8]
   return(result);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f043 0320 	orr.w	r3, r3, #32
 8007248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6979      	ldr	r1, [r7, #20]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	613b      	str	r3, [r7, #16]
   return(result);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e4      	bne.n	8007234 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800726a:	e007      	b.n	800727c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	619a      	str	r2, [r3, #24]
}
 800727c:	bf00      	nop
 800727e:	37b0      	adds	r7, #176	; 0xb0
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	effffffe 	.word	0xeffffffe
 8007288:	58000c00 	.word	0x58000c00
 800728c:	08006bc1 	.word	0x08006bc1

08007290 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b0ae      	sub	sp, #184	; 0xb8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800729e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c6:	2b22      	cmp	r3, #34	; 0x22
 80072c8:	f040 8184 	bne.w	80075d4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072d6:	e127      	b.n	8007528 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80072ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80072ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80072f2:	4013      	ands	r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007300:	1c9a      	adds	r2, r3, #2
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d053      	beq.n	80073d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800732e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d011      	beq.n	800735e <UART_RxISR_16BIT_FIFOEN+0xce>
 800733a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2201      	movs	r2, #1
 800734c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800735e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800736a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00b      	beq.n	800738e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2202      	movs	r2, #2
 800737c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007384:	f043 0204 	orr.w	r2, r3, #4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800738e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d011      	beq.n	80073be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800739a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2204      	movs	r2, #4
 80073ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b4:	f043 0202 	orr.w	r2, r3, #2
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d006      	beq.n	80073d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fe fafd 	bl	80059c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 80a2 	bne.w	8007528 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800740a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800740e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e2      	bne.n	80073e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800742e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007430:	4b6e      	ldr	r3, [pc, #440]	; (80075ec <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007432:	4013      	ands	r3, r2
 8007434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e3      	bne.n	800741e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a60      	ldr	r2, [pc, #384]	; (80075f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d021      	beq.n	80074b8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01a      	beq.n	80074b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e4      	bne.n	8007482 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d130      	bne.n	8007522 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074e8:	647b      	str	r3, [r7, #68]	; 0x44
 80074ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e4      	bne.n	80074c6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b10      	cmp	r3, #16
 8007508:	d103      	bne.n	8007512 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2210      	movs	r2, #16
 8007510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe fa5e 	bl	80059dc <HAL_UARTEx_RxEventCallback>
 8007520:	e002      	b.n	8007528 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7f9 faaa 	bl	8000a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007528:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	f47f aecd 	bne.w	80072d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007544:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007548:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800754c:	2b00      	cmp	r3, #0
 800754e:	d049      	beq.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007556:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800755a:	429a      	cmp	r2, r3
 800755c:	d242      	bcs.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	623b      	str	r3, [r7, #32]
   return(result);
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007582:	633a      	str	r2, [r7, #48]	; 0x30
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e3      	bne.n	800755e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800759a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f043 0320 	orr.w	r3, r3, #32
 80075b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69b9      	ldr	r1, [r7, #24]
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	617b      	str	r3, [r7, #20]
   return(result);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e4      	bne.n	800759c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075d2:	e007      	b.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	619a      	str	r2, [r3, #24]
}
 80075e4:	bf00      	nop
 80075e6:	37b8      	adds	r7, #184	; 0xb8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	effffffe 	.word	0xeffffffe
 80075f0:	58000c00 	.word	0x58000c00
 80075f4:	08006d79 	.word	0x08006d79

080075f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_UARTEx_DisableFifoMode+0x16>
 8007646:	2302      	movs	r3, #2
 8007648:	e027      	b.n	800769a <HAL_UARTEx_DisableFifoMode+0x66>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2224      	movs	r2, #36	; 0x24
 8007656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e02d      	b.n	800771a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2224      	movs	r2, #36	; 0x24
 80076ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0201 	bic.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f850 	bl	80077a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007736:	2302      	movs	r3, #2
 8007738:	e02d      	b.n	8007796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2224      	movs	r2, #36	; 0x24
 8007746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f812 	bl	80077a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d108      	bne.n	80077c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077c0:	e031      	b.n	8007826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077c2:	2310      	movs	r3, #16
 80077c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077c6:	2310      	movs	r3, #16
 80077c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	0e5b      	lsrs	r3, r3, #25
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	0f5b      	lsrs	r3, r3, #29
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	7b3a      	ldrb	r2, [r7, #12]
 80077ee:	4911      	ldr	r1, [pc, #68]	; (8007834 <UARTEx_SetNbDataToProcess+0x94>)
 80077f0:	5c8a      	ldrb	r2, [r1, r2]
 80077f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077f6:	7b3a      	ldrb	r2, [r7, #12]
 80077f8:	490f      	ldr	r1, [pc, #60]	; (8007838 <UARTEx_SetNbDataToProcess+0x98>)
 80077fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	7b7a      	ldrb	r2, [r7, #13]
 800780c:	4909      	ldr	r1, [pc, #36]	; (8007834 <UARTEx_SetNbDataToProcess+0x94>)
 800780e:	5c8a      	ldrb	r2, [r1, r2]
 8007810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007814:	7b7a      	ldrb	r2, [r7, #13]
 8007816:	4908      	ldr	r1, [pc, #32]	; (8007838 <UARTEx_SetNbDataToProcess+0x98>)
 8007818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800781a:	fb93 f3f2 	sdiv	r3, r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	080079e4 	.word	0x080079e4
 8007838:	080079ec 	.word	0x080079ec

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4d0d      	ldr	r5, [pc, #52]	; (8007874 <__libc_init_array+0x38>)
 8007840:	4c0d      	ldr	r4, [pc, #52]	; (8007878 <__libc_init_array+0x3c>)
 8007842:	1b64      	subs	r4, r4, r5
 8007844:	10a4      	asrs	r4, r4, #2
 8007846:	2600      	movs	r6, #0
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	4d0b      	ldr	r5, [pc, #44]	; (800787c <__libc_init_array+0x40>)
 800784e:	4c0c      	ldr	r4, [pc, #48]	; (8007880 <__libc_init_array+0x44>)
 8007850:	f000 f846 	bl	80078e0 <_init>
 8007854:	1b64      	subs	r4, r4, r5
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	2600      	movs	r6, #0
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	080079fc 	.word	0x080079fc
 8007878:	080079fc 	.word	0x080079fc
 800787c:	080079fc 	.word	0x080079fc
 8007880:	08007a00 	.word	0x08007a00

08007884 <memset>:
 8007884:	4402      	add	r2, r0
 8007886:	4603      	mov	r3, r0
 8007888:	4293      	cmp	r3, r2
 800788a:	d100      	bne.n	800788e <memset+0xa>
 800788c:	4770      	bx	lr
 800788e:	f803 1b01 	strb.w	r1, [r3], #1
 8007892:	e7f9      	b.n	8007888 <memset+0x4>

08007894 <strcat>:
 8007894:	b510      	push	{r4, lr}
 8007896:	4602      	mov	r2, r0
 8007898:	7814      	ldrb	r4, [r2, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	3201      	adds	r2, #1
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d1fa      	bne.n	8007898 <strcat+0x4>
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	d1f9      	bne.n	80078a4 <strcat+0x10>
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <strstr>:
 80078b2:	780a      	ldrb	r2, [r1, #0]
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	b96a      	cbnz	r2, 80078d4 <strstr+0x22>
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d109      	bne.n	80078d2 <strstr+0x20>
 80078be:	460c      	mov	r4, r1
 80078c0:	4605      	mov	r5, r0
 80078c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f6      	beq.n	80078b8 <strstr+0x6>
 80078ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80078ce:	429e      	cmp	r6, r3
 80078d0:	d0f7      	beq.n	80078c2 <strstr+0x10>
 80078d2:	3001      	adds	r0, #1
 80078d4:	7803      	ldrb	r3, [r0, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1ef      	bne.n	80078ba <strstr+0x8>
 80078da:	4618      	mov	r0, r3
 80078dc:	e7ec      	b.n	80078b8 <strstr+0x6>
	...

080078e0 <_init>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr

080078ec <_fini>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr
