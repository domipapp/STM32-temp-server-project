
uart_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006580  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  24000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000040  080068a0  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000f4  080068a0  000200f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010ea5  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e92  00000000  00000000  00030f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000aa8  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a00  00000000  00000000  00033850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035cb3  00000000  00000000  00034250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010369  00000000  00000000  00069f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001574fe  00000000  00000000  0007a26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d176a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ba4  00000000  00000000  001d17bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006800 	.word	0x08006800

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08006800 	.word	0x08006800

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fa92 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f806 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8ce 	bl	8000798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f86c 	bl	80006d8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x14>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09c      	sub	sp, #112	; 0x70
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	224c      	movs	r2, #76	; 0x4c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f8ec 	bl	80067f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2220      	movs	r2, #32
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f8e6 	bl	80067f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000624:	2002      	movs	r0, #2
 8000626:	f001 fb39 	bl	8001c9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	62d3      	str	r3, [r2, #44]	; 0x2c
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000660:	bf00      	nop
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xd0>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800066e:	d1f8      	bne.n	8000662 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000674:	2301      	movs	r3, #1
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb43 	bl	8001d10 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000690:	f000 f8ca 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	233f      	movs	r3, #63	; 0x3f
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ff83 	bl	80025c4 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f8b0 	bl	8000828 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58000400 	.word	0x58000400
 80006d4:	58024800 	.word	0x58024800

080006d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_USART3_UART_Init+0xb8>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_USART3_UART_Init+0xb4>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_USART3_UART_Init+0xb4>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_USART3_UART_Init+0xb4>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000720:	481a      	ldr	r0, [pc, #104]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000722:	f004 f907 	bl	8004934 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f87c 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4816      	ldr	r0, [pc, #88]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000734:	f005 ff6e 	bl	8006614 <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800073e:	f000 f873 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000746:	f005 ffa3 	bl	8006690 <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f86a 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000756:	f005 ff24 	bl	80065a2 <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f862 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Transmit_IT(&huart3, buffer1, strlen((char*)buffer1));
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_USART3_UART_Init+0xbc>)
 8000766:	f7ff fdb7 	bl	80002d8 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29b      	uxth	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4908      	ldr	r1, [pc, #32]	; (8000794 <MX_USART3_UART_Init+0xbc>)
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000774:	f004 f92e 	bl	80049d4 <HAL_UART_Transmit_IT>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <MX_USART3_UART_Init+0xb4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <MX_USART3_UART_Init+0xb4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000786:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2400005c 	.word	0x2400005c
 8000790:	40004800 	.word	0x40004800
 8000794:	24000000 	.word	0x24000000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_GPIO_Init+0x30>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <MX_GPIO_Init+0x30>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_GPIO_Init+0x30>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	58024400 	.word	0x58024400

080007cc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){//called on transmit end
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if(huart->pTxBuffPtr == &buffer1[strlen((char*)buffer1)])
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <HAL_UART_TxCpltCallback+0x50>)
 80007da:	f7ff fd7d 	bl	80002d8 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_UART_TxCpltCallback+0x50>)
 80007e2:	4413      	add	r3, r2
 80007e4:	429c      	cmp	r4, r3
 80007e6:	d10a      	bne.n	80007fe <HAL_UART_TxCpltCallback+0x32>
		HAL_UART_Transmit_IT(&huart3, buffer2, strlen((char*)buffer2));
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <HAL_UART_TxCpltCallback+0x54>)
 80007ea:	f7ff fd75 	bl	80002d8 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	490a      	ldr	r1, [pc, #40]	; (8000820 <HAL_UART_TxCpltCallback+0x54>)
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_UART_TxCpltCallback+0x58>)
 80007f8:	f004 f8ec 	bl	80049d4 <HAL_UART_Transmit_IT>
	else
		HAL_UART_Transmit_IT(&huart3, buffer1, strlen((char*)buffer1));
	return;
 80007fc:	e00a      	b.n	8000814 <HAL_UART_TxCpltCallback+0x48>
		HAL_UART_Transmit_IT(&huart3, buffer1, strlen((char*)buffer1));
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <HAL_UART_TxCpltCallback+0x50>)
 8000800:	f7ff fd6a 	bl	80002d8 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29b      	uxth	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	4904      	ldr	r1, [pc, #16]	; (800081c <HAL_UART_TxCpltCallback+0x50>)
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_UART_TxCpltCallback+0x58>)
 800080e:	f004 f8e1 	bl	80049d4 <HAL_UART_Transmit_IT>
	return;
 8000812:	bf00      	nop

}
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	bf00      	nop
 800081c:	24000000 	.word	0x24000000
 8000820:	24000018 	.word	0x24000018
 8000824:	2400005c 	.word	0x2400005c

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_MspInit+0x30>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x30>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x30>)
 800084c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	58024400 	.word	0x58024400

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ba      	sub	sp, #232	; 0xe8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	22c0      	movs	r2, #192	; 0xc0
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f005 ffb1 	bl	80067f0 <memset>
  if(huart->Instance==USART3)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <HAL_UART_MspInit+0xd8>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d14e      	bne.n	8000936 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000898:	f04f 0202 	mov.w	r2, #2
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fa14 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80008ba:	f7ff ffb5 	bl	8000828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008c4:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0xdc>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000914:	2307      	movs	r3, #7
 8000916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_UART_MspInit+0xe0>)
 8000922:	f001 f80b 	bl	800193c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2027      	movs	r0, #39	; 0x27
 800092c:	f000 fa6d 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000930:	2027      	movs	r0, #39	; 0x27
 8000932:	f000 fa84 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	37e8      	adds	r7, #232	; 0xe8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004800 	.word	0x40004800
 8000944:	58024400 	.word	0x58024400
 8000948:	58020400 	.word	0x58020400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f930 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <USART3_IRQHandler+0x10>)
 80009a6:	f004 f8a9 	bl	8004afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2400005c 	.word	0x2400005c

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b8:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <SystemInit+0xe4>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a36      	ldr	r2, [pc, #216]	; (8000a98 <SystemInit+0xe4>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <SystemInit+0xe8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 030f 	and.w	r3, r3, #15
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d807      	bhi.n	80009e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <SystemInit+0xe8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f023 030f 	bic.w	r3, r3, #15
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <SystemInit+0xe8>)
 80009de:	f043 0307 	orr.w	r3, r3, #7
 80009e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <SystemInit+0xec>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <SystemInit+0xec>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <SystemInit+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <SystemInit+0xec>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4929      	ldr	r1, [pc, #164]	; (8000aa0 <SystemInit+0xec>)
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SystemInit+0xf0>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <SystemInit+0xe8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d007      	beq.n	8000a1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <SystemInit+0xe8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f023 030f 	bic.w	r3, r3, #15
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemInit+0xe8>)
 8000a18:	f043 0307 	orr.w	r3, r3, #7
 8000a1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <SystemInit+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <SystemInit+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <SystemInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <SystemInit+0xec>)
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <SystemInit+0xf4>)
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <SystemInit+0xec>)
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <SystemInit+0xf8>)
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <SystemInit+0xec>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <SystemInit+0xfc>)
 8000a40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <SystemInit+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <SystemInit+0xec>)
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <SystemInit+0xfc>)
 8000a4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <SystemInit+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <SystemInit+0xec>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <SystemInit+0xfc>)
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <SystemInit+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <SystemInit+0xec>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <SystemInit+0xec>)
 8000a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <SystemInit+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <SystemInit+0x100>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SystemInit+0x104>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a7e:	d202      	bcs.n	8000a86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemInit+0x108>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <SystemInit+0x10c>)
 8000a88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00
 8000a9c:	52002000 	.word	0x52002000
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aa8:	02020200 	.word	0x02020200
 8000aac:	01ff0000 	.word	0x01ff0000
 8000ab0:	01010280 	.word	0x01010280
 8000ab4:	5c001000 	.word	0x5c001000
 8000ab8:	ffff0000 	.word	0xffff0000
 8000abc:	51008108 	.word	0x51008108
 8000ac0:	52004000 	.word	0x52004000

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f7ff ff74 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f005 fe59 	bl	80067a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd79 	bl	80005ec <main>
  bx  lr
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b04:	24000040 	.word	0x24000040
  ldr r2, =_sidata
 8000b08:	08006860 	.word	0x08006860
  ldr r2, =_sbss
 8000b0c:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8000b10:	240000f4 	.word	0x240000f4

08000b14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC3_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f968 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b24:	f001 ff04 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_Init+0x68>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	4913      	ldr	r1, [pc, #76]	; (8000b84 <HAL_Init+0x6c>)
 8000b36:	5ccb      	ldrb	r3, [r1, r3]
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_Init+0x68>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_Init+0x6c>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	f003 031f 	and.w	r3, r3, #31
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_Init+0x70>)
 8000b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_Init+0x74>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f814 	bl	8000b90 <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e002      	b.n	8000b78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff fe5f 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58024400 	.word	0x58024400
 8000b84:	08006818 	.word	0x08006818
 8000b88:	24000034 	.word	0x24000034
 8000b8c:	24000030 	.word	0x24000030

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_InitTick+0x60>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e021      	b.n	8000be8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_InitTick+0x64>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0x60>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f94d 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd8:	f000 f917 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x68>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2400003c 	.word	0x2400003c
 8000bf4:	24000030 	.word	0x24000030
 8000bf8:	24000038 	.word	0x24000038

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2400003c 	.word	0x2400003c
 8000c20:	240000f0 	.word	0x240000f0

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	240000f0 	.word	0x240000f0

08000c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetREVID+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0c1b      	lsrs	r3, r3, #16
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	5c001000 	.word	0x5c001000

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	05fa0000 	.word	0x05fa0000

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff40 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa4 	bl	8000db0 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fed2 	bl	8000c24 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e2dc      	b.n	8001446 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d008      	beq.n	8000eaa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e2cd      	b.n	8001446 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a76      	ldr	r2, [pc, #472]	; (8001088 <HAL_DMA_Abort+0x214>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d04a      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a74      	ldr	r2, [pc, #464]	; (800108c <HAL_DMA_Abort+0x218>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d045      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a73      	ldr	r2, [pc, #460]	; (8001090 <HAL_DMA_Abort+0x21c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d040      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a71      	ldr	r2, [pc, #452]	; (8001094 <HAL_DMA_Abort+0x220>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d03b      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a70      	ldr	r2, [pc, #448]	; (8001098 <HAL_DMA_Abort+0x224>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d036      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <HAL_DMA_Abort+0x228>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d031      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6d      	ldr	r2, [pc, #436]	; (80010a0 <HAL_DMA_Abort+0x22c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d02c      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6b      	ldr	r2, [pc, #428]	; (80010a4 <HAL_DMA_Abort+0x230>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d027      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <HAL_DMA_Abort+0x234>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d022      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a68      	ldr	r2, [pc, #416]	; (80010ac <HAL_DMA_Abort+0x238>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01d      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a67      	ldr	r2, [pc, #412]	; (80010b0 <HAL_DMA_Abort+0x23c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d018      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a65      	ldr	r2, [pc, #404]	; (80010b4 <HAL_DMA_Abort+0x240>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a64      	ldr	r2, [pc, #400]	; (80010b8 <HAL_DMA_Abort+0x244>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00e      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a62      	ldr	r2, [pc, #392]	; (80010bc <HAL_DMA_Abort+0x248>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d009      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a61      	ldr	r2, [pc, #388]	; (80010c0 <HAL_DMA_Abort+0x24c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d004      	beq.n	8000f4a <HAL_DMA_Abort+0xd6>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <HAL_DMA_Abort+0x250>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_DMA_Abort+0xda>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_DMA_Abort+0xdc>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 021e 	bic.w	r2, r2, #30
 8000f62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e00a      	b.n	8000f92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020e 	bic.w	r2, r2, #14
 8000f8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a3c      	ldr	r2, [pc, #240]	; (8001088 <HAL_DMA_Abort+0x214>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d072      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a3a      	ldr	r2, [pc, #232]	; (800108c <HAL_DMA_Abort+0x218>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d06d      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_DMA_Abort+0x21c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d068      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a37      	ldr	r2, [pc, #220]	; (8001094 <HAL_DMA_Abort+0x220>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d063      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a36      	ldr	r2, [pc, #216]	; (8001098 <HAL_DMA_Abort+0x224>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d05e      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a34      	ldr	r2, [pc, #208]	; (800109c <HAL_DMA_Abort+0x228>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d059      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <HAL_DMA_Abort+0x22c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d054      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <HAL_DMA_Abort+0x230>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d04f      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <HAL_DMA_Abort+0x234>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04a      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a2e      	ldr	r2, [pc, #184]	; (80010ac <HAL_DMA_Abort+0x238>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d045      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_DMA_Abort+0x23c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d040      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_DMA_Abort+0x240>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d03b      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <HAL_DMA_Abort+0x244>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d036      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_DMA_Abort+0x248>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d031      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_DMA_Abort+0x24c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d02c      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_DMA_Abort+0x250>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d027      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <HAL_DMA_Abort+0x254>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d022      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_DMA_Abort+0x258>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01d      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_DMA_Abort+0x25c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d018      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_DMA_Abort+0x260>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_DMA_Abort+0x264>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d00e      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_DMA_Abort+0x268>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d009      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <HAL_DMA_Abort+0x26c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d004      	beq.n	8001082 <HAL_DMA_Abort+0x20e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_DMA_Abort+0x270>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d132      	bne.n	80010e8 <HAL_DMA_Abort+0x274>
 8001082:	2301      	movs	r3, #1
 8001084:	e031      	b.n	80010ea <HAL_DMA_Abort+0x276>
 8001086:	bf00      	nop
 8001088:	40020010 	.word	0x40020010
 800108c:	40020028 	.word	0x40020028
 8001090:	40020040 	.word	0x40020040
 8001094:	40020058 	.word	0x40020058
 8001098:	40020070 	.word	0x40020070
 800109c:	40020088 	.word	0x40020088
 80010a0:	400200a0 	.word	0x400200a0
 80010a4:	400200b8 	.word	0x400200b8
 80010a8:	40020410 	.word	0x40020410
 80010ac:	40020428 	.word	0x40020428
 80010b0:	40020440 	.word	0x40020440
 80010b4:	40020458 	.word	0x40020458
 80010b8:	40020470 	.word	0x40020470
 80010bc:	40020488 	.word	0x40020488
 80010c0:	400204a0 	.word	0x400204a0
 80010c4:	400204b8 	.word	0x400204b8
 80010c8:	58025408 	.word	0x58025408
 80010cc:	5802541c 	.word	0x5802541c
 80010d0:	58025430 	.word	0x58025430
 80010d4:	58025444 	.word	0x58025444
 80010d8:	58025458 	.word	0x58025458
 80010dc:	5802546c 	.word	0x5802546c
 80010e0:	58025480 	.word	0x58025480
 80010e4:	58025494 	.word	0x58025494
 80010e8:	2300      	movs	r3, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6d      	ldr	r2, [pc, #436]	; (80012b8 <HAL_DMA_Abort+0x444>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04a      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6b      	ldr	r2, [pc, #428]	; (80012bc <HAL_DMA_Abort+0x448>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d045      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6a      	ldr	r2, [pc, #424]	; (80012c0 <HAL_DMA_Abort+0x44c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d040      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a68      	ldr	r2, [pc, #416]	; (80012c4 <HAL_DMA_Abort+0x450>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d03b      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a67      	ldr	r2, [pc, #412]	; (80012c8 <HAL_DMA_Abort+0x454>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d036      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a65      	ldr	r2, [pc, #404]	; (80012cc <HAL_DMA_Abort+0x458>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d031      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <HAL_DMA_Abort+0x45c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d02c      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <HAL_DMA_Abort+0x460>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d027      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <HAL_DMA_Abort+0x464>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d022      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <HAL_DMA_Abort+0x468>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01d      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_DMA_Abort+0x46c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d018      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a5c      	ldr	r2, [pc, #368]	; (80012e4 <HAL_DMA_Abort+0x470>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a5b      	ldr	r2, [pc, #364]	; (80012e8 <HAL_DMA_Abort+0x474>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00e      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a59      	ldr	r2, [pc, #356]	; (80012ec <HAL_DMA_Abort+0x478>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d009      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <HAL_DMA_Abort+0x47c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_DMA_Abort+0x32a>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_DMA_Abort+0x480>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d108      	bne.n	80011b0 <HAL_DMA_Abort+0x33c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_DMA_Abort+0x34c>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80011c0:	e013      	b.n	80011ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fd2f 	bl	8000c24 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d90c      	bls.n	80011ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e12d      	b.n	8001446 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e5      	bne.n	80011c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_DMA_Abort+0x444>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d04a      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <HAL_DMA_Abort+0x448>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d045      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <HAL_DMA_Abort+0x44c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d040      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2a      	ldr	r2, [pc, #168]	; (80012c4 <HAL_DMA_Abort+0x450>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d03b      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <HAL_DMA_Abort+0x454>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d036      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_DMA_Abort+0x458>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_DMA_Abort+0x45c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d02c      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_DMA_Abort+0x460>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d027      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <HAL_DMA_Abort+0x464>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d022      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_DMA_Abort+0x468>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01d      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <HAL_DMA_Abort+0x46c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d018      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_DMA_Abort+0x470>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_DMA_Abort+0x474>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00e      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_DMA_Abort+0x478>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d009      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_DMA_Abort+0x47c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_DMA_Abort+0x422>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_DMA_Abort+0x480>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_DMA_Abort+0x426>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_DMA_Abort+0x428>
 800129a:	2300      	movs	r3, #0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d02b      	beq.n	80012f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	223f      	movs	r2, #63	; 0x3f
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	e02a      	b.n	800130e <HAL_DMA_Abort+0x49a>
 80012b8:	40020010 	.word	0x40020010
 80012bc:	40020028 	.word	0x40020028
 80012c0:	40020040 	.word	0x40020040
 80012c4:	40020058 	.word	0x40020058
 80012c8:	40020070 	.word	0x40020070
 80012cc:	40020088 	.word	0x40020088
 80012d0:	400200a0 	.word	0x400200a0
 80012d4:	400200b8 	.word	0x400200b8
 80012d8:	40020410 	.word	0x40020410
 80012dc:	40020428 	.word	0x40020428
 80012e0:	40020440 	.word	0x40020440
 80012e4:	40020458 	.word	0x40020458
 80012e8:	40020470 	.word	0x40020470
 80012ec:	40020488 	.word	0x40020488
 80012f0:	400204a0 	.word	0x400204a0
 80012f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_DMA_Abort+0x5dc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d072      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_DMA_Abort+0x5e0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d06d      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_DMA_Abort+0x5e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d068      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_DMA_Abort+0x5e8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d063      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_DMA_Abort+0x5ec>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d05e      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_DMA_Abort+0x5f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d059      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_DMA_Abort+0x5f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d054      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a44      	ldr	r2, [pc, #272]	; (800146c <HAL_DMA_Abort+0x5f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d04f      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a43      	ldr	r2, [pc, #268]	; (8001470 <HAL_DMA_Abort+0x5fc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d04a      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a41      	ldr	r2, [pc, #260]	; (8001474 <HAL_DMA_Abort+0x600>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d045      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a40      	ldr	r2, [pc, #256]	; (8001478 <HAL_DMA_Abort+0x604>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d040      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <HAL_DMA_Abort+0x608>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d03b      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <HAL_DMA_Abort+0x60c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d036      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3b      	ldr	r2, [pc, #236]	; (8001484 <HAL_DMA_Abort+0x610>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a3a      	ldr	r2, [pc, #232]	; (8001488 <HAL_DMA_Abort+0x614>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d02c      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a38      	ldr	r2, [pc, #224]	; (800148c <HAL_DMA_Abort+0x618>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d027      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_DMA_Abort+0x61c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d022      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a35      	ldr	r2, [pc, #212]	; (8001494 <HAL_DMA_Abort+0x620>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01d      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a34      	ldr	r2, [pc, #208]	; (8001498 <HAL_DMA_Abort+0x624>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d018      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <HAL_DMA_Abort+0x628>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <HAL_DMA_Abort+0x62c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00e      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <HAL_DMA_Abort+0x630>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d009      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <HAL_DMA_Abort+0x634>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d004      	beq.n	80013fe <HAL_DMA_Abort+0x58a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <HAL_DMA_Abort+0x638>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Abort+0x58e>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_DMA_Abort+0x590>
 8001402:	2300      	movs	r3, #0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d015      	beq.n	8001434 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001410:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00c      	beq.n	8001434 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001428:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001432:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020010 	.word	0x40020010
 8001454:	40020028 	.word	0x40020028
 8001458:	40020040 	.word	0x40020040
 800145c:	40020058 	.word	0x40020058
 8001460:	40020070 	.word	0x40020070
 8001464:	40020088 	.word	0x40020088
 8001468:	400200a0 	.word	0x400200a0
 800146c:	400200b8 	.word	0x400200b8
 8001470:	40020410 	.word	0x40020410
 8001474:	40020428 	.word	0x40020428
 8001478:	40020440 	.word	0x40020440
 800147c:	40020458 	.word	0x40020458
 8001480:	40020470 	.word	0x40020470
 8001484:	40020488 	.word	0x40020488
 8001488:	400204a0 	.word	0x400204a0
 800148c:	400204b8 	.word	0x400204b8
 8001490:	58025408 	.word	0x58025408
 8001494:	5802541c 	.word	0x5802541c
 8001498:	58025430 	.word	0x58025430
 800149c:	58025444 	.word	0x58025444
 80014a0:	58025458 	.word	0x58025458
 80014a4:	5802546c 	.word	0x5802546c
 80014a8:	58025480 	.word	0x58025480
 80014ac:	58025494 	.word	0x58025494

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e237      	b.n	8001932 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e22c      	b.n	8001932 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a5c      	ldr	r2, [pc, #368]	; (8001650 <HAL_DMA_Abort_IT+0x1a0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d04a      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a5b      	ldr	r2, [pc, #364]	; (8001654 <HAL_DMA_Abort_IT+0x1a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d045      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a59      	ldr	r2, [pc, #356]	; (8001658 <HAL_DMA_Abort_IT+0x1a8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d040      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_DMA_Abort_IT+0x1ac>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d03b      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a56      	ldr	r2, [pc, #344]	; (8001660 <HAL_DMA_Abort_IT+0x1b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d036      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a55      	ldr	r2, [pc, #340]	; (8001664 <HAL_DMA_Abort_IT+0x1b4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d031      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a53      	ldr	r2, [pc, #332]	; (8001668 <HAL_DMA_Abort_IT+0x1b8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02c      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_DMA_Abort_IT+0x1bc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d027      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a50      	ldr	r2, [pc, #320]	; (8001670 <HAL_DMA_Abort_IT+0x1c0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d022      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_DMA_Abort_IT+0x1c4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d01d      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_DMA_Abort_IT+0x1c8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d018      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_DMA_Abort_IT+0x1cc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_DMA_Abort_IT+0x1d0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00e      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_DMA_Abort_IT+0x1d4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d009      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a47      	ldr	r2, [pc, #284]	; (8001688 <HAL_DMA_Abort_IT+0x1d8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d004      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_DMA_Abort_IT+0xcc>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_DMA_Abort_IT+0xce>
 800157c:	2300      	movs	r3, #0
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8086 	beq.w	8001690 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <HAL_DMA_Abort_IT+0x1a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d04a      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <HAL_DMA_Abort_IT+0x1a4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d045      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <HAL_DMA_Abort_IT+0x1a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d040      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2b      	ldr	r2, [pc, #172]	; (800165c <HAL_DMA_Abort_IT+0x1ac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d03b      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_DMA_Abort_IT+0x1b0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d036      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <HAL_DMA_Abort_IT+0x1b4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d031      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_DMA_Abort_IT+0x1b8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02c      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <HAL_DMA_Abort_IT+0x1bc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d027      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_DMA_Abort_IT+0x1c0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_DMA_Abort_IT+0x1c4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01d      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_DMA_Abort_IT+0x1c8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d018      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1f      	ldr	r2, [pc, #124]	; (800167c <HAL_DMA_Abort_IT+0x1cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_DMA_Abort_IT+0x1d0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00e      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_DMA_Abort_IT+0x1d4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d009      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_DMA_Abort_IT+0x1d8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_DMA_Abort_IT+0x18e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e178      	b.n	8001930 <HAL_DMA_Abort_IT+0x480>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e16f      	b.n	8001930 <HAL_DMA_Abort_IT+0x480>
 8001650:	40020010 	.word	0x40020010
 8001654:	40020028 	.word	0x40020028
 8001658:	40020040 	.word	0x40020040
 800165c:	40020058 	.word	0x40020058
 8001660:	40020070 	.word	0x40020070
 8001664:	40020088 	.word	0x40020088
 8001668:	400200a0 	.word	0x400200a0
 800166c:	400200b8 	.word	0x400200b8
 8001670:	40020410 	.word	0x40020410
 8001674:	40020428 	.word	0x40020428
 8001678:	40020440 	.word	0x40020440
 800167c:	40020458 	.word	0x40020458
 8001680:	40020470 	.word	0x40020470
 8001684:	40020488 	.word	0x40020488
 8001688:	400204a0 	.word	0x400204a0
 800168c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 020e 	bic.w	r2, r2, #14
 800169e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <HAL_DMA_Abort_IT+0x3a8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d04a      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6b      	ldr	r2, [pc, #428]	; (800185c <HAL_DMA_Abort_IT+0x3ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d045      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a69      	ldr	r2, [pc, #420]	; (8001860 <HAL_DMA_Abort_IT+0x3b0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d040      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a68      	ldr	r2, [pc, #416]	; (8001864 <HAL_DMA_Abort_IT+0x3b4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d03b      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a66      	ldr	r2, [pc, #408]	; (8001868 <HAL_DMA_Abort_IT+0x3b8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d036      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_DMA_Abort_IT+0x3bc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d031      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a63      	ldr	r2, [pc, #396]	; (8001870 <HAL_DMA_Abort_IT+0x3c0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02c      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a62      	ldr	r2, [pc, #392]	; (8001874 <HAL_DMA_Abort_IT+0x3c4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d027      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a60      	ldr	r2, [pc, #384]	; (8001878 <HAL_DMA_Abort_IT+0x3c8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d022      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a5f      	ldr	r2, [pc, #380]	; (800187c <HAL_DMA_Abort_IT+0x3cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d01d      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_DMA_Abort_IT+0x3d0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d018      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5c      	ldr	r2, [pc, #368]	; (8001884 <HAL_DMA_Abort_IT+0x3d4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d013      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_DMA_Abort_IT+0x3d8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00e      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a59      	ldr	r2, [pc, #356]	; (800188c <HAL_DMA_Abort_IT+0x3dc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d009      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_DMA_Abort_IT+0x3e0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d004      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_DMA_Abort_IT+0x3e4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d108      	bne.n	8001752 <HAL_DMA_Abort_IT+0x2a2>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_DMA_Abort_IT+0x2b2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_DMA_Abort_IT+0x3a8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d072      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_DMA_Abort_IT+0x3ac>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d06d      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_DMA_Abort_IT+0x3b0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d068      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_DMA_Abort_IT+0x3b4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a36      	ldr	r2, [pc, #216]	; (8001868 <HAL_DMA_Abort_IT+0x3b8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_DMA_Abort_IT+0x3bc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d059      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_DMA_Abort_IT+0x3c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d054      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_DMA_Abort_IT+0x3c4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04f      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_DMA_Abort_IT+0x3c8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_DMA_Abort_IT+0x3cc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_DMA_Abort_IT+0x3d0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <HAL_DMA_Abort_IT+0x3d4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_DMA_Abort_IT+0x3d8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_DMA_Abort_IT+0x3dc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_DMA_Abort_IT+0x3e0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_DMA_Abort_IT+0x3e4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_DMA_Abort_IT+0x3e8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_DMA_Abort_IT+0x3ec>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_DMA_Abort_IT+0x3f0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_DMA_Abort_IT+0x3f4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_DMA_Abort_IT+0x3f8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_DMA_Abort_IT+0x3fc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_DMA_Abort_IT+0x400>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_DMA_Abort_IT+0x404>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d132      	bne.n	80018b8 <HAL_DMA_Abort_IT+0x408>
 8001852:	2301      	movs	r3, #1
 8001854:	e031      	b.n	80018ba <HAL_DMA_Abort_IT+0x40a>
 8001856:	bf00      	nop
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	58025430 	.word	0x58025430
 80018a4:	58025444 	.word	0x58025444
 80018a8:	58025458 	.word	0x58025458
 80018ac:	5802546c 	.word	0x5802546c
 80018b0:	58025480 	.word	0x58025480
 80018b4:	58025494 	.word	0x58025494
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d028      	beq.n	8001910 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2201      	movs	r2, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001904:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800190e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_GPIO_Init+0x234>)
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800194e:	e194      	b.n	8001c7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8186 	beq.w	8001c74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x44>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80e0 	beq.w	8001c74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x238>)
 8001ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <HAL_GPIO_Init+0x238>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_GPIO_Init+0x238>)
 8001ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <HAL_GPIO_Init+0x23c>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_GPIO_Init+0x240>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d052      	beq.n	8001ba4 <HAL_GPIO_Init+0x268>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_GPIO_Init+0x244>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_GPIO_Init+0x248>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d02b      	beq.n	8001b66 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_GPIO_Init+0x24c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d025      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_GPIO_Init+0x250>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <HAL_GPIO_Init+0x254>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x258>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x21a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_GPIO_Init+0x25c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x216>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x260>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x212>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_GPIO_Init+0x264>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x20e>
 8001b46:	2309      	movs	r3, #9
 8001b48:	e02d      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	e02b      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b4e:	2308      	movs	r3, #8
 8001b50:	e029      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e027      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e025      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e023      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e021      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e01f      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e01d      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01b      	b.n	8001ba6 <HAL_GPIO_Init+0x26a>
 8001b6e:	bf00      	nop
 8001b70:	58000080 	.word	0x58000080
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58000400 	.word	0x58000400
 8001b7c:	58020000 	.word	0x58020000
 8001b80:	58020400 	.word	0x58020400
 8001b84:	58020800 	.word	0x58020800
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	58021000 	.word	0x58021000
 8001b90:	58021400 	.word	0x58021400
 8001b94:	58021800 	.word	0x58021800
 8001b98:	58021c00 	.word	0x58021c00
 8001b9c:	58022000 	.word	0x58022000
 8001ba0:	58022400 	.word	0x58022400
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb6:	4938      	ldr	r1, [pc, #224]	; (8001c98 <HAL_GPIO_Init+0x35c>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f ae63 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	58000400 	.word	0x58000400

08001c9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_PWREx_ConfigSupply+0x70>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00a      	beq.n	8001cc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_PWREx_ConfigSupply+0x70>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e01f      	b.n	8001d02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e01d      	b.n	8001d02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_PWREx_ConfigSupply+0x70>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	490f      	ldr	r1, [pc, #60]	; (8001d0c <HAL_PWREx_ConfigSupply+0x70>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cd6:	f7fe ffa5 	bl	8000c24 <HAL_GetTick>
 8001cda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cdc:	e009      	b.n	8001cf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cde:	f7fe ffa1 	bl	8000c24 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cec:	d901      	bls.n	8001cf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_PWREx_ConfigSupply+0x70>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfe:	d1ee      	bne.n	8001cde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58024800 	.word	0x58024800

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f000 bc48 	b.w	80025b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8088 	beq.w	8001e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d3c:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d007      	beq.n	8001d58 <HAL_RCC_OscConfig+0x48>
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	2b18      	cmp	r3, #24
 8001d4c:	d111      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d06d      	beq.n	8001e40 <HAL_RCC_OscConfig+0x130>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d169      	bne.n	8001e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f000 bc21 	b.w	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x7a>
 8001d7c:	4b86      	ldr	r3, [pc, #536]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x9c>
 8001d92:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a80      	ldr	r2, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7d      	ldr	r2, [pc, #500]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a74      	ldr	r2, [pc, #464]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dd0:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a70      	ldr	r2, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6d      	ldr	r2, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff18 	bl	8000c24 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7fe ff14 	bl	8000c24 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e3d4      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff04 	bl	8000c24 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7fe ff00 	bl	8000c24 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e3c0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x110>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ca 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_RCC_OscConfig+0x166>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b18      	cmp	r3, #24
 8001e6a:	d156      	bne.n	8001f1a <HAL_RCC_OscConfig+0x20a>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d151      	bne.n	8001f1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e392      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e8e:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0219 	bic.w	r2, r3, #25
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	493f      	ldr	r1, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fec0 	bl	8000c24 <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7fe febc 	bl	8000c24 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e37c      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	f7fe feb9 	bl	8000c3c <HAL_GetREVID>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d817      	bhi.n	8001f04 <HAL_RCC_OscConfig+0x1f4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d108      	bne.n	8001eee <HAL_RCC_OscConfig+0x1de>
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ee4:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	e07a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	031b      	lsls	r3, r3, #12
 8001efc:	4926      	ldr	r1, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f02:	e06f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4921      	ldr	r1, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e064      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d047      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0219 	bic.w	r2, r3, #25
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	491a      	ldr	r1, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe fe76 	bl	8000c24 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fe72 	bl	8000c24 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e332      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	f7fe fe6f 	bl	8000c3c <HAL_GetREVID>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d819      	bhi.n	8001f9c <HAL_RCC_OscConfig+0x28c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d108      	bne.n	8001f82 <HAL_RCC_OscConfig+0x272>
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	6053      	str	r3, [r2, #4]
 8001f80:	e030      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	031b      	lsls	r3, r3, #12
 8001f90:	4901      	ldr	r1, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e025      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	4b9a      	ldr	r3, [pc, #616]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	4997      	ldr	r1, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e018      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b95      	ldr	r3, [pc, #596]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a94      	ldr	r2, [pc, #592]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe31 	bl	8000c24 <HAL_GetTick>
 8001fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fe2d 	bl	8000c24 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2ed      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd8:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a9 	beq.w	8002144 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ffa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ffc:	4b82      	ldr	r3, [pc, #520]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d007      	beq.n	8002018 <HAL_RCC_OscConfig+0x308>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b18      	cmp	r3, #24
 800200c:	d13a      	bne.n	8002084 <HAL_RCC_OscConfig+0x374>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d135      	bne.n	8002084 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002018:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_OscConfig+0x320>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e2c1      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002030:	f7fe fe04 	bl	8000c3c <HAL_GetREVID>
 8002034:	4603      	mov	r3, r0
 8002036:	f241 0203 	movw	r2, #4099	; 0x1003
 800203a:	4293      	cmp	r3, r2
 800203c:	d817      	bhi.n	800206e <HAL_RCC_OscConfig+0x35e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2b20      	cmp	r3, #32
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x348>
 8002046:	4b70      	ldr	r3, [pc, #448]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800204e:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002054:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002056:	e075      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002058:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	069b      	lsls	r3, r3, #26
 8002066:	4968      	ldr	r1, [pc, #416]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800206c:	e06a      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800206e:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	061b      	lsls	r3, r3, #24
 800207c:	4962      	ldr	r1, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002082:	e05f      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d042      	beq.n	8002112 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fdc4 	bl	8000c24 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020a0:	f7fe fdc0 	bl	8000c24 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e280      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020b2:	4b55      	ldr	r3, [pc, #340]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020be:	f7fe fdbd 	bl	8000c3c <HAL_GetREVID>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d817      	bhi.n	80020fc <HAL_RCC_OscConfig+0x3ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d108      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3d6>
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020e2:	6053      	str	r3, [r2, #4]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	4944      	ldr	r1, [pc, #272]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e023      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	493f      	ldr	r1, [pc, #252]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800211c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fd81 	bl	8000c24 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002126:	f7fe fd7d 	bl	8000c24 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e23d      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d036      	beq.n	80021be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d019      	beq.n	800218c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fd5e 	bl	8000c24 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fd5a 	bl	8000c24 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e21a      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x45c>
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fd44 	bl	8000c24 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fd40 	bl	8000c24 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e200      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d039      	beq.n	800223e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021de:	f7fe fd21 	bl	8000c24 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7fe fd1d 	bl	8000c24 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1dd      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4d6>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 8002206:	bf00      	nop
 8002208:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800220c:	4b9b      	ldr	r3, [pc, #620]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a9a      	ldr	r2, [pc, #616]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002216:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002218:	f7fe fd04 	bl	8000c24 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002220:	f7fe fd00 	bl	8000c24 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1c0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002232:	4b92      	ldr	r3, [pc, #584]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8081 	beq.w	800234e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800224c:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x770>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8b      	ldr	r2, [pc, #556]	; (8002480 <HAL_RCC_OscConfig+0x770>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002258:	f7fe fce4 	bl	8000c24 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe fce0 	bl	8000c24 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1a0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <HAL_RCC_OscConfig+0x770>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x584>
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e02d      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5a6>
 800229c:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a76      	ldr	r2, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a73      	ldr	r2, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c8>
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a6b      	ldr	r2, [pc, #428]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 80022d8:	4b68      	ldr	r3, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a67      	ldr	r2, [pc, #412]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	4b65      	ldr	r3, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a64      	ldr	r2, [pc, #400]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fc94 	bl	8000c24 <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fc90 	bl	8000c24 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e14e      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x5f0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fc7e 	bl	8000c24 <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe fc7a 	bl	8000c24 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e138      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 812d 	beq.w	80025b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002360:	2b18      	cmp	r3, #24
 8002362:	f000 80bd 	beq.w	80024e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b02      	cmp	r3, #2
 800236c:	f040 809e 	bne.w	80024ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b42      	ldr	r3, [pc, #264]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a41      	ldr	r2, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fc52 	bl	8000c24 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fc4e 	bl	8000c24 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e10e      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x774>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4931      	ldr	r1, [pc, #196]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	628b      	str	r3, [r1, #40]	; 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	3b01      	subs	r3, #1
 80023c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	3b01      	subs	r3, #1
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	3b01      	subs	r3, #1
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	3b01      	subs	r3, #1
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023ec:	4923      	ldr	r1, [pc, #140]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_OscConfig+0x778>)
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	491b      	ldr	r1, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f023 020c 	bic.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4917      	ldr	r1, [pc, #92]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f023 0202 	bic.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	4912      	ldr	r1, [pc, #72]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_RCC_OscConfig+0x76c>)
 800246c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fbd7 	bl	8000c24 <HAL_GetTick>
 8002476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002478:	e011      	b.n	800249e <HAL_RCC_OscConfig+0x78e>
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	58024800 	.word	0x58024800
 8002484:	fffffc0c 	.word	0xfffffc0c
 8002488:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fbca 	bl	8000c24 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e08a      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x77c>
 80024aa:	e082      	b.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a42      	ldr	r2, [pc, #264]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fbb4 	bl	8000c24 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fbb0 	bl	8000c24 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e070      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x7b0>
 80024de:	e068      	b.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d031      	beq.n	8002558 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0203 	and.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d122      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11a      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0a5b      	lsrs	r3, r3, #9
 8002526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d111      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0e1b      	lsrs	r3, r3, #24
 800254a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02b      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 800255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002566:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	429a      	cmp	r2, r3
 8002570:	d01f      	beq.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800257e:	f7fe fb51 	bl	8000c24 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002584:	bf00      	nop
 8002586:	f7fe fb4d 	bl	8000c24 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	4293      	cmp	r3, r2
 8002590:	d0f9      	beq.n	8002586 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_RCC_OscConfig+0x8b0>)
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800259e:	00d2      	lsls	r2, r2, #3
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58024400 	.word	0x58024400
 80025c0:	ffff0007 	.word	0xffff0007

080025c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e19c      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	4985      	ldr	r1, [pc, #532]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b83      	ldr	r3, [pc, #524]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e184      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002624:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4975      	ldr	r1, [pc, #468]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	4b70      	ldr	r3, [pc, #448]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002652:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002680:	4b61      	ldr	r3, [pc, #388]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	495e      	ldr	r1, [pc, #376]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 800268e:	4313      	orrs	r3, r2
 8002690:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d908      	bls.n	80026c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026ae:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4953      	ldr	r1, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	429a      	cmp	r2, r3
 80026da:	d908      	bls.n	80026ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f023 020f 	bic.w	r2, r3, #15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4947      	ldr	r1, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d055      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4940      	ldr	r1, [pc, #256]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002708:	4313      	orrs	r3, r2
 800270a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d107      	bne.n	8002724 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002714:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d121      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0f6      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d107      	bne.n	800273c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0ea      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0de      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0d6      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f023 0207 	bic.w	r2, r3, #7
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4925      	ldr	r1, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002776:	f7fe fa55 	bl	8000c24 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277c:	e00a      	b.n	8002794 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7fe fa51 	bl	8000c24 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0be      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d1eb      	bne.n	800277e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	429a      	cmp	r2, r3
 80027c0:	d208      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f023 020f 	bic.w	r2, r3, #15
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d214      	bcs.n	800280c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4906      	ldr	r1, [pc, #24]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e086      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
 8002804:	52002000 	.word	0x52002000
 8002808:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4939      	ldr	r1, [pc, #228]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	4b34      	ldr	r3, [pc, #208]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002852:	429a      	cmp	r2, r3
 8002854:	d208      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	492e      	ldr	r1, [pc, #184]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002880:	429a      	cmp	r2, r3
 8002882:	d208      	bcs.n	8002896 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4922      	ldr	r1, [pc, #136]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 8002892:	4313      	orrs	r3, r2
 8002894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d208      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4917      	ldr	r1, [pc, #92]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028c4:	f000 f834 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4912      	ldr	r1, [pc, #72]	; (8002920 <HAL_RCC_ClockConfig+0x35c>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_RCC_ClockConfig+0x358>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <HAL_RCC_ClockConfig+0x35c>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x360>)
 80028fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x364>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x368>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f942 	bl	8000b90 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	08006818 	.word	0x08006818
 8002924:	24000034 	.word	0x24000034
 8002928:	24000030 	.word	0x24000030
 800292c:	24000038 	.word	0x24000038

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002936:	4bb3      	ldr	r3, [pc, #716]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800293e:	2b18      	cmp	r3, #24
 8002940:	f200 8155 	bhi.w	8002bee <HAL_RCC_GetSysClockFreq+0x2be>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	080029b1 	.word	0x080029b1
 8002950:	08002bef 	.word	0x08002bef
 8002954:	08002bef 	.word	0x08002bef
 8002958:	08002bef 	.word	0x08002bef
 800295c:	08002bef 	.word	0x08002bef
 8002960:	08002bef 	.word	0x08002bef
 8002964:	08002bef 	.word	0x08002bef
 8002968:	08002bef 	.word	0x08002bef
 800296c:	080029d7 	.word	0x080029d7
 8002970:	08002bef 	.word	0x08002bef
 8002974:	08002bef 	.word	0x08002bef
 8002978:	08002bef 	.word	0x08002bef
 800297c:	08002bef 	.word	0x08002bef
 8002980:	08002bef 	.word	0x08002bef
 8002984:	08002bef 	.word	0x08002bef
 8002988:	08002bef 	.word	0x08002bef
 800298c:	080029dd 	.word	0x080029dd
 8002990:	08002bef 	.word	0x08002bef
 8002994:	08002bef 	.word	0x08002bef
 8002998:	08002bef 	.word	0x08002bef
 800299c:	08002bef 	.word	0x08002bef
 80029a0:	08002bef 	.word	0x08002bef
 80029a4:	08002bef 	.word	0x08002bef
 80029a8:	08002bef 	.word	0x08002bef
 80029ac:	080029e3 	.word	0x080029e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b0:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029bc:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	4a90      	ldr	r2, [pc, #576]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029ce:	e111      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029d0:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029d2:	61bb      	str	r3, [r7, #24]
      break;
 80029d4:	e10e      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029d6:	4b8d      	ldr	r3, [pc, #564]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029d8:	61bb      	str	r3, [r7, #24]
      break;
 80029da:	e10b      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029dc:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029de:	61bb      	str	r3, [r7, #24]
      break;
 80029e0:	e108      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029ec:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029f8:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a02:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80e1 	beq.w	8002be8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	f000 8083 	beq.w	8002b34 <HAL_RCC_GetSysClockFreq+0x204>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f200 80a1 	bhi.w	8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x114>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d056      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a42:	e099      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d02d      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a50:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	4a6b      	ldr	r2, [pc, #428]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7a:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002aaa:	e087      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aee:	e065      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b32:	e043      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e021      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	0a5b      	lsrs	r3, r3, #9
 8002bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be0:	ee17 3a90 	vmov	r3, s15
 8002be4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bf0:	61bb      	str	r3, [r7, #24]
      break;
 8002bf2:	bf00      	nop
  }

  return sysclockfreq;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	58024400 	.word	0x58024400
 8002c08:	03d09000 	.word	0x03d09000
 8002c0c:	003d0900 	.word	0x003d0900
 8002c10:	017d7840 	.word	0x017d7840
 8002c14:	46000000 	.word	0x46000000
 8002c18:	4c742400 	.word	0x4c742400
 8002c1c:	4a742400 	.word	0x4a742400
 8002c20:	4bbebc20 	.word	0x4bbebc20

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c2a:	f7ff fe81 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490f      	ldr	r1, [pc, #60]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	08006818 	.word	0x08006818
 8002c7c:	24000034 	.word	0x24000034
 8002c80:	24000030 	.word	0x24000030

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c88:	f7ff ffcc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	08006818 	.word	0x08006818

08002cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cb4:	f7ff ffb6 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4904      	ldr	r1, [pc, #16]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	08006818 	.word	0x08006818

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b0ca      	sub	sp, #296	; 0x128
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d00:	2500      	movs	r5, #0
 8002d02:	ea54 0305 	orrs.w	r3, r4, r5
 8002d06:	d049      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d12:	d02f      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d18:	d828      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1e:	d01a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d24:	d822      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4bb8      	ldr	r3, [pc, #736]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4ab7      	ldr	r2, [pc, #732]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d3e:	e01a      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d44:	3308      	adds	r3, #8
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fc8f 	bl	800466c <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fd36 	bl	80047d0 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d7e:	4ba5      	ldr	r3, [pc, #660]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	4aa1      	ldr	r2, [pc, #644]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6513      	str	r3, [r2, #80]	; 0x50
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002da8:	f04f 0900 	mov.w	r9, #0
 8002dac:	ea58 0309 	orrs.w	r3, r8, r9
 8002db0:	d047      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d82a      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de7 	.word	0x08002de7
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e1b 	.word	0x08002e1b
 8002dd4:	08002e1b 	.word	0x08002e1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a8d      	ldr	r2, [pc, #564]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002de4:	e01a      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dea:	3308      	adds	r3, #8
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fc3c 	bl	800466c <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e00:	3328      	adds	r3, #40	; 0x28
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fce3 	bl	80047d0 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e10:	e004      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e24:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	f023 0107 	bic.w	r1, r3, #7
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	4a78      	ldr	r2, [pc, #480]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6513      	str	r3, [r2, #80]	; 0x50
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002e4e:	f04f 0b00 	mov.w	fp, #0
 8002e52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e56:	d04c      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d030      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d829      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e6c:	d02d      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e70:	d825      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d018      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d821      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d007      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e82:	e01c      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e84:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	4a62      	ldr	r2, [pc, #392]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e90:	e01c      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e96:	3308      	adds	r3, #8
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 fbe6 	bl	800466c <RCCEx_PLL2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eac:	3328      	adds	r3, #40	; 0x28
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fc8d 	bl	80047d0 <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e006      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002efe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002f08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	d053      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f1e:	d035      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f24:	d82e      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f2a:	d031      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f30:	d828      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f36:	d01a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3c:	d822      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f46:	d007      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f56:	e01c      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fb83 	bl	800466c <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f72:	3328      	adds	r3, #40	; 0x28
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fc2a 	bl	80047d0 <RCCEx_PLL3_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d056      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe6:	d038      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fec:	d831      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff2:	d034      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff8:	d82b      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffe:	d01d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003004:	d825      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800300a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003010:	e01f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003018:	4ba2      	ldr	r3, [pc, #648]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4aa1      	ldr	r2, [pc, #644]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003024:	e01c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800302a:	3308      	adds	r3, #8
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fb1c 	bl	800466c <RCCEx_PLL2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800303a:	e011      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800303c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003040:	3328      	adds	r3, #40	; 0x28
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fbc3 	bl	80047d0 <RCCEx_PLL3_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003050:	e006      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800305e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003068:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003078:	4a8a      	ldr	r2, [pc, #552]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307a:	430b      	orrs	r3, r1
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800309e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d03a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	2b30      	cmp	r3, #48	; 0x30
 80030b0:	d01f      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	d819      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d815      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d111      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4b77      	ldr	r3, [pc, #476]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030d2:	e011      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030d8:	3308      	adds	r3, #8
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fac5 	bl	800466c <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003110:	430b      	orrs	r3, r1
 8003112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800311a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800312a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003134:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003138:	460b      	mov	r3, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	d051      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003148:	d035      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800314a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800314e:	d82e      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003154:	d031      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800315a:	d828      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003160:	d01a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d822      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d007      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003172:	e01c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003180:	e01c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003186:	3308      	adds	r3, #8
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fa6e 	bl	800466c <RCCEx_PLL2_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003196:	e011      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319c:	3328      	adds	r3, #40	; 0x28
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fb15 	bl	80047d0 <RCCEx_PLL3_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031b4:	e002      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6513      	str	r3, [r2, #80]	; 0x50
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031fc:	460b      	mov	r3, r1
 80031fe:	4313      	orrs	r3, r2
 8003200:	d056      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d033      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800320e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003212:	d82c      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003218:	d02f      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800321a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321e:	d826      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003220:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003224:	d02b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800322a:	d820      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800322c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003230:	d012      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003236:	d81a      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d115      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003246:	3308      	adds	r3, #8
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f001 fa0e 	bl	800466c <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003256:	e015      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325c:	3328      	adds	r3, #40	; 0x28
 800325e:	2101      	movs	r1, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fab5 	bl	80047d0 <RCCEx_PLL3_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800326c:	e00a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003290:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329a:	4a02      	ldr	r2, [pc, #8]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6513      	str	r3, [r2, #80]	; 0x50
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d055      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032dc:	d033      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e2:	d82c      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d02f      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d826      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032f4:	d02b      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032fa:	d820      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003300:	d012      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003306:	d81a      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800330c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003310:	d115      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003316:	3308      	adds	r3, #8
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f9a6 	bl	800466c <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003326:	e015      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332c:	3328      	adds	r3, #40	; 0x28
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fa4d 	bl	80047d0 <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800333c:	e00a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003344:	e006      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800335c:	4ba3      	ldr	r3, [pc, #652]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800336c:	4a9f      	ldr	r2, [pc, #636]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d037      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a6:	d00e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80033a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ac:	d816      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b6:	d111      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a8b      	ldr	r2, [pc, #556]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033c4:	e00f      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	3308      	adds	r3, #8
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 f94c 	bl	800466c <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033da:	e004      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ee:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a7b      	ldr	r2, [pc, #492]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033fe:	430b      	orrs	r3, r1
 8003400:	6513      	str	r3, [r2, #80]	; 0x50
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003422:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003426:	460b      	mov	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	d039      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	2b03      	cmp	r3, #3
 8003434:	d81c      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003479 	.word	0x08003479
 8003440:	0800344d 	.word	0x0800344d
 8003444:	0800345b 	.word	0x0800345b
 8003448:	08003479 	.word	0x08003479
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b67      	ldr	r3, [pc, #412]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4a66      	ldr	r2, [pc, #408]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345e:	3308      	adds	r3, #8
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f902 	bl	800466c <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003482:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f023 0103 	bic.w	r1, r3, #3
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	430b      	orrs	r3, r1
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800349c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80034ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	f000 809f 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fba9 	bl	8000c24 <HAL_GetTick>
 80034d2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d6:	e00b      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fd fba4 	bl	8000c24 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d903      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003500:	2b00      	cmp	r3, #0
 8003502:	d179      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003510:	4053      	eors	r3, r2
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003552:	d118      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fd fb66 	bl	8000c24 <HAL_GetTick>
 8003558:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355c:	e00d      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd fb61 	bl	8000c24 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	f241 3388 	movw	r3, #5000	; 0x1388
 800356e:	429a      	cmp	r2, r3
 8003570:	d903      	bls.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0eb      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358a:	2b00      	cmp	r3, #0
 800358c:	d129      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359e:	d10e      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035b0:	091a      	lsrs	r2, r3, #4
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6113      	str	r3, [r2, #16]
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035c8:	6113      	str	r3, [r2, #16]
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e00e      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80035ec:	58024400 	.word	0x58024400
 80035f0:	58024800 	.word	0x58024800
 80035f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f002 0301 	and.w	r3, r2, #1
 800360c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003616:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	f000 8089 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	2b28      	cmp	r3, #40	; 0x28
 800362a:	d86b      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800370d 	.word	0x0800370d
 8003638:	08003705 	.word	0x08003705
 800363c:	08003705 	.word	0x08003705
 8003640:	08003705 	.word	0x08003705
 8003644:	08003705 	.word	0x08003705
 8003648:	08003705 	.word	0x08003705
 800364c:	08003705 	.word	0x08003705
 8003650:	08003705 	.word	0x08003705
 8003654:	080036d9 	.word	0x080036d9
 8003658:	08003705 	.word	0x08003705
 800365c:	08003705 	.word	0x08003705
 8003660:	08003705 	.word	0x08003705
 8003664:	08003705 	.word	0x08003705
 8003668:	08003705 	.word	0x08003705
 800366c:	08003705 	.word	0x08003705
 8003670:	08003705 	.word	0x08003705
 8003674:	080036ef 	.word	0x080036ef
 8003678:	08003705 	.word	0x08003705
 800367c:	08003705 	.word	0x08003705
 8003680:	08003705 	.word	0x08003705
 8003684:	08003705 	.word	0x08003705
 8003688:	08003705 	.word	0x08003705
 800368c:	08003705 	.word	0x08003705
 8003690:	08003705 	.word	0x08003705
 8003694:	0800370d 	.word	0x0800370d
 8003698:	08003705 	.word	0x08003705
 800369c:	08003705 	.word	0x08003705
 80036a0:	08003705 	.word	0x08003705
 80036a4:	08003705 	.word	0x08003705
 80036a8:	08003705 	.word	0x08003705
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003705 	.word	0x08003705
 80036b4:	0800370d 	.word	0x0800370d
 80036b8:	08003705 	.word	0x08003705
 80036bc:	08003705 	.word	0x08003705
 80036c0:	08003705 	.word	0x08003705
 80036c4:	08003705 	.word	0x08003705
 80036c8:	08003705 	.word	0x08003705
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003705 	.word	0x08003705
 80036d4:	0800370d 	.word	0x0800370d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	3308      	adds	r3, #8
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ffc3 	bl	800466c <RCCEx_PLL2_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ec:	e00f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	3328      	adds	r3, #40	; 0x28
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f86a 	bl	80047d0 <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003716:	4bbf      	ldr	r3, [pc, #764]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003724:	4abb      	ldr	r2, [pc, #748]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6553      	str	r3, [r2, #84]	; 0x54
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 0302 	and.w	r3, r2, #2
 8003740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800374a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d041      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375a:	2b05      	cmp	r3, #5
 800375c:	d824      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037b1 	.word	0x080037b1
 8003768:	0800377d 	.word	0x0800377d
 800376c:	08003793 	.word	0x08003793
 8003770:	080037b1 	.word	0x080037b1
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003780:	3308      	adds	r3, #8
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f000 ff71 	bl	800466c <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003790:	e00f      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003796:	3328      	adds	r3, #40	; 0x28
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f818 	bl	80047d0 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037ba:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f023 0107 	bic.w	r1, r3, #7
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c8:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6553      	str	r3, [r2, #84]	; 0x54
 80037ce:	e003      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0304 	and.w	r3, r2, #4
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d044      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	2b05      	cmp	r3, #5
 8003802:	d825      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003859 	.word	0x08003859
 8003810:	08003825 	.word	0x08003825
 8003814:	0800383b 	.word	0x0800383b
 8003818:	08003859 	.word	0x08003859
 800381c:	08003859 	.word	0x08003859
 8003820:	08003859 	.word	0x08003859
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	3308      	adds	r3, #8
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f000 ff1d 	bl	800466c <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003838:	e00f      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	3328      	adds	r3, #40	; 0x28
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 ffc4 	bl	80047d0 <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f023 0107 	bic.w	r1, r3, #7
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	4a68      	ldr	r2, [pc, #416]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6593      	str	r3, [r2, #88]	; 0x58
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f002 0320 	and.w	r3, r2, #32
 800388e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d055      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ae:	d033      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b4:	d82c      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d02f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d826      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c6:	d02b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80038c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038cc:	d820      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d2:	d012      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d8:	d81a      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d022      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e2:	d115      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3308      	adds	r3, #8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 febd 	bl	800466c <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038f8:	e015      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 ff64 	bl	80047d0 <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800390e:	e00a      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003916:	e006      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003918:	bf00      	nop
 800391a:	e004      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800391c:	bf00      	nop
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003940:	430b      	orrs	r3, r1
 8003942:	6553      	str	r3, [r2, #84]	; 0x54
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800395a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003964:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d058      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003976:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800397a:	d033      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800397c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003980:	d82c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d02f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d826      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003992:	d02b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003998:	d820      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d012      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a4:	d81a      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d022      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d115      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe57 	bl	800466c <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	3328      	adds	r3, #40	; 0x28
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fefe 	bl	80047d0 <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039da:	e00a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039e4:	bf00      	nop
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0a:	4a02      	ldr	r2, [pc, #8]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d055      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a4c:	d033      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a52:	d82c      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d02f      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d826      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a64:	d02b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a6a:	d820      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a70:	d012      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a76:	d81a      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d022      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d115      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a86:	3308      	adds	r3, #8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fdee 	bl	800466c <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a96:	e015      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	3328      	adds	r3, #40	; 0x28
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe95 	bl	80047d0 <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003acc:	4ba1      	ldr	r3, [pc, #644]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003adc:	4a9d      	ldr	r2, [pc, #628]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f002 0308 	and.w	r3, r2, #8
 8003af8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d01e      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	3328      	adds	r3, #40	; 0x28
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fe54 	bl	80047d0 <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b34:	4b87      	ldr	r3, [pc, #540]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	4a83      	ldr	r2, [pc, #524]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f002 0310 	and.w	r3, r2, #16
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d01e      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	3328      	adds	r3, #40	; 0x28
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fe25 	bl	80047d0 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b92:	4b70      	ldr	r3, [pc, #448]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba2:	4a6c      	ldr	r2, [pc, #432]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	d03e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd4:	d022      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bda:	d81b      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bec:	3308      	adds	r3, #8
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd3b 	bl	800466c <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00f      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	3328      	adds	r3, #40	; 0x28
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fde2 	bl	80047d0 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c26:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c36:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c54:	2300      	movs	r3, #0
 8003c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c6e:	d01f      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c74:	d818      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c80:	d007      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c82:	e011      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	3328      	adds	r3, #40	; 0x28
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd98 	bl	80047d0 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6553      	str	r3, [r2, #84]	; 0x54
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce8:	2300      	movs	r3, #0
 8003cea:	677b      	str	r3, [r7, #116]	; 0x74
 8003cec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	d034      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d007      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d06:	e011      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d14:	e00e      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fca4 	bl	800466c <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	4a02      	ldr	r2, [pc, #8]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d52:	bf00      	nop
 8003d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6e:	2300      	movs	r3, #0
 8003d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	3328      	adds	r3, #40	; 0x28
 8003d82:	2102      	movs	r1, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fd23 	bl	80047d0 <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003da2:	663b      	str	r3, [r7, #96]	; 0x60
 8003da4:	2300      	movs	r3, #0
 8003da6:	667b      	str	r3, [r7, #100]	; 0x64
 8003da8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d038      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbe:	d018      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc4:	d811      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dca:	d014      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d80b      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d011      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4bc3      	ldr	r3, [pc, #780]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4ac2      	ldr	r2, [pc, #776]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003df0:	e004      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e04:	4bb9      	ldr	r3, [pc, #740]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e14:	4ab5      	ldr	r2, [pc, #724]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6553      	str	r3, [r2, #84]	; 0x54
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e32:	2300      	movs	r3, #0
 8003e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e40:	4baa      	ldr	r3, [pc, #680]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	4aa7      	ldr	r2, [pc, #668]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003e60:	653b      	str	r3, [r7, #80]	; 0x50
 8003e62:	2300      	movs	r3, #0
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54
 8003e66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e70:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e80:	4a9a      	ldr	r2, [pc, #616]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e94:	2300      	movs	r3, #0
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea2:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ed2:	4b86      	ldr	r3, [pc, #536]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a85      	ldr	r2, [pc, #532]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003edc:	6113      	str	r3, [r2, #16]
 8003ede:	4b83      	ldr	r3, [pc, #524]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee0:	6919      	ldr	r1, [r3, #16]
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003eea:	4a80      	ldr	r2, [pc, #512]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003efe:	2300      	movs	r3, #0
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f0c:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f10:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	4a74      	ldr	r2, [pc, #464]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
 8003f32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	4a67      	ldr	r2, [pc, #412]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f72:	3308      	adds	r3, #8
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fb78 	bl	800466c <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6239      	str	r1, [r7, #32]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb58 	bl	800466c <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	61b9      	str	r1, [r7, #24]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d011      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fb38 	bl	800466c <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	2100      	movs	r1, #0
 800401c:	6139      	str	r1, [r7, #16]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004028:	460b      	mov	r3, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	d011      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004032:	3328      	adds	r3, #40	; 0x28
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fbca 	bl	80047d0 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	2100      	movs	r1, #0
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d011      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004072:	3328      	adds	r3, #40	; 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fbaa 	bl	80047d0 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	2100      	movs	r1, #0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb8a 	bl	80047d0 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80040d2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80040e6:	46bd      	mov	sp, r7
 80040e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ec:	58024400 	.word	0x58024400

080040f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040f4:	f7fe fd96 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	58024400 	.word	0x58024400
 8004118:	08006818 	.word	0x08006818

0800411c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004124:	4ba1      	ldr	r3, [pc, #644]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800412e:	4b9f      	ldr	r3, [pc, #636]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800413a:	4b9c      	ldr	r3, [pc, #624]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004146:	4b99      	ldr	r3, [pc, #612]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8111 	beq.w	800438c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	f000 8083 	beq.w	8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b02      	cmp	r3, #2
 8004176:	f200 80a1 	bhi.w	80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d056      	beq.n	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004186:	e099      	b.n	80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004188:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02d      	beq.n	80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004194:	4b85      	ldr	r3, [pc, #532]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	4a84      	ldr	r2, [pc, #528]	; (80043b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041ee:	e087      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004212:	ed97 6a03 	vldr	s12, [r7, #12]
 8004216:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004232:	e065      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004256:	ed97 6a03 	vldr	s12, [r7, #12]
 800425a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004276:	e043      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428a:	4b48      	ldr	r3, [pc, #288]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429a:	ed97 6a03 	vldr	s12, [r7, #12]
 800429e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ba:	e021      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ce:	4b37      	ldr	r3, [pc, #220]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a03 	vldr	s12, [r7, #12]
 80042e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	0a5b      	lsrs	r3, r3, #9
 8004306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431a:	edd7 6a07 	vldr	s13, [r7, #28]
 800431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004348:	edd7 6a07 	vldr	s13, [r7, #28]
 800434c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004354:	ee17 2a90 	vmov	r2, s15
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004376:	edd7 6a07 	vldr	s13, [r7, #28]
 800437a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800437e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004382:	ee17 2a90 	vmov	r2, s15
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800438a:	e008      	b.n	800439e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
}
 800439e:	bf00      	nop
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	03d09000 	.word	0x03d09000
 80043b4:	46000000 	.word	0x46000000
 80043b8:	4c742400 	.word	0x4c742400
 80043bc:	4a742400 	.word	0x4a742400
 80043c0:	4bbebc20 	.word	0x4bbebc20

080043c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043cc:	4ba1      	ldr	r3, [pc, #644]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043d6:	4b9f      	ldr	r3, [pc, #636]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	0d1b      	lsrs	r3, r3, #20
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043e2:	4b9c      	ldr	r3, [pc, #624]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043ee:	4b99      	ldr	r3, [pc, #612]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8111 	beq.w	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b02      	cmp	r3, #2
 8004416:	f000 8083 	beq.w	8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b02      	cmp	r3, #2
 800441e:	f200 80a1 	bhi.w	8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d056      	beq.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800442e:	e099      	b.n	8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004430:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02d      	beq.n	8004498 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800443c:	4b85      	ldr	r3, [pc, #532]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	4a84      	ldr	r2, [pc, #528]	; (8004658 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b7b      	ldr	r3, [pc, #492]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a03 	vldr	s12, [r7, #12]
 800447a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004496:	e087      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004660 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80044be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044da:	e065      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004502:	eddf 5a56 	vldr	s11, [pc, #344]	; 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800451e:	e043      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b48      	ldr	r3, [pc, #288]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a03 	vldr	s12, [r7, #12]
 8004546:	eddf 5a45 	vldr	s11, [pc, #276]	; 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004562:	e021      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a03 	vldr	s12, [r7, #12]
 800458a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045d6:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	0e1b      	lsrs	r3, r3, #24
 800460a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800461a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800461e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462a:	ee17 2a90 	vmov	r2, s15
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004632:	e008      	b.n	8004646 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
}
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	03d09000 	.word	0x03d09000
 800465c:	46000000 	.word	0x46000000
 8004660:	4c742400 	.word	0x4c742400
 8004664:	4a742400 	.word	0x4a742400
 8004668:	4bbebc20 	.word	0x4bbebc20

0800466c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800467a:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d101      	bne.n	800468a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e099      	b.n	80047be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800468a:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4e      	ldr	r2, [pc, #312]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fac5 	bl	8000c24 <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800469c:	e008      	b.n	80046b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800469e:	f7fc fac1 	bl	8000c24 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e086      	b.n	80047be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046b0:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046bc:	4b42      	ldr	r3, [pc, #264]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	493f      	ldr	r1, [pc, #252]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	628b      	str	r3, [r1, #40]	; 0x28
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	3b01      	subs	r3, #1
 80046e0:	025b      	lsls	r3, r3, #9
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004700:	4931      	ldr	r1, [pc, #196]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	492d      	ldr	r1, [pc, #180]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	f023 0220 	bic.w	r2, r3, #32
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4928      	ldr	r1, [pc, #160]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <RCCEx_PLL2_Config+0x160>)
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	69d2      	ldr	r2, [r2, #28]
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	4920      	ldr	r1, [pc, #128]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004750:	f043 0310 	orr.w	r3, r3, #16
 8004754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d106      	bne.n	800476a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004768:	e00f      	b.n	800478a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004770:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800477c:	e005      	b.n	800478a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fc fa45 	bl	8000c24 <HAL_GetTick>
 800479a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800479c:	e008      	b.n	80047b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800479e:	f7fc fa41 	bl	8000c24 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	ffff0007 	.word	0xffff0007

080047d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047de:	4b53      	ldr	r3, [pc, #332]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d101      	bne.n	80047ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e099      	b.n	8004922 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047ee:	4b4f      	ldr	r3, [pc, #316]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4e      	ldr	r2, [pc, #312]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fa:	f7fc fa13 	bl	8000c24 <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004800:	e008      	b.n	8004814 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004802:	f7fc fa0f 	bl	8000c24 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e086      	b.n	8004922 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004814:	4b45      	ldr	r3, [pc, #276]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004820:	4b42      	ldr	r3, [pc, #264]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	051b      	lsls	r3, r3, #20
 800482e:	493f      	ldr	r1, [pc, #252]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	628b      	str	r3, [r1, #40]	; 0x28
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	3b01      	subs	r3, #1
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	b29b      	uxth	r3, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	3b01      	subs	r3, #1
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004864:	4931      	ldr	r1, [pc, #196]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	492d      	ldr	r1, [pc, #180]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	4928      	ldr	r1, [pc, #160]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800488e:	4b27      	ldr	r3, [pc, #156]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a26      	ldr	r2, [pc, #152]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 800489c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <RCCEx_PLL3_Config+0x160>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	69d2      	ldr	r2, [r2, #28]
 80048a6:	00d2      	lsls	r2, r2, #3
 80048a8:	4920      	ldr	r1, [pc, #128]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a19      	ldr	r2, [pc, #100]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048cc:	e00f      	b.n	80048ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048d4:	4b15      	ldr	r3, [pc, #84]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048e0:	e005      	b.n	80048ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a0e      	ldr	r2, [pc, #56]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fa:	f7fc f993 	bl	8000c24 <HAL_GetTick>
 80048fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004900:	e008      	b.n	8004914 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004902:	f7fc f98f 	bl	8000c24 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e006      	b.n	8004922 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <RCCEx_PLL3_Config+0x15c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	58024400 	.word	0x58024400
 8004930:	ffff0007 	.word	0xffff0007

08004934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e042      	b.n	80049cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fb ff85 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2224      	movs	r2, #36	; 0x24
 8004962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fc90 	bl	800529c <UART_SetConfig>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e022      	b.n	80049cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 f9ec 	bl	8005d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fa73 	bl	8005eb0 <UART_CheckIdleState>
 80049ca:	4603      	mov	r3, r0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b091      	sub	sp, #68	; 0x44
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d178      	bne.n	8004ade <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Transmit_IT+0x24>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e071      	b.n	8004ae0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2221      	movs	r2, #33	; 0x21
 8004a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a30:	d12a      	bne.n	8004a88 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d107      	bne.n	8004a4c <HAL_UART_Transmit_IT+0x78>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_UART_Transmit_IT+0x118>)
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78
 8004a4a:	e002      	b.n	8004a52 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <HAL_UART_Transmit_IT+0x11c>)
 8004a50:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a72:	637a      	str	r2, [r7, #52]	; 0x34
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <HAL_UART_Transmit_IT+0x7e>
 8004a86:	e028      	b.n	8004ada <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d107      	bne.n	8004aa2 <HAL_UART_Transmit_IT+0xce>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <HAL_UART_Transmit_IT+0x120>)
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78
 8004aa0:	e002      	b.n	8004aa8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <HAL_UART_Transmit_IT+0x124>)
 8004aa6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3744      	adds	r7, #68	; 0x44
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	08006427 	.word	0x08006427
 8004af0:	08006347 	.word	0x08006347
 8004af4:	08006285 	.word	0x08006285
 8004af8:	080061cd 	.word	0x080061cd

08004afc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b0ba      	sub	sp, #232	; 0xe8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b26:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11b      	bne.n	8004b70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8377 	beq.w	8005254 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
      }
      return;
 8004b6e:	e371      	b.n	8005254 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8123 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b7e:	4b8d      	ldr	r3, [pc, #564]	; (8004db4 <HAL_UART_IRQHandler+0x2b8>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b8a:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_UART_IRQHandler+0x2bc>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8116 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d011      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xc8>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d011      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xf8>
 8004bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2202      	movs	r2, #2
 8004be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	f043 0204 	orr.w	r2, r3, #4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_UART_IRQHandler+0x128>
 8004c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2204      	movs	r2, #4
 8004c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f043 0202 	orr.w	r2, r3, #2
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c40:	4b5c      	ldr	r3, [pc, #368]	; (8004db4 <HAL_UART_IRQHandler+0x2b8>)
 8004c42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f043 0208 	orr.w	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <HAL_UART_IRQHandler+0x196>
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 82dd 	beq.w	8005258 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d105      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d054      	beq.n	8004da0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 f9ec 	bl	80060d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d146      	bne.n	8004d98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1d9      	bne.n	8004d0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <HAL_UART_IRQHandler+0x2c0>)
 8004d68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fc fb9d 	bl	80014b0 <HAL_DMA_Abort_IT>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d019      	beq.n	8004db0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8e:	e00f      	b.n	8004db0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fa6d 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d96:	e00b      	b.n	8004db0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa69 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	e007      	b.n	8004db0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa65 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004dae:	e253      	b.n	8005258 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	bf00      	nop
    return;
 8004db2:	e251      	b.n	8005258 <HAL_UART_IRQHandler+0x75c>
 8004db4:	10000001 	.word	0x10000001
 8004db8:	04000120 	.word	0x04000120
 8004dbc:	080061a1 	.word	0x080061a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f040 81e7 	bne.w	8005198 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 81e0 	beq.w	8005198 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 81d9 	beq.w	8005198 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2210      	movs	r2, #16
 8004dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	f040 8151 	bne.w	80050a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a96      	ldr	r2, [pc, #600]	; (8005060 <HAL_UART_IRQHandler+0x564>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a93      	ldr	r2, [pc, #588]	; (8005064 <HAL_UART_IRQHandler+0x568>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d061      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a91      	ldr	r2, [pc, #580]	; (8005068 <HAL_UART_IRQHandler+0x56c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d05a      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a8e      	ldr	r2, [pc, #568]	; (800506c <HAL_UART_IRQHandler+0x570>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d053      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a8c      	ldr	r2, [pc, #560]	; (8005070 <HAL_UART_IRQHandler+0x574>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04c      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a89      	ldr	r2, [pc, #548]	; (8005074 <HAL_UART_IRQHandler+0x578>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a87      	ldr	r2, [pc, #540]	; (8005078 <HAL_UART_IRQHandler+0x57c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d03e      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a84      	ldr	r2, [pc, #528]	; (800507c <HAL_UART_IRQHandler+0x580>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d037      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a82      	ldr	r2, [pc, #520]	; (8005080 <HAL_UART_IRQHandler+0x584>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d030      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7f      	ldr	r2, [pc, #508]	; (8005084 <HAL_UART_IRQHandler+0x588>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d029      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7d      	ldr	r2, [pc, #500]	; (8005088 <HAL_UART_IRQHandler+0x58c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7a      	ldr	r2, [pc, #488]	; (800508c <HAL_UART_IRQHandler+0x590>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01b      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a78      	ldr	r2, [pc, #480]	; (8005090 <HAL_UART_IRQHandler+0x594>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d014      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a75      	ldr	r2, [pc, #468]	; (8005094 <HAL_UART_IRQHandler+0x598>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a73      	ldr	r2, [pc, #460]	; (8005098 <HAL_UART_IRQHandler+0x59c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d006      	beq.n	8004ede <HAL_UART_IRQHandler+0x3e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a70      	ldr	r2, [pc, #448]	; (800509c <HAL_UART_IRQHandler+0x5a0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d106      	bne.n	8004eec <HAL_UART_IRQHandler+0x3f0>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	e005      	b.n	8004ef8 <HAL_UART_IRQHandler+0x3fc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 81ab 	beq.w	800525c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f10:	429a      	cmp	r2, r3
 8004f12:	f080 81a3 	bcs.w	800525c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2c:	f000 8087 	beq.w	800503e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1da      	bne.n	8004f30 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e1      	bne.n	8004f7a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e3      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	f023 0310 	bic.w	r3, r3, #16
 8005010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800501e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800502c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e4      	bne.n	8004ffc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005038:	4618      	mov	r0, r3
 800503a:	f7fb ff1b 	bl	8000e74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005050:	b29b      	uxth	r3, r3
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f913 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800505e:	e0fd      	b.n	800525c <HAL_UART_IRQHandler+0x760>
 8005060:	40020010 	.word	0x40020010
 8005064:	40020028 	.word	0x40020028
 8005068:	40020040 	.word	0x40020040
 800506c:	40020058 	.word	0x40020058
 8005070:	40020070 	.word	0x40020070
 8005074:	40020088 	.word	0x40020088
 8005078:	400200a0 	.word	0x400200a0
 800507c:	400200b8 	.word	0x400200b8
 8005080:	40020410 	.word	0x40020410
 8005084:	40020428 	.word	0x40020428
 8005088:	40020440 	.word	0x40020440
 800508c:	40020458 	.word	0x40020458
 8005090:	40020470 	.word	0x40020470
 8005094:	40020488 	.word	0x40020488
 8005098:	400204a0 	.word	0x400204a0
 800509c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80cf 	beq.w	8005260 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80050c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80ca 	beq.w	8005260 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ee:	647b      	str	r3, [r7, #68]	; 0x44
 80050f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e4      	bne.n	80050cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	623b      	str	r3, [r7, #32]
   return(result);
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	4b55      	ldr	r3, [pc, #340]	; (800526c <HAL_UART_IRQHandler+0x770>)
 8005116:	4013      	ands	r3, r2
 8005118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005126:	633a      	str	r2, [r7, #48]	; 0x30
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60fb      	str	r3, [r7, #12]
   return(result);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	617b      	str	r3, [r7, #20]
   return(result);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e4      	bne.n	800514e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800518a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f877 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005196:	e063      	b.n	8005260 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_UART_IRQHandler+0x6c6>
 80051a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 f9d3 	bl	8006566 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051c0:	e051      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d014      	beq.n	80051f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d03a      	beq.n	8005264 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
    }
    return;
 80051f6:	e035      	b.n	8005264 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <HAL_UART_IRQHandler+0x71c>
 8005204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 f97d 	bl	8006510 <UART_EndTransmit_IT>
    return;
 8005216:	e026      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <HAL_UART_IRQHandler+0x73c>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 f9ac 	bl	800658e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005236:	e016      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <HAL_UART_IRQHandler+0x76a>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	2b00      	cmp	r3, #0
 800524a:	da0c      	bge.n	8005266 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 f994 	bl	800657a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005252:	e008      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
      return;
 8005254:	bf00      	nop
 8005256:	e006      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
    return;
 8005258:	bf00      	nop
 800525a:	e004      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
      return;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
      return;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <HAL_UART_IRQHandler+0x76a>
    return;
 8005264:	bf00      	nop
  }
}
 8005266:	37e8      	adds	r7, #232	; 0xe8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	effffffe 	.word	0xeffffffe

08005270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b092      	sub	sp, #72	; 0x48
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4bbe      	ldr	r3, [pc, #760]	; (80055c4 <UART_SetConfig+0x328>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4ab3      	ldr	r2, [pc, #716]	; (80055c8 <UART_SetConfig+0x32c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005304:	4313      	orrs	r3, r2
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	4baf      	ldr	r3, [pc, #700]	; (80055cc <UART_SetConfig+0x330>)
 8005310:	4013      	ands	r3, r2
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005318:	430b      	orrs	r3, r1
 800531a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f023 010f 	bic.w	r1, r3, #15
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4aa6      	ldr	r2, [pc, #664]	; (80055d0 <UART_SetConfig+0x334>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d177      	bne.n	800542c <UART_SetConfig+0x190>
 800533c:	4ba5      	ldr	r3, [pc, #660]	; (80055d4 <UART_SetConfig+0x338>)
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005344:	2b28      	cmp	r3, #40	; 0x28
 8005346:	d86d      	bhi.n	8005424 <UART_SetConfig+0x188>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xb4>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	080053f5 	.word	0x080053f5
 8005354:	08005425 	.word	0x08005425
 8005358:	08005425 	.word	0x08005425
 800535c:	08005425 	.word	0x08005425
 8005360:	08005425 	.word	0x08005425
 8005364:	08005425 	.word	0x08005425
 8005368:	08005425 	.word	0x08005425
 800536c:	08005425 	.word	0x08005425
 8005370:	080053fd 	.word	0x080053fd
 8005374:	08005425 	.word	0x08005425
 8005378:	08005425 	.word	0x08005425
 800537c:	08005425 	.word	0x08005425
 8005380:	08005425 	.word	0x08005425
 8005384:	08005425 	.word	0x08005425
 8005388:	08005425 	.word	0x08005425
 800538c:	08005425 	.word	0x08005425
 8005390:	08005405 	.word	0x08005405
 8005394:	08005425 	.word	0x08005425
 8005398:	08005425 	.word	0x08005425
 800539c:	08005425 	.word	0x08005425
 80053a0:	08005425 	.word	0x08005425
 80053a4:	08005425 	.word	0x08005425
 80053a8:	08005425 	.word	0x08005425
 80053ac:	08005425 	.word	0x08005425
 80053b0:	0800540d 	.word	0x0800540d
 80053b4:	08005425 	.word	0x08005425
 80053b8:	08005425 	.word	0x08005425
 80053bc:	08005425 	.word	0x08005425
 80053c0:	08005425 	.word	0x08005425
 80053c4:	08005425 	.word	0x08005425
 80053c8:	08005425 	.word	0x08005425
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005425 	.word	0x08005425
 80053dc:	08005425 	.word	0x08005425
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005425 	.word	0x08005425
 80053ec:	08005425 	.word	0x08005425
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e222      	b.n	8005842 <UART_SetConfig+0x5a6>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e21e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e21a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e216      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005414:	2320      	movs	r3, #32
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e212      	b.n	8005842 <UART_SetConfig+0x5a6>
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e20e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e20a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a69      	ldr	r2, [pc, #420]	; (80055d8 <UART_SetConfig+0x33c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d130      	bne.n	8005498 <UART_SetConfig+0x1fc>
 8005436:	4b67      	ldr	r3, [pc, #412]	; (80055d4 <UART_SetConfig+0x338>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	2b05      	cmp	r3, #5
 8005440:	d826      	bhi.n	8005490 <UART_SetConfig+0x1f4>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x1ac>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005461 	.word	0x08005461
 800544c:	08005469 	.word	0x08005469
 8005450:	08005471 	.word	0x08005471
 8005454:	08005479 	.word	0x08005479
 8005458:	08005481 	.word	0x08005481
 800545c:	08005489 	.word	0x08005489
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e1ec      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e1e8      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e1e4      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e1e0      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005480:	2320      	movs	r3, #32
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e1dc      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e1d8      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e1d4      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <UART_SetConfig+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d130      	bne.n	8005504 <UART_SetConfig+0x268>
 80054a2:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <UART_SetConfig+0x338>)
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d826      	bhi.n	80054fc <UART_SetConfig+0x260>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x218>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054cd 	.word	0x080054cd
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e1b6      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e1b2      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054dc:	2308      	movs	r3, #8
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e2:	e1ae      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e1aa      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054ec:	2320      	movs	r3, #32
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f2:	e1a6      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054f4:	2340      	movs	r3, #64	; 0x40
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e1a2      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e19e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a35      	ldr	r2, [pc, #212]	; (80055e0 <UART_SetConfig+0x344>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d130      	bne.n	8005570 <UART_SetConfig+0x2d4>
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <UART_SetConfig+0x338>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b05      	cmp	r3, #5
 8005518:	d826      	bhi.n	8005568 <UART_SetConfig+0x2cc>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x284>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005539 	.word	0x08005539
 8005524:	08005541 	.word	0x08005541
 8005528:	08005549 	.word	0x08005549
 800552c:	08005551 	.word	0x08005551
 8005530:	08005559 	.word	0x08005559
 8005534:	08005561 	.word	0x08005561
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553e:	e180      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e17c      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e178      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e174      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e170      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e16c      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e168      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <UART_SetConfig+0x348>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d142      	bne.n	8005600 <UART_SetConfig+0x364>
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <UART_SetConfig+0x338>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b05      	cmp	r3, #5
 8005584:	d838      	bhi.n	80055f8 <UART_SetConfig+0x35c>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x2f0>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055a5 	.word	0x080055a5
 8005590:	080055ad 	.word	0x080055ad
 8005594:	080055b5 	.word	0x080055b5
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055e9 	.word	0x080055e9
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e14a      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e146      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e142      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e13e      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055c4:	cfff69f3 	.word	0xcfff69f3
 80055c8:	58000c00 	.word	0x58000c00
 80055cc:	11fff4ff 	.word	0x11fff4ff
 80055d0:	40011000 	.word	0x40011000
 80055d4:	58024400 	.word	0x58024400
 80055d8:	40004400 	.word	0x40004400
 80055dc:	40004800 	.word	0x40004800
 80055e0:	40004c00 	.word	0x40004c00
 80055e4:	40005000 	.word	0x40005000
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e128      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e124      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e120      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4acb      	ldr	r2, [pc, #812]	; (8005934 <UART_SetConfig+0x698>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d176      	bne.n	80056f8 <UART_SetConfig+0x45c>
 800560a:	4bcb      	ldr	r3, [pc, #812]	; (8005938 <UART_SetConfig+0x69c>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005612:	2b28      	cmp	r3, #40	; 0x28
 8005614:	d86c      	bhi.n	80056f0 <UART_SetConfig+0x454>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0x380>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056f1 	.word	0x080056f1
 8005624:	080056f1 	.word	0x080056f1
 8005628:	080056f1 	.word	0x080056f1
 800562c:	080056f1 	.word	0x080056f1
 8005630:	080056f1 	.word	0x080056f1
 8005634:	080056f1 	.word	0x080056f1
 8005638:	080056f1 	.word	0x080056f1
 800563c:	080056c9 	.word	0x080056c9
 8005640:	080056f1 	.word	0x080056f1
 8005644:	080056f1 	.word	0x080056f1
 8005648:	080056f1 	.word	0x080056f1
 800564c:	080056f1 	.word	0x080056f1
 8005650:	080056f1 	.word	0x080056f1
 8005654:	080056f1 	.word	0x080056f1
 8005658:	080056f1 	.word	0x080056f1
 800565c:	080056d1 	.word	0x080056d1
 8005660:	080056f1 	.word	0x080056f1
 8005664:	080056f1 	.word	0x080056f1
 8005668:	080056f1 	.word	0x080056f1
 800566c:	080056f1 	.word	0x080056f1
 8005670:	080056f1 	.word	0x080056f1
 8005674:	080056f1 	.word	0x080056f1
 8005678:	080056f1 	.word	0x080056f1
 800567c:	080056d9 	.word	0x080056d9
 8005680:	080056f1 	.word	0x080056f1
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080056f1 	.word	0x080056f1
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080056f1 	.word	0x080056f1
 8005694:	080056f1 	.word	0x080056f1
 8005698:	080056f1 	.word	0x080056f1
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056f1 	.word	0x080056f1
 80056ac:	080056f1 	.word	0x080056f1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e0bc      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e0b8      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e0b4      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e0b0      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056e0:	2320      	movs	r3, #32
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e0ac      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056e8:	2340      	movs	r3, #64	; 0x40
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e0a8      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e0a4      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a8f      	ldr	r2, [pc, #572]	; (800593c <UART_SetConfig+0x6a0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d130      	bne.n	8005764 <UART_SetConfig+0x4c8>
 8005702:	4b8d      	ldr	r3, [pc, #564]	; (8005938 <UART_SetConfig+0x69c>)
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b05      	cmp	r3, #5
 800570c:	d826      	bhi.n	800575c <UART_SetConfig+0x4c0>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x478>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005735 	.word	0x08005735
 800571c:	0800573d 	.word	0x0800573d
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e086      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e082      	b.n	8005842 <UART_SetConfig+0x5a6>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e07e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e07a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800574c:	2320      	movs	r3, #32
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005752:	e076      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005754:	2340      	movs	r3, #64	; 0x40
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575a:	e072      	b.n	8005842 <UART_SetConfig+0x5a6>
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005762:	e06e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a75      	ldr	r2, [pc, #468]	; (8005940 <UART_SetConfig+0x6a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d130      	bne.n	80057d0 <UART_SetConfig+0x534>
 800576e:	4b72      	ldr	r3, [pc, #456]	; (8005938 <UART_SetConfig+0x69c>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b05      	cmp	r3, #5
 8005778:	d826      	bhi.n	80057c8 <UART_SetConfig+0x52c>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x4e4>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005799 	.word	0x08005799
 8005784:	080057a1 	.word	0x080057a1
 8005788:	080057a9 	.word	0x080057a9
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057c1 	.word	0x080057c1
 8005798:	2300      	movs	r3, #0
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e050      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e04c      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e048      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e044      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057b8:	2320      	movs	r3, #32
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e040      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057c0:	2340      	movs	r3, #64	; 0x40
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c6:	e03c      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e038      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a5b      	ldr	r2, [pc, #364]	; (8005944 <UART_SetConfig+0x6a8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d130      	bne.n	800583c <UART_SetConfig+0x5a0>
 80057da:	4b57      	ldr	r3, [pc, #348]	; (8005938 <UART_SetConfig+0x69c>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d826      	bhi.n	8005834 <UART_SetConfig+0x598>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x550>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005815 	.word	0x08005815
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e01a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e016      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e012      	b.n	8005842 <UART_SetConfig+0x5a6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e00e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e00a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e006      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e002      	b.n	8005842 <UART_SetConfig+0x5a6>
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <UART_SetConfig+0x6a8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	f040 80f8 	bne.w	8005a3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005852:	2b20      	cmp	r3, #32
 8005854:	dc46      	bgt.n	80058e4 <UART_SetConfig+0x648>
 8005856:	2b02      	cmp	r3, #2
 8005858:	f2c0 8082 	blt.w	8005960 <UART_SetConfig+0x6c4>
 800585c:	3b02      	subs	r3, #2
 800585e:	2b1e      	cmp	r3, #30
 8005860:	d87e      	bhi.n	8005960 <UART_SetConfig+0x6c4>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x5cc>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	080058eb 	.word	0x080058eb
 800586c:	08005961 	.word	0x08005961
 8005870:	080058f3 	.word	0x080058f3
 8005874:	08005961 	.word	0x08005961
 8005878:	08005961 	.word	0x08005961
 800587c:	08005961 	.word	0x08005961
 8005880:	08005903 	.word	0x08005903
 8005884:	08005961 	.word	0x08005961
 8005888:	08005961 	.word	0x08005961
 800588c:	08005961 	.word	0x08005961
 8005890:	08005961 	.word	0x08005961
 8005894:	08005961 	.word	0x08005961
 8005898:	08005961 	.word	0x08005961
 800589c:	08005961 	.word	0x08005961
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005961 	.word	0x08005961
 80058a8:	08005961 	.word	0x08005961
 80058ac:	08005961 	.word	0x08005961
 80058b0:	08005961 	.word	0x08005961
 80058b4:	08005961 	.word	0x08005961
 80058b8:	08005961 	.word	0x08005961
 80058bc:	08005961 	.word	0x08005961
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005961 	.word	0x08005961
 80058cc:	08005961 	.word	0x08005961
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005961 	.word	0x08005961
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005953 	.word	0x08005953
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d037      	beq.n	8005958 <UART_SetConfig+0x6bc>
 80058e8:	e03a      	b.n	8005960 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058ea:	f7fe fc01 	bl	80040f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058f0:	e03c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fc10 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005900:	e034      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005902:	f107 0318 	add.w	r3, r7, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fd5c 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005910:	e02c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <UART_SetConfig+0x69c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <UART_SetConfig+0x69c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	4a07      	ldr	r2, [pc, #28]	; (8005948 <UART_SetConfig+0x6ac>)
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005930:	e01c      	b.n	800596c <UART_SetConfig+0x6d0>
 8005932:	bf00      	nop
 8005934:	40011400 	.word	0x40011400
 8005938:	58024400 	.word	0x58024400
 800593c:	40007800 	.word	0x40007800
 8005940:	40007c00 	.word	0x40007c00
 8005944:	58000c00 	.word	0x58000c00
 8005948:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800594c:	4b9d      	ldr	r3, [pc, #628]	; (8005bc4 <UART_SetConfig+0x928>)
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005950:	e00c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005952:	4b9d      	ldr	r3, [pc, #628]	; (8005bc8 <UART_SetConfig+0x92c>)
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005956:	e009      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800595e:	e005      	b.n	800596c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800596a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 81de 	beq.w	8005d30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	4a94      	ldr	r2, [pc, #592]	; (8005bcc <UART_SetConfig+0x930>)
 800597a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800597e:	461a      	mov	r2, r3
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	fbb3 f3f2 	udiv	r3, r3, r2
 8005986:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	429a      	cmp	r2, r3
 8005996:	d305      	bcc.n	80059a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800599e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059aa:	e1c1      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	2200      	movs	r2, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	60fa      	str	r2, [r7, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	4a84      	ldr	r2, [pc, #528]	; (8005bcc <UART_SetConfig+0x930>)
 80059ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ce:	f7fa fc8b 	bl	80002e8 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	020b      	lsls	r3, r1, #8
 80059e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059e8:	0202      	lsls	r2, r0, #8
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	0849      	lsrs	r1, r1, #1
 80059f0:	2000      	movs	r0, #0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4605      	mov	r5, r0
 80059f6:	eb12 0804 	adds.w	r8, r2, r4
 80059fa:	eb43 0905 	adc.w	r9, r3, r5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	469a      	mov	sl, r3
 8005a06:	4693      	mov	fp, r2
 8005a08:	4652      	mov	r2, sl
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fa fc6a 	bl	80002e8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d308      	bcc.n	8005a36 <UART_SetConfig+0x79a>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2a:	d204      	bcs.n	8005a36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e17c      	b.n	8005d30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a3c:	e178      	b.n	8005d30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a46:	f040 80c5 	bne.w	8005bd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	dc48      	bgt.n	8005ae4 <UART_SetConfig+0x848>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	db7b      	blt.n	8005b4e <UART_SetConfig+0x8b2>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d879      	bhi.n	8005b4e <UART_SetConfig+0x8b2>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x7c4>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005aeb 	.word	0x08005aeb
 8005a64:	08005af3 	.word	0x08005af3
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005b4f 	.word	0x08005b4f
 8005a70:	08005afb 	.word	0x08005afb
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	08005b4f 	.word	0x08005b4f
 8005a7c:	08005b4f 	.word	0x08005b4f
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b4f 	.word	0x08005b4f
 8005a88:	08005b4f 	.word	0x08005b4f
 8005a8c:	08005b4f 	.word	0x08005b4f
 8005a90:	08005b4f 	.word	0x08005b4f
 8005a94:	08005b4f 	.word	0x08005b4f
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005b4f 	.word	0x08005b4f
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b4f 	.word	0x08005b4f
 8005aa8:	08005b4f 	.word	0x08005b4f
 8005aac:	08005b4f 	.word	0x08005b4f
 8005ab0:	08005b4f 	.word	0x08005b4f
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b4f 	.word	0x08005b4f
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d02e      	beq.n	8005b46 <UART_SetConfig+0x8aa>
 8005ae8:	e031      	b.n	8005b4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fd f8cb 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8005aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af0:	e033      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af2:	f7fd f8dd 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 8005af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af8:	e02f      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fb0c 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b08:	e027      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0a:	f107 0318 	add.w	r3, r7, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fc58 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e01f      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <UART_SetConfig+0x934>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <UART_SetConfig+0x934>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <UART_SetConfig+0x928>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b38:	e00f      	b.n	8005b5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b3a:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <UART_SetConfig+0x928>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3e:	e00c      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <UART_SetConfig+0x92c>)
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80e7 	beq.w	8005d30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <UART_SetConfig+0x930>)
 8005b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0x920>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e0b9      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bc2:	e0b5      	b.n	8005d30 <UART_SetConfig+0xa94>
 8005bc4:	03d09000 	.word	0x03d09000
 8005bc8:	003d0900 	.word	0x003d0900
 8005bcc:	08006828 	.word	0x08006828
 8005bd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	dc49      	bgt.n	8005c70 <UART_SetConfig+0x9d4>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	db7c      	blt.n	8005cda <UART_SetConfig+0xa3e>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d87a      	bhi.n	8005cda <UART_SetConfig+0xa3e>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x950>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c77 	.word	0x08005c77
 8005bf0:	08005c7f 	.word	0x08005c7f
 8005bf4:	08005cdb 	.word	0x08005cdb
 8005bf8:	08005cdb 	.word	0x08005cdb
 8005bfc:	08005c87 	.word	0x08005c87
 8005c00:	08005cdb 	.word	0x08005cdb
 8005c04:	08005cdb 	.word	0x08005cdb
 8005c08:	08005cdb 	.word	0x08005cdb
 8005c0c:	08005c97 	.word	0x08005c97
 8005c10:	08005cdb 	.word	0x08005cdb
 8005c14:	08005cdb 	.word	0x08005cdb
 8005c18:	08005cdb 	.word	0x08005cdb
 8005c1c:	08005cdb 	.word	0x08005cdb
 8005c20:	08005cdb 	.word	0x08005cdb
 8005c24:	08005cdb 	.word	0x08005cdb
 8005c28:	08005cdb 	.word	0x08005cdb
 8005c2c:	08005ca7 	.word	0x08005ca7
 8005c30:	08005cdb 	.word	0x08005cdb
 8005c34:	08005cdb 	.word	0x08005cdb
 8005c38:	08005cdb 	.word	0x08005cdb
 8005c3c:	08005cdb 	.word	0x08005cdb
 8005c40:	08005cdb 	.word	0x08005cdb
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005cdb 	.word	0x08005cdb
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005cdb 	.word	0x08005cdb
 8005c58:	08005cdb 	.word	0x08005cdb
 8005c5c:	08005cdb 	.word	0x08005cdb
 8005c60:	08005cdb 	.word	0x08005cdb
 8005c64:	08005cdb 	.word	0x08005cdb
 8005c68:	08005cdb 	.word	0x08005cdb
 8005c6c:	08005ccd 	.word	0x08005ccd
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d02e      	beq.n	8005cd2 <UART_SetConfig+0xa36>
 8005c74:	e031      	b.n	8005cda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c76:	f7fd f805 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8005c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c7c:	e033      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c7e:	f7fd f817 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 8005c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c84:	e02f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fa46 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c94:	e027      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c96:	f107 0318 	add.w	r3, r7, #24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fb92 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca4:	e01f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <UART_SetConfig+0xac0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <UART_SetConfig+0xac0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	4a28      	ldr	r2, [pc, #160]	; (8005d60 <UART_SetConfig+0xac4>)
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc4:	e00f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <UART_SetConfig+0xac4>)
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cca:	e00c      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ccc:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <UART_SetConfig+0xac8>)
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd0:	e009      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd8:	e005      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d021      	beq.n	8005d30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <UART_SetConfig+0xacc>)
 8005cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d909      	bls.n	8005d2a <UART_SetConfig+0xa8e>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d205      	bcs.n	8005d2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e002      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3748      	adds	r7, #72	; 0x48
 8005d54:	46bd      	mov	sp, r7
 8005d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5a:	bf00      	nop
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	08006828 	.word	0x08006828

08005d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6a:	d10a      	bne.n	8005e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b098      	sub	sp, #96	; 0x60
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec0:	f7fa feb0 	bl	8000c24 <HAL_GetTick>
 8005ec4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d12f      	bne.n	8005f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f88e 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f02:	653b      	str	r3, [r7, #80]	; 0x50
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e063      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d149      	bne.n	8005fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f857 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03c      	beq.n	8005fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3758      	adds	r7, #88	; 0x58
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	e049      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601c:	d045      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fa fe01 	bl	8000c24 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x30>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e048      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d031      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d110      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f839 	bl	80060d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2208      	movs	r2, #8
 8006066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e029      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006084:	d111      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f81f 	bl	80060d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e00f      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4013      	ands	r3, r2
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d0a6      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b095      	sub	sp, #84	; 0x54
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
 80060fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e6      	bne.n	80060dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	61fb      	str	r3, [r7, #28]
   return(result);
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <UART_EndRxTransfer+0xc8>)
 8006122:	4013      	ands	r3, r2
 8006124:	64bb      	str	r3, [r7, #72]	; 0x48
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800612e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d118      	bne.n	800617c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60bb      	str	r3, [r7, #8]
   return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0310 	bic.w	r3, r3, #16
 800615e:	647b      	str	r3, [r7, #68]	; 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006190:	bf00      	nop
 8006192:	3754      	adds	r7, #84	; 0x54
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	effffffe 	.word	0xeffffffe

080061a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff f856 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b08f      	sub	sp, #60	; 0x3c
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	2b21      	cmp	r3, #33	; 0x21
 80061dc:	d14c      	bne.n	8006278 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d132      	bne.n	8006250 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800620e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	60bb      	str	r3, [r7, #8]
   return(result);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6979      	ldr	r1, [r7, #20]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e6      	bne.n	800621c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800624e:	e013      	b.n	8006278 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006278:	bf00      	nop
 800627a:	373c      	adds	r7, #60	; 0x3c
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b091      	sub	sp, #68	; 0x44
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	2b21      	cmp	r3, #33	; 0x21
 8006294:	d151      	bne.n	800633a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d132      	bne.n	8006308 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	623b      	str	r3, [r7, #32]
   return(result);
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
 80062c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e6      	bne.n	80062d4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006306:	e018      	b.n	800633a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800631c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800633a:	bf00      	nop
 800633c:	3744      	adds	r7, #68	; 0x44
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006346:	b480      	push	{r7}
 8006348:	b091      	sub	sp, #68	; 0x44
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	2b21      	cmp	r3, #33	; 0x21
 8006356:	d160      	bne.n	800641a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800635e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006360:	e057      	b.n	8006412 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d133      	bne.n	80063d6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	623b      	str	r3, [r7, #32]
   return(result);
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638e:	633a      	str	r2, [r7, #48]	; 0x30
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	69b9      	ldr	r1, [r7, #24]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	617b      	str	r3, [r7, #20]
   return(result);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80063d4:	e021      	b.n	800641a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d013      	beq.n	800640c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800640c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800640e:	3b01      	subs	r3, #1
 8006410:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006412:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1a4      	bne.n	8006362 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006418:	e7ff      	b.n	800641a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800641a:	bf00      	nop
 800641c:	3744      	adds	r7, #68	; 0x44
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006426:	b480      	push	{r7}
 8006428:	b091      	sub	sp, #68	; 0x44
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	2b21      	cmp	r3, #33	; 0x21
 8006436:	d165      	bne.n	8006504 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800643e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006440:	e05c      	b.n	80064fc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d133      	bne.n	80064b6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	61fb      	str	r3, [r7, #28]
   return(result);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800646e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e5      	bne.n	800644e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6979      	ldr	r1, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	613b      	str	r3, [r7, #16]
   return(result);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80064b4:	e026      	b.n	8006504 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d018      	beq.n	80064f6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064de:	1c9a      	adds	r2, r3, #2
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80064f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80064f8:	3b01      	subs	r3, #1
 80064fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80064fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d19f      	bne.n	8006442 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006502:	e7ff      	b.n	8006504 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006504:	bf00      	nop
 8006506:	3744      	adds	r7, #68	; 0x44
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	60bb      	str	r3, [r7, #8]
   return(result);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	613b      	str	r3, [r7, #16]
   return(result);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fa f937 	bl	80007cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e027      	b.n	8006608 <HAL_UARTEx_DisableFifoMode+0x66>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e02d      	b.n	8006688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	; 0x24
 8006638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f84f 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e02d      	b.n	8006704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f811 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800672c:	e031      	b.n	8006792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800672e:	2310      	movs	r3, #16
 8006730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006732:	2310      	movs	r3, #16
 8006734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0e5b      	lsrs	r3, r3, #25
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	0f5b      	lsrs	r3, r3, #29
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	7b3a      	ldrb	r2, [r7, #12]
 800675a:	4911      	ldr	r1, [pc, #68]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800675c:	5c8a      	ldrb	r2, [r1, r2]
 800675e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006762:	7b3a      	ldrb	r2, [r7, #12]
 8006764:	490f      	ldr	r1, [pc, #60]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006768:	fb93 f3f2 	sdiv	r3, r3, r2
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	7b7a      	ldrb	r2, [r7, #13]
 8006778:	4909      	ldr	r1, [pc, #36]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800677a:	5c8a      	ldrb	r2, [r1, r2]
 800677c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	4908      	ldr	r1, [pc, #32]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006786:	fb93 f3f2 	sdiv	r3, r3, r2
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	08006840 	.word	0x08006840
 80067a4:	08006848 	.word	0x08006848

080067a8 <__libc_init_array>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	4d0d      	ldr	r5, [pc, #52]	; (80067e0 <__libc_init_array+0x38>)
 80067ac:	4c0d      	ldr	r4, [pc, #52]	; (80067e4 <__libc_init_array+0x3c>)
 80067ae:	1b64      	subs	r4, r4, r5
 80067b0:	10a4      	asrs	r4, r4, #2
 80067b2:	2600      	movs	r6, #0
 80067b4:	42a6      	cmp	r6, r4
 80067b6:	d109      	bne.n	80067cc <__libc_init_array+0x24>
 80067b8:	4d0b      	ldr	r5, [pc, #44]	; (80067e8 <__libc_init_array+0x40>)
 80067ba:	4c0c      	ldr	r4, [pc, #48]	; (80067ec <__libc_init_array+0x44>)
 80067bc:	f000 f820 	bl	8006800 <_init>
 80067c0:	1b64      	subs	r4, r4, r5
 80067c2:	10a4      	asrs	r4, r4, #2
 80067c4:	2600      	movs	r6, #0
 80067c6:	42a6      	cmp	r6, r4
 80067c8:	d105      	bne.n	80067d6 <__libc_init_array+0x2e>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d0:	4798      	blx	r3
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7ee      	b.n	80067b4 <__libc_init_array+0xc>
 80067d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067da:	4798      	blx	r3
 80067dc:	3601      	adds	r6, #1
 80067de:	e7f2      	b.n	80067c6 <__libc_init_array+0x1e>
 80067e0:	08006858 	.word	0x08006858
 80067e4:	08006858 	.word	0x08006858
 80067e8:	08006858 	.word	0x08006858
 80067ec:	0800685c 	.word	0x0800685c

080067f0 <memset>:
 80067f0:	4402      	add	r2, r0
 80067f2:	4603      	mov	r3, r0
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d100      	bne.n	80067fa <memset+0xa>
 80067f8:	4770      	bx	lr
 80067fa:	f803 1b01 	strb.w	r1, [r3], #1
 80067fe:	e7f9      	b.n	80067f4 <memset+0x4>

08006800 <_init>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr

0800680c <_fini>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr
