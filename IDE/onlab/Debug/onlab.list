
onlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b614  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800b8b8  0800b8b8  0001b8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800be00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000328  240001ec  0800bfec  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000514  0800bfec  00020514  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a31  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002922  00000000  00000000  00036c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  00039570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000df8  00000000  00000000  0003a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000377e1  00000000  00000000  0003b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001767e  00000000  00000000  00072a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b5ff  00000000  00000000  0008a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e56b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e2c  00000000  00000000  001e5708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b89c 	.word	0x0800b89c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800b89c 	.word	0x0800b89c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <__NVIC_SystemReset+0x24>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006fa:	4904      	ldr	r1, [pc, #16]	; (800070c <__NVIC_SystemReset+0x24>)
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_SystemReset+0x28>)
 80006fe:	4313      	orrs	r3, r2
 8000700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000702:	f3bf 8f4f 	dsb	sy
}
 8000706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <__NVIC_SystemReset+0x20>
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	05fa0004 	.word	0x05fa0004

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ffac 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 ff71 	bl	8001644 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f87d 	bl	8000860 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);	// Configure SysTick to IRQ every millisecond
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <main+0xf0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a38      	ldr	r2, [pc, #224]	; (800084c <main+0xf4>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	099b      	lsrs	r3, r3, #6
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffce 	bl	8000714 <SysTick_Config>
  // Set IRQ priorities 0 is highest priority
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000780:	f001 f8fd 	bl	800197e <HAL_NVIC_SetPriority>
  // Incoming data always need to be handles -> highest priority!
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2026      	movs	r0, #38	; 0x26
 800078a:	f001 f8f8 	bl	800197e <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f96d 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f90f 	bl	80009b4 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8000796:	f000 f8cd 	bl	8000934 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  // Initialise Sensor
  bool ok = sht3x_init(&sht31);
 800079a:	482d      	ldr	r0, [pc, #180]	; (8000850 <main+0xf8>)
 800079c:	f000 fbda 	bl	8000f54 <sht3x_init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71bb      	strb	r3, [r7, #6]
  if(!ok)
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	f083 0301 	eor.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <main+0x5c>
	  return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e045      	b.n	8000840 <main+0xe8>
  ok = sht3x_set_header_enable(&sht31, false);
 80007b4:	2100      	movs	r1, #0
 80007b6:	4826      	ldr	r0, [pc, #152]	; (8000850 <main+0xf8>)
 80007b8:	f000 fc8a 	bl	80010d0 <sht3x_set_header_enable>
 80007bc:	4603      	mov	r3, r0
 80007be:	71bb      	strb	r3, [r7, #6]
  if(!ok)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	f083 0301 	eor.w	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <main+0x78>
  	  return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e037      	b.n	8000840 <main+0xe8>
  HAL_Delay(1000);	// Wait for Sensor to properly setup
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f000 ffc8 	bl	8001768 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Always store previous state
  enum state prev_state;
  // Counts how many times has the program been in the same state consequently
  uint8_t error_counter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	71fb      	strb	r3, [r7, #7]
  while (1) {
	  // Consider being stuck in same state 5 times as error
	  if(error_counter == 5)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d102      	bne.n	80007e8 <main+0x90>
		  current_state = STATE_ERROR;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <main+0xfc>)
 80007e4:	2206      	movs	r2, #6
 80007e6:	701a      	strb	r2, [r3, #0]
	  prev_state = current_state;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <main+0xfc>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	717b      	strb	r3, [r7, #5]
	  // Handle algorithm for current state and save the new state
	  current_state = FSM(current_state);
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <main+0xfc>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9de 	bl	8000bb4 <FSM>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <main+0xfc>)
 80007fe:	701a      	strb	r2, [r3, #0]
	  // New program state, reset ESP message buffer to prevent overflow and
	  // mixing of responses
	  if(prev_state != current_state){
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <main+0xfc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	797a      	ldrb	r2, [r7, #5]
 8000806:	429a      	cmp	r2, r3
 8000808:	d00b      	beq.n	8000822 <main+0xca>
		  memset(received_message, '\0', strlen((char*) received_message));
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <main+0x100>)
 800080c:	f7ff fd68 	bl	80002e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	4810      	ldr	r0, [pc, #64]	; (8000858 <main+0x100>)
 8000818:	f008 f9f4 	bl	8008c04 <memset>
		  error_counter = 0;	// REset error counter
 800081c:	2300      	movs	r3, #0
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	e002      	b.n	8000828 <main+0xd0>
	  }
	  else
		  error_counter++;	// State hasn't changed
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
	  // If ESP is busy wait 1 second and try again
	  if(strstr((char*)received_message, "busy"))
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <main+0x104>)
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <main+0x100>)
 800082c:	f008 ffd1 	bl	80097d2 <strstr>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0d2      	beq.n	80007dc <main+0x84>
		  HAL_Delay(1000);
 8000836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083a:	f000 ff95 	bl	8001768 <HAL_Delay>
	  if(error_counter == 5)
 800083e:	e7cd      	b.n	80007dc <main+0x84>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  return 0;
  /* USER CODE END 3 */
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2400000c 	.word	0x2400000c
 800084c:	10624dd3 	.word	0x10624dd3
 8000850:	24000004 	.word	0x24000004
 8000854:	24000000 	.word	0x24000000
 8000858:	240002f4 	.word	0x240002f4
 800085c:	0800b8b8 	.word	0x0800b8b8

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09c      	sub	sp, #112	; 0x70
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	224c      	movs	r2, #76	; 0x4c
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f008 f9c8 	bl	8008c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2220      	movs	r2, #32
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f008 f9c2 	bl	8008c04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000880:	2002      	movs	r0, #2
 8000882:	f002 fef1 	bl	8003668 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <SystemClock_Config+0xcc>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	4a27      	ldr	r2, [pc, #156]	; (800092c <SystemClock_Config+0xcc>)
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemClock_Config+0xcc>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SystemClock_Config+0xd0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <SystemClock_Config+0xd0>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <SystemClock_Config+0xd0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008bc:	bf00      	nop
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <SystemClock_Config+0xd0>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ca:	d1f8      	bne.n	80008be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fefb 	bl	80036dc <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008ec:	f000 fabc 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	233f      	movs	r3, #63	; 0x3f
 80008f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fb3b 	bl	8003f90 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000920:	f000 faa2 	bl	8000e68 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3770      	adds	r7, #112	; 0x70
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C4_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_I2C4_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_I2C4_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_I2C4_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C4_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C4_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000970:	f001 ff68 	bl	8002844 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 fa75 	bl	8000e68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000982:	f002 fdd9 	bl	8003538 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 fa6c 	bl	8000e68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C4_Init+0x74>)
 8000994:	f002 fe1b 	bl	80035ce <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fa63 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000208 	.word	0x24000208
 80009ac:	58001c00 	.word	0x58001c00
 80009b0:	00707cbb 	.word	0x00707cbb

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <MX_USART2_UART_Init+0xb0>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 80009fe:	f005 fc7f 	bl	8006300 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fa2e 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a10:	f007 ffd3 	bl	80089ba <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 fa25 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a22:	f008 f808 	bl	8008a36 <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 fa1c 	bl	8000e68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a32:	f007 ff89 	bl	8008948 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 fa14 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4909      	ldr	r1, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0xb4>)
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a46:	f005 fd39 	bl	80064bc <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <MX_USART2_UART_Init+0xac>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f042 0220 	orr.w	r2, r2, #32
 8000a58:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2400025c 	.word	0x2400025c
 8000a64:	40004400 	.word	0x40004400
 8000a68:	240002f0 	.word	0x240002f0

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x108>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RST_Pin|GP0_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000b00:	481d      	ldr	r0, [pc, #116]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000b02:	f001 fe85 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GP2_Pin|CHE_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2118      	movs	r1, #24
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <MX_GPIO_Init+0x110>)
 8000b0c:	f001 fe80 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x114>)
 8000b2e:	f001 fcbf 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin GP0_Pin */
  GPIO_InitStruct.Pin = RST_Pin|GP0_Pin;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000b4c:	f001 fcb0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP2_Pin CHE_Pin */
  GPIO_InitStruct.Pin = GP2_Pin|CHE_Pin;
 8000b50:	2318      	movs	r3, #24
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_GPIO_Init+0x110>)
 8000b68:	f001 fca2 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58021c00 	.word	0x58021c00
 8000b7c:	58020000 	.word	0x58020000
 8000b80:	58020400 	.word	0x58020400

08000b84 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	// Store new data in received_message buffer
	strcat((char*)received_message, (char*)&rx_buffer);
 8000b8c:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <HAL_UART_RxCpltCallback+0x24>)
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <HAL_UART_RxCpltCallback+0x28>)
 8000b90:	f008 fe10 	bl	80097b4 <strcat>
	// Re-enable IRQ
	HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <HAL_UART_RxCpltCallback+0x24>)
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_RxCpltCallback+0x2c>)
 8000b9a:	f005 fc8f 	bl	80064bc <HAL_UART_Receive_IT>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240002f0 	.word	0x240002f0
 8000bac:	240002f4 	.word	0x240002f4
 8000bb0:	2400025c 	.word	0x2400025c

08000bb4 <FSM>:

enum state FSM(enum state current_state){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	char data_string[6];
	switch (current_state) {
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	f200 80a6 	bhi.w	8000d12 <FSM+0x15e>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <FSM+0x18>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c29 	.word	0x08000c29
 8000bd0:	08000c51 	.word	0x08000c51
 8000bd4:	08000c79 	.word	0x08000c79
 8000bd8:	08000cbb 	.word	0x08000cbb
 8000bdc:	08000c01 	.word	0x08000c01
 8000be0:	08000bed 	.word	0x08000bed
 8000be4:	08000cfd 	.word	0x08000cfd
 8000be8:	08000c17 	.word	0x08000c17
		/* The starting state. Wait until ESP sends ready string to signal
		 * it is operating. Else signal possible error.*/
		case STATE_READY:
			if(AT_halt_until("ready\r\n"))
 8000bec:	484b      	ldr	r0, [pc, #300]	; (8000d1c <FSM+0x168>)
 8000bee:	f000 f8ab 	bl	8000d48 <AT_halt_until>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <FSM+0x48>
				return STATE_SEND_ATE0;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e08b      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	e089      	b.n	8000d14 <FSM+0x160>
		/* After ESP startup disable echo mode on ESP. */
		case STATE_SEND_ATE0:
			if(send_string("ATE0\r\n", "OK\r\n"))
 8000c00:	4947      	ldr	r1, [pc, #284]	; (8000d20 <FSM+0x16c>)
 8000c02:	4848      	ldr	r0, [pc, #288]	; (8000d24 <FSM+0x170>)
 8000c04:	f000 f8f4 	bl	8000df0 <send_string>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <FSM+0x5e>
				return STATE_CONFIG;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	e080      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000c12:	2306      	movs	r3, #6
 8000c14:	e07e      	b.n	8000d14 <FSM+0x160>
		/* Configure ESP so it is able to connect to wifi and server. */
		case STATE_CONFIG:
			if(AT_config())
 8000c16:	f000 f8c5 	bl	8000da4 <AT_config>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <FSM+0x70>
				return STATE_CONNECT_WIFI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e077      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000c24:	2306      	movs	r3, #6
 8000c26:	e075      	b.n	8000d14 <FSM+0x160>
		/* Try and connect to local wifi. Tries two times! */
		case STATE_CONNECT_WIFI:
			if(send_string(WIFI_CONNECT, "OK\r\n"))
 8000c28:	493d      	ldr	r1, [pc, #244]	; (8000d20 <FSM+0x16c>)
 8000c2a:	483f      	ldr	r0, [pc, #252]	; (8000d28 <FSM+0x174>)
 8000c2c:	f000 f8e0 	bl	8000df0 <send_string>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <FSM+0x86>
				return STATE_CONNECT_SERVER;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e06c      	b.n	8000d14 <FSM+0x160>
			else if(send_string(WIFI_CONNECT, "OK\r\n"))
 8000c3a:	4939      	ldr	r1, [pc, #228]	; (8000d20 <FSM+0x16c>)
 8000c3c:	483a      	ldr	r0, [pc, #232]	; (8000d28 <FSM+0x174>)
 8000c3e:	f000 f8d7 	bl	8000df0 <send_string>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <FSM+0x98>
				return STATE_CONNECT_SERVER;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e063      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e061      	b.n	8000d14 <FSM+0x160>
		/* Try and connect to server. Tries two times! */
		case STATE_CONNECT_SERVER:
			if(send_string(SERVER_CONNECT, "OK\r\n"))
 8000c50:	4933      	ldr	r1, [pc, #204]	; (8000d20 <FSM+0x16c>)
 8000c52:	4836      	ldr	r0, [pc, #216]	; (8000d2c <FSM+0x178>)
 8000c54:	f000 f8cc 	bl	8000df0 <send_string>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <FSM+0xae>
				return STATE_SEND_CIPSEND;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e058      	b.n	8000d14 <FSM+0x160>
			else if(send_string(SERVER_CONNECT, "OK\r\n"))
 8000c62:	492f      	ldr	r1, [pc, #188]	; (8000d20 <FSM+0x16c>)
 8000c64:	4831      	ldr	r0, [pc, #196]	; (8000d2c <FSM+0x178>)
 8000c66:	f000 f8c3 	bl	8000df0 <send_string>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <FSM+0xc0>
				return STATE_SEND_CIPSEND;
 8000c70:	2302      	movs	r3, #2
 8000c72:	e04f      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000c74:	2306      	movs	r3, #6
 8000c76:	e04d      	b.n	8000d14 <FSM+0x160>
		 * of data. Assumes ambient temperature is greater than 10 and lower than 99.95
		 * as it will always result in 5 bytes of data to be sent. Server uses 'q' as
		 * data end character, so xx.xq is always 5 bytes. */
		case STATE_SEND_CIPSEND:
			// If can not receive data presume Sensor has been disconnected
			if(!sht3x_read_temperature_and_humidity(&sht31, &temperature, &humidity))
 8000c78:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <FSM+0x17c>)
 8000c7a:	492e      	ldr	r1, [pc, #184]	; (8000d34 <FSM+0x180>)
 8000c7c:	482e      	ldr	r0, [pc, #184]	; (8000d38 <FSM+0x184>)
 8000c7e:	f000 f9a9 	bl	8000fd4 <sht3x_read_temperature_and_humidity>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <FSM+0xde>
				return STATE_ERROR;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	e040      	b.n	8000d14 <FSM+0x160>
			if(send_string("AT+CIPSEND=5\r\n", "OK\r\n"))
 8000c92:	4923      	ldr	r1, [pc, #140]	; (8000d20 <FSM+0x16c>)
 8000c94:	4829      	ldr	r0, [pc, #164]	; (8000d3c <FSM+0x188>)
 8000c96:	f000 f8ab 	bl	8000df0 <send_string>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <FSM+0xf0>
				return STATE_SEND_DATA;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e037      	b.n	8000d14 <FSM+0x160>
			else if(send_string("AT+CIPSEND=5\r\n", "OK\r\n"))
 8000ca4:	491e      	ldr	r1, [pc, #120]	; (8000d20 <FSM+0x16c>)
 8000ca6:	4825      	ldr	r0, [pc, #148]	; (8000d3c <FSM+0x188>)
 8000ca8:	f000 f8a2 	bl	8000df0 <send_string>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <FSM+0x102>
				return STATE_SEND_DATA;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e02e      	b.n	8000d14 <FSM+0x160>
			return STATE_ERROR;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e02c      	b.n	8000d14 <FSM+0x160>
		/* Try and send temperature data as characters.Assumes ambient temperature
		 * is greater than 10 and lower than 99.95. This is and infinite cycle in case
		 * of continuous failure to send data. main function handles this case. */
		case STATE_SEND_DATA:
			snprintf(data_string, 5, "%.1f", temperature);
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <FSM+0x180>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	ed8d 7b00 	vstr	d7, [sp]
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <FSM+0x18c>)
 8000cce:	2105      	movs	r1, #5
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fd3b 	bl	800974c <sniprintf>
			data_string[4] = 'q';	// End char
 8000cd6:	2371      	movs	r3, #113	; 0x71
 8000cd8:	733b      	strb	r3, [r7, #12]
			if(send_string(data_string, "OK\r\n")){
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4910      	ldr	r1, [pc, #64]	; (8000d20 <FSM+0x16c>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f885 	bl	8000df0 <send_string>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <FSM+0x144>
				HAL_Delay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f000 fd3a 	bl	8001768 <HAL_Delay>
				return STATE_SEND_CIPSEND;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e00d      	b.n	8000d14 <FSM+0x160>
			}
			else
				return STATE_SEND_DATA;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e00b      	b.n	8000d14 <FSM+0x160>
		/* An error has occurred somewhere during running. Try to restore ESP.
		 * If this fails restart MCU. */
		case STATE_ERROR:
			if(send_string("AT+RESTORE\r\n", "ready\r\n"))
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <FSM+0x168>)
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <FSM+0x190>)
 8000d00:	f000 f876 	bl	8000df0 <send_string>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <FSM+0x15a>
				return STATE_CONFIG;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	e002      	b.n	8000d14 <FSM+0x160>
			else
				NVIC_SystemReset();
 8000d0e:	f7ff fceb 	bl	80006e8 <__NVIC_SystemReset>
		}
	return current_state;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0800b8c0 	.word	0x0800b8c0
 8000d20:	0800b8c8 	.word	0x0800b8c8
 8000d24:	0800b8d0 	.word	0x0800b8d0
 8000d28:	0800b8d8 	.word	0x0800b8d8
 8000d2c:	0800b908 	.word	0x0800b908
 8000d30:	240004f4 	.word	0x240004f4
 8000d34:	240004f8 	.word	0x240004f8
 8000d38:	24000004 	.word	0x24000004
 8000d3c:	0800b934 	.word	0x0800b934
 8000d40:	0800b944 	.word	0x0800b944
 8000d44:	0800b94c 	.word	0x0800b94c

08000d48 <AT_halt_until>:


bool AT_halt_until(const char *array){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	uint32_t start_time = uwTick;	// Save SysTick time upon entry
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <AT_halt_until+0x50>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
	  while(1){
		  if((uwTick - start_time) > 5000)// 5 seconds has passed
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <AT_halt_until+0x50>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d901      	bls.n	8000d6a <AT_halt_until+0x22>
			  return false;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e012      	b.n	8000d90 <AT_halt_until+0x48>
		  // If ESP is busy wait 1 second
		  if(strstr((char*)received_message, "busy") != NULL)
 8000d6a:	490c      	ldr	r1, [pc, #48]	; (8000d9c <AT_halt_until+0x54>)
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <AT_halt_until+0x58>)
 8000d6e:	f008 fd30 	bl	80097d2 <strstr>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <AT_halt_until+0x38>
			  HAL_Delay(1000);
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f000 fcf4 	bl	8001768 <HAL_Delay>
		  if(strstr((char*)received_message, array) != NULL)
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <AT_halt_until+0x58>)
 8000d84:	f008 fd25 	bl	80097d2 <strstr>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0e3      	beq.n	8000d56 <AT_halt_until+0xe>
			  return true;
 8000d8e:	2301      	movs	r3, #1

	  }
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000500 	.word	0x24000500
 8000d9c:	0800b8b8 	.word	0x0800b8b8
 8000da0:	240002f4 	.word	0x240002f4

08000da4 <AT_config>:

bool AT_config(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	if(send_string("AT+CIPMODE=0\r\n", "OK\r\n")){
 8000da8:	490d      	ldr	r1, [pc, #52]	; (8000de0 <AT_config+0x3c>)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <AT_config+0x40>)
 8000dac:	f000 f820 	bl	8000df0 <send_string>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d011      	beq.n	8000dda <AT_config+0x36>
		memset(received_message, '\0', strlen((char*)received_message));
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <AT_config+0x44>)
 8000db8:	f7ff fa92 	bl	80002e0 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <AT_config+0x44>)
 8000dc4:	f007 ff1e 	bl	8008c04 <memset>
		if(send_string("AT+CWMODE=1\r\n", "OK\r\n"))
 8000dc8:	4905      	ldr	r1, [pc, #20]	; (8000de0 <AT_config+0x3c>)
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <AT_config+0x48>)
 8000dcc:	f000 f810 	bl	8000df0 <send_string>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <AT_config+0x36>
			return true;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <AT_config+0x38>
	}
	return false;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	0800b8c8 	.word	0x0800b8c8
 8000de4:	0800b95c 	.word	0x0800b95c
 8000de8:	240002f4 	.word	0x240002f4
 8000dec:	0800b96c 	.word	0x0800b96c

08000df0 <send_string>:


bool send_string(const char *str, const char *resp) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	if(HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_UART_TIMEOUT_VALUE) != HAL_OK){
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa70 	bl	80002e0 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4816      	ldr	r0, [pc, #88]	; (8000e64 <send_string+0x74>)
 8000e0c:	f005 fac8 	bl	80063a0 <HAL_UART_Transmit>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01d      	beq.n	8000e52 <send_string+0x62>
		for(int i = 0; i < 3; i ++){ // In case of failure retry 3 times
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e015      	b.n	8000e48 <send_string+0x58>
			if(HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_UART_TIMEOUT_VALUE) == HAL_OK)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fa5f 	bl	80002e0 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <send_string+0x74>)
 8000e2e:	f005 fab7 	bl	80063a0 <HAL_UART_Transmit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <send_string+0x60>
				break;
			else if(i == 2)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d101      	bne.n	8000e42 <send_string+0x52>
				return false;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e00b      	b.n	8000e5a <send_string+0x6a>
		for(int i = 0; i < 3; i ++){ // In case of failure retry 3 times
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	dde6      	ble.n	8000e1c <send_string+0x2c>
 8000e4e:	e000      	b.n	8000e52 <send_string+0x62>
				break;
 8000e50:	bf00      	nop
		}
	}
	return AT_halt_until(resp);
 8000e52:	6838      	ldr	r0, [r7, #0]
 8000e54:	f7ff ff78 	bl	8000d48 <AT_halt_until>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2400025c 	.word	0x2400025c

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>

08000e72 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000e7c:	23ff      	movs	r3, #255	; 0xff
 8000e7e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	e020      	b.n	8000ec8 <calculate_crc+0x56>
		crc ^= data[i];
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	4053      	eors	r3, r2
 8000e92:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e010      	b.n	8000ebc <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	da06      	bge.n	8000eb0 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000eac:	75fb      	strb	r3, [r7, #23]
 8000eae:	e002      	b.n	8000eb6 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b07      	cmp	r3, #7
 8000ec0:	d9eb      	bls.n	8000e9a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3da      	bcc.n	8000e86 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af02      	add	r7, sp, #8
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	733b      	strb	r3, [r7, #12]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b299      	uxth	r1, r3
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	231e      	movs	r3, #30
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f001 fd28 	bl	8002964 <HAL_I2C_Master_Transmit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <sht3x_send_command+0x42>
	}

	return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b29b      	uxth	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <sht3x_init+0x1e>
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <sht3x_init+0x74>)
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <sht3x_init+0x78>)
 8000f6a:	2138      	movs	r1, #56	; 0x38
 8000f6c:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <sht3x_init+0x7c>)
 8000f6e:	f007 fdef 	bl	8008b50 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	231e      	movs	r3, #30
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2303      	movs	r3, #3
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000f92:	f001 fed1 	bl	8002d38 <HAL_I2C_Mem_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e00e      	b.n	8000fbe <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff63 	bl	8000e72 <calculate_crc>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d001      	beq.n	8000fbc <sht3x_init+0x68>
		return false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e000      	b.n	8000fbe <sht3x_init+0x6a>
	}

	return true;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800b97c 	.word	0x0800b97c
 8000fcc:	0800b9d0 	.word	0x0800b9d0
 8000fd0:	0800b9bc 	.word	0x0800b9bc

08000fd4 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000fe0:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff ff7a 	bl	8000ede <sht3x_send_command>

	HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fbbc 	bl	8001768 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	f107 0214 	add.w	r2, r7, #20
 8001000:	231e      	movs	r3, #30
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2306      	movs	r3, #6
 8001006:	f001 fda1 	bl	8002b4c <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001010:	2300      	movs	r3, #0
 8001012:	e050      	b.n	80010b6 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2102      	movs	r1, #2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff29 	bl	8000e72 <calculate_crc>
 8001020:	4603      	mov	r3, r0
 8001022:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	3303      	adds	r3, #3
 800102a:	2102      	movs	r1, #2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff20 	bl	8000e72 <calculate_crc>
 8001032:	4603      	mov	r3, r0
 8001034:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	7ffa      	ldrb	r2, [r7, #31]
 800103a:	429a      	cmp	r2, r3
 800103c:	d103      	bne.n	8001046 <sht3x_read_temperature_and_humidity+0x72>
 800103e:	7e7b      	ldrb	r3, [r7, #25]
 8001040:	7fba      	ldrb	r2, [r7, #30]
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001046:	2300      	movs	r3, #0
 8001048:	e035      	b.n	80010b6 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 800104a:	7d3b      	ldrb	r3, [r7, #20]
 800104c:	7d7a      	ldrb	r2, [r7, #21]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff69 	bl	8000f28 <uint8_to_uint16>
 8001056:	4603      	mov	r3, r0
 8001058:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	7e3a      	ldrb	r2, [r7, #24]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff61 	bl	8000f28 <uint8_to_uint16>
 8001066:	4603      	mov	r3, r0
 8001068:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800106a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001076:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010c0 <sht3x_read_temperature_and_humidity+0xec>
 800107a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800107e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80010c4 <sht3x_read_temperature_and_humidity+0xf0>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010c8 <sht3x_read_temperature_and_humidity+0xf4>
 800108a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8001094:	8b7b      	ldrh	r3, [r7, #26]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010cc <sht3x_read_temperature_and_humidity+0xf8>
 80010a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80010c4 <sht3x_read_temperature_and_humidity+0xf0>
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edc3 7a00 	vstr	s15, [r3]

	return true;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	432f0000 	.word	0x432f0000
 80010c4:	477fff00 	.word	0x477fff00
 80010c8:	42340000 	.word	0x42340000
 80010cc:	42c80000 	.word	0x42c80000

080010d0 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	if (enable) {
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <sht3x_set_header_enable+0x20>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 80010e2:	f243 016d 	movw	r1, #12397	; 0x306d
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fef9 	bl	8000ede <sht3x_send_command>
 80010ec:	4603      	mov	r3, r0
 80010ee:	e005      	b.n	80010fc <sht3x_set_header_enable+0x2c>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 80010f0:	f243 0166 	movw	r1, #12390	; 0x3066
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fef2 	bl	8000ede <sht3x_send_command>
 80010fa:	4603      	mov	r3, r0
	}
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MspInit+0x30>)
 800110c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x30>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x30>)
 800111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58024400 	.word	0x58024400

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ba      	sub	sp, #232	; 0xe8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22c0      	movs	r2, #192	; 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fd53 	bl	8008c04 <memset>
  if(hi2c->Instance==I2C4)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a27      	ldr	r2, [pc, #156]	; (8001200 <HAL_I2C_MspInit+0xc8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d146      	bne.n	80011f6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001168:	f04f 0210 	mov.w	r2, #16
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa92 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800118a:	f7ff fe6d 	bl	8000e68 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = I2C_Clock_Pin|I2C_Data_Pin;
 80011ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <HAL_I2C_MspInit+0xd0>)
 80011d4:	f001 f96c 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 80011da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_I2C_MspInit+0xcc>)
 80011ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	37e8      	adds	r7, #232	; 0xe8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58001c00 	.word	0x58001c00
 8001204:	58024400 	.word	0x58024400
 8001208:	58020c00 	.word	0x58020c00

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	; 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22c0      	movs	r2, #192	; 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f007 fce9 	bl	8008c04 <memset>
  if(huart->Instance==USART2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <HAL_UART_MspInit+0xd4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d14d      	bne.n	80012d8 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800123c:	f04f 0202 	mov.w	r2, #2
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fa28 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff fe03 	bl	8000e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0xd8>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USRT_TX_Pin|USRT_RX_Pin;
 800129e:	2360      	movs	r3, #96	; 0x60
 80012a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_UART_MspInit+0xdc>)
 80012c4:	f001 f8f4 	bl	80024b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2026      	movs	r0, #38	; 0x26
 80012ce:	f000 fb56 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f000 fb6d 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	37e8      	adds	r7, #232	; 0xe8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020c00 	.word	0x58020c00

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f9f6 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <USART2_IRQHandler+0x10>)
 8001346:	f005 f905 	bl	8006554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, &rx_buffer,  1);
  /* USER CODE END USART2_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2400025c 	.word	0x2400025c

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136e:	f007 fc0d 	bl	8008b8c <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001396:	e7fe      	b.n	8001396 <_exit+0x12>

08001398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e00a      	b.n	80013c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013aa:	f3af 8000 	nop.w
 80013ae:	4601      	mov	r1, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf0      	blt.n	80013aa <_read+0x12>
  }

  return len;
 80013c8:	687b      	ldr	r3, [r7, #4]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e009      	b.n	80013f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf1      	blt.n	80013e4 <_write+0x12>
  }
  return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	605a      	str	r2, [r3, #4]
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f007 fb72 	bl	8008b8c <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	24080000 	.word	0x24080000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	240004fc 	.word	0x240004fc
 80014dc:	24000518 	.word	0x24000518

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e4:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <SystemInit+0xe4>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ea:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <SystemInit+0xe4>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <SystemInit+0xe8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d807      	bhi.n	8001510 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <SystemInit+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 030f 	bic.w	r3, r3, #15
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <SystemInit+0xe8>)
 800150a:	f043 0307 	orr.w	r3, r3, #7
 800150e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <SystemInit+0xec>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <SystemInit+0xec>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <SystemInit+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <SystemInit+0xec>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4929      	ldr	r1, [pc, #164]	; (80015cc <SystemInit+0xec>)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <SystemInit+0xf0>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <SystemInit+0xe8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <SystemInit+0xe8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 030f 	bic.w	r3, r3, #15
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <SystemInit+0xe8>)
 8001544:	f043 0307 	orr.w	r3, r3, #7
 8001548:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <SystemInit+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <SystemInit+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <SystemInit+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <SystemInit+0xec>)
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <SystemInit+0xf4>)
 8001560:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <SystemInit+0xec>)
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <SystemInit+0xf8>)
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <SystemInit+0xec>)
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <SystemInit+0xfc>)
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <SystemInit+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SystemInit+0xec>)
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <SystemInit+0xfc>)
 8001578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <SystemInit+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <SystemInit+0xec>)
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <SystemInit+0xfc>)
 8001584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <SystemInit+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <SystemInit+0xec>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <SystemInit+0xec>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <SystemInit+0xec>)
 800159a:	2200      	movs	r2, #0
 800159c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0x100>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <SystemInit+0x104>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015aa:	d202      	bcs.n	80015b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <SystemInit+0x108>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <SystemInit+0x10c>)
 80015b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	52002000 	.word	0x52002000
 80015cc:	58024400 	.word	0x58024400
 80015d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015d4:	02020200 	.word	0x02020200
 80015d8:	01ff0000 	.word	0x01ff0000
 80015dc:	01010280 	.word	0x01010280
 80015e0:	5c001000 	.word	0x5c001000
 80015e4:	ffff0000 	.word	0xffff0000
 80015e8:	51008108 	.word	0x51008108
 80015ec:	52004000 	.word	0x52004000

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f4:	f7ff ff74 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161e:	f007 facd 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f899 	bl	8000758 <main>
  bx  lr
 8001626:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001628:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800162c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001630:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8001634:	0800be00 	.word	0x0800be00
  ldr r2, =_sbss
 8001638:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 800163c:	24000514 	.word	0x24000514

08001640 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC3_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	2003      	movs	r0, #3
 800164c:	f000 f98c 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001650:	f002 fe54 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8001654:	4602      	mov	r2, r0
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_Init+0x68>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	4913      	ldr	r1, [pc, #76]	; (80016b0 <HAL_Init+0x6c>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
 800166c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_Init+0x68>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_Init+0x6c>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_Init+0x70>)
 8001686:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_Init+0x74>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f814 	bl	80016bc <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e002      	b.n	80016a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800169e:	f7ff fd31 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	58024400 	.word	0x58024400
 80016b0:	0800b9dc 	.word	0x0800b9dc
 80016b4:	24000010 	.word	0x24000010
 80016b8:	2400000c 	.word	0x2400000c

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_InitTick+0x60>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e021      	b.n	8001714 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_InitTick+0x64>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_InitTick+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f971 	bl	80019ce <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	f000 f93b 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x68>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	24000018 	.word	0x24000018
 8001720:	2400000c 	.word	0x2400000c
 8001724:	24000014 	.word	0x24000014

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	24000018 	.word	0x24000018
 800174c:	24000500 	.word	0x24000500

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	24000500 	.word	0x24000500

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000018 	.word	0x24000018

080017b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetREVID+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0c1b      	lsrs	r3, r3, #16
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	5c001000 	.word	0x5c001000

080017c8 <__NVIC_SetPriorityGrouping>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	05fa0000 	.word	0x05fa0000

08001810 <__NVIC_GetPriorityGrouping>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff40 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff90 	bl	80018bc <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5f 	bl	8001868 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff33 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa4 	bl	8001924 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff feae 	bl	8001750 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2dc      	b.n	8001fba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d008      	beq.n	8001a1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e2cd      	b.n	8001fba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a76      	ldr	r2, [pc, #472]	; (8001bfc <HAL_DMA_Abort+0x214>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d04a      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a74      	ldr	r2, [pc, #464]	; (8001c00 <HAL_DMA_Abort+0x218>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d045      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a73      	ldr	r2, [pc, #460]	; (8001c04 <HAL_DMA_Abort+0x21c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d040      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_DMA_Abort+0x220>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d03b      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a70      	ldr	r2, [pc, #448]	; (8001c0c <HAL_DMA_Abort+0x224>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d036      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_DMA_Abort+0x228>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <HAL_DMA_Abort+0x22c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d02c      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <HAL_DMA_Abort+0x230>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d027      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_DMA_Abort+0x234>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d022      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a68      	ldr	r2, [pc, #416]	; (8001c20 <HAL_DMA_Abort+0x238>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a67      	ldr	r2, [pc, #412]	; (8001c24 <HAL_DMA_Abort+0x23c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d018      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_DMA_Abort+0x240>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a64      	ldr	r2, [pc, #400]	; (8001c2c <HAL_DMA_Abort+0x244>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00e      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <HAL_DMA_Abort+0x248>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a61      	ldr	r2, [pc, #388]	; (8001c34 <HAL_DMA_Abort+0x24c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_Abort+0xd6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5f      	ldr	r2, [pc, #380]	; (8001c38 <HAL_DMA_Abort+0x250>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_DMA_Abort+0xda>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_DMA_Abort+0xdc>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 021e 	bic.w	r2, r2, #30
 8001ad6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e00a      	b.n	8001b06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 020e 	bic.w	r2, r2, #14
 8001afe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <HAL_DMA_Abort+0x214>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d072      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_DMA_Abort+0x218>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d06d      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <HAL_DMA_Abort+0x21c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d068      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <HAL_DMA_Abort+0x220>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d063      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a36      	ldr	r2, [pc, #216]	; (8001c0c <HAL_DMA_Abort+0x224>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d05e      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <HAL_DMA_Abort+0x228>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d059      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <HAL_DMA_Abort+0x22c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d054      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <HAL_DMA_Abort+0x230>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d04f      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_DMA_Abort+0x234>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04a      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2e      	ldr	r2, [pc, #184]	; (8001c20 <HAL_DMA_Abort+0x238>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d045      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <HAL_DMA_Abort+0x23c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d040      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <HAL_DMA_Abort+0x240>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d03b      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <HAL_DMA_Abort+0x244>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d036      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_DMA_Abort+0x248>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d031      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_DMA_Abort+0x24c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d02c      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_DMA_Abort+0x250>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d027      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_DMA_Abort+0x254>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d022      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_DMA_Abort+0x258>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_DMA_Abort+0x25c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d018      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_DMA_Abort+0x260>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_DMA_Abort+0x264>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_DMA_Abort+0x268>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_DMA_Abort+0x26c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_DMA_Abort+0x270>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d132      	bne.n	8001c5c <HAL_DMA_Abort+0x274>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e031      	b.n	8001c5e <HAL_DMA_Abort+0x276>
 8001bfa:	bf00      	nop
 8001bfc:	40020010 	.word	0x40020010
 8001c00:	40020028 	.word	0x40020028
 8001c04:	40020040 	.word	0x40020040
 8001c08:	40020058 	.word	0x40020058
 8001c0c:	40020070 	.word	0x40020070
 8001c10:	40020088 	.word	0x40020088
 8001c14:	400200a0 	.word	0x400200a0
 8001c18:	400200b8 	.word	0x400200b8
 8001c1c:	40020410 	.word	0x40020410
 8001c20:	40020428 	.word	0x40020428
 8001c24:	40020440 	.word	0x40020440
 8001c28:	40020458 	.word	0x40020458
 8001c2c:	40020470 	.word	0x40020470
 8001c30:	40020488 	.word	0x40020488
 8001c34:	400204a0 	.word	0x400204a0
 8001c38:	400204b8 	.word	0x400204b8
 8001c3c:	58025408 	.word	0x58025408
 8001c40:	5802541c 	.word	0x5802541c
 8001c44:	58025430 	.word	0x58025430
 8001c48:	58025444 	.word	0x58025444
 8001c4c:	58025458 	.word	0x58025458
 8001c50:	5802546c 	.word	0x5802546c
 8001c54:	58025480 	.word	0x58025480
 8001c58:	58025494 	.word	0x58025494
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6d      	ldr	r2, [pc, #436]	; (8001e2c <HAL_DMA_Abort+0x444>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04a      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_DMA_Abort+0x448>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d045      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_DMA_Abort+0x44c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d040      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a68      	ldr	r2, [pc, #416]	; (8001e38 <HAL_DMA_Abort+0x450>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d03b      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a67      	ldr	r2, [pc, #412]	; (8001e3c <HAL_DMA_Abort+0x454>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <HAL_DMA_Abort+0x458>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d031      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_DMA_Abort+0x45c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d02c      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a62      	ldr	r2, [pc, #392]	; (8001e48 <HAL_DMA_Abort+0x460>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d027      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_DMA_Abort+0x464>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5f      	ldr	r2, [pc, #380]	; (8001e50 <HAL_DMA_Abort+0x468>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01d      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <HAL_DMA_Abort+0x46c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_DMA_Abort+0x470>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_DMA_Abort+0x474>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_DMA_Abort+0x478>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_DMA_Abort+0x47c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_DMA_Abort+0x32a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_DMA_Abort+0x480>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <HAL_DMA_Abort+0x33c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_DMA_Abort+0x34c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d34:	e013      	b.n	8001d5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d36:	f7ff fd0b 	bl	8001750 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d90c      	bls.n	8001d5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12d      	b.n	8001fba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e5      	bne.n	8001d36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_DMA_Abort+0x444>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04a      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_DMA_Abort+0x448>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d045      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_DMA_Abort+0x44c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d040      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_DMA_Abort+0x450>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d03b      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <HAL_DMA_Abort+0x454>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d036      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_DMA_Abort+0x458>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_DMA_Abort+0x45c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d02c      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_DMA_Abort+0x460>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d027      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_DMA_Abort+0x464>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_DMA_Abort+0x468>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01d      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_DMA_Abort+0x46c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d018      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_DMA_Abort+0x470>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_DMA_Abort+0x474>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00e      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_DMA_Abort+0x478>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_DMA_Abort+0x47c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d004      	beq.n	8001e0a <HAL_DMA_Abort+0x422>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_DMA_Abort+0x480>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Abort+0x426>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_DMA_Abort+0x428>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02b      	beq.n	8001e6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	e02a      	b.n	8001e82 <HAL_DMA_Abort+0x49a>
 8001e2c:	40020010 	.word	0x40020010
 8001e30:	40020028 	.word	0x40020028
 8001e34:	40020040 	.word	0x40020040
 8001e38:	40020058 	.word	0x40020058
 8001e3c:	40020070 	.word	0x40020070
 8001e40:	40020088 	.word	0x40020088
 8001e44:	400200a0 	.word	0x400200a0
 8001e48:	400200b8 	.word	0x400200b8
 8001e4c:	40020410 	.word	0x40020410
 8001e50:	40020428 	.word	0x40020428
 8001e54:	40020440 	.word	0x40020440
 8001e58:	40020458 	.word	0x40020458
 8001e5c:	40020470 	.word	0x40020470
 8001e60:	40020488 	.word	0x40020488
 8001e64:	400204a0 	.word	0x400204a0
 8001e68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_DMA_Abort+0x5dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d072      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_DMA_Abort+0x5e0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d06d      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_DMA_Abort+0x5e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d068      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <HAL_DMA_Abort+0x5e8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d063      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_DMA_Abort+0x5ec>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d05e      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_DMA_Abort+0x5f0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d059      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <HAL_DMA_Abort+0x5f4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d054      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a44      	ldr	r2, [pc, #272]	; (8001fe0 <HAL_DMA_Abort+0x5f8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04f      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_DMA_Abort+0x5fc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04a      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <HAL_DMA_Abort+0x600>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d045      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_DMA_Abort+0x604>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d040      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <HAL_DMA_Abort+0x608>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d03b      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <HAL_DMA_Abort+0x60c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d036      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <HAL_DMA_Abort+0x610>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_DMA_Abort+0x614>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d02c      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_DMA_Abort+0x618>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d027      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a37      	ldr	r2, [pc, #220]	; (8002004 <HAL_DMA_Abort+0x61c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a35      	ldr	r2, [pc, #212]	; (8002008 <HAL_DMA_Abort+0x620>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01d      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_DMA_Abort+0x624>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d018      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_DMA_Abort+0x628>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_DMA_Abort+0x62c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00e      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_DMA_Abort+0x630>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_DMA_Abort+0x634>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <HAL_DMA_Abort+0x638>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_DMA_Abort+0x58e>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_DMA_Abort+0x590>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fa6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40020028 	.word	0x40020028
 8001fcc:	40020040 	.word	0x40020040
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	40020070 	.word	0x40020070
 8001fd8:	40020088 	.word	0x40020088
 8001fdc:	400200a0 	.word	0x400200a0
 8001fe0:	400200b8 	.word	0x400200b8
 8001fe4:	40020410 	.word	0x40020410
 8001fe8:	40020428 	.word	0x40020428
 8001fec:	40020440 	.word	0x40020440
 8001ff0:	40020458 	.word	0x40020458
 8001ff4:	40020470 	.word	0x40020470
 8001ff8:	40020488 	.word	0x40020488
 8001ffc:	400204a0 	.word	0x400204a0
 8002000:	400204b8 	.word	0x400204b8
 8002004:	58025408 	.word	0x58025408
 8002008:	5802541c 	.word	0x5802541c
 800200c:	58025430 	.word	0x58025430
 8002010:	58025444 	.word	0x58025444
 8002014:	58025458 	.word	0x58025458
 8002018:	5802546c 	.word	0x5802546c
 800201c:	58025480 	.word	0x58025480
 8002020:	58025494 	.word	0x58025494

08002024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e237      	b.n	80024a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e22c      	b.n	80024a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_DMA_Abort_IT+0x1a4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a59      	ldr	r2, [pc, #356]	; (80021cc <HAL_DMA_Abort_IT+0x1a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <HAL_DMA_Abort_IT+0x1b0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a55      	ldr	r2, [pc, #340]	; (80021d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a53      	ldr	r2, [pc, #332]	; (80021dc <HAL_DMA_Abort_IT+0x1b8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_DMA_Abort_IT+0x1bc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_DMA_Abort_IT+0x1c0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_DMA_Abort_IT+0x1c4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_DMA_Abort_IT+0x1c8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_DMA_Abort_IT+0x1cc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_DMA_Abort_IT+0x1d0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a49      	ldr	r2, [pc, #292]	; (80021f8 <HAL_DMA_Abort_IT+0x1d4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_DMA_Abort_IT+0x1d8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_DMA_Abort_IT+0x1dc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Abort_IT+0xcc>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Abort_IT+0xce>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8086 	beq.w	8002204 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2204      	movs	r2, #4
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_DMA_Abort_IT+0x1a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <HAL_DMA_Abort_IT+0x1a8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_DMA_Abort_IT+0x1b0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_DMA_Abort_IT+0x1b8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_DMA_Abort_IT+0x1bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_DMA_Abort_IT+0x1c0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Abort_IT+0x1c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_DMA_Abort_IT+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Abort_IT+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_DMA_Abort_IT+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_Abort_IT+0x1d4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_DMA_Abort_IT+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x17c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_DMA_Abort_IT+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <HAL_DMA_Abort_IT+0x18e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e178      	b.n	80024a4 <HAL_DMA_Abort_IT+0x480>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e16f      	b.n	80024a4 <HAL_DMA_Abort_IT+0x480>
 80021c4:	40020010 	.word	0x40020010
 80021c8:	40020028 	.word	0x40020028
 80021cc:	40020040 	.word	0x40020040
 80021d0:	40020058 	.word	0x40020058
 80021d4:	40020070 	.word	0x40020070
 80021d8:	40020088 	.word	0x40020088
 80021dc:	400200a0 	.word	0x400200a0
 80021e0:	400200b8 	.word	0x400200b8
 80021e4:	40020410 	.word	0x40020410
 80021e8:	40020428 	.word	0x40020428
 80021ec:	40020440 	.word	0x40020440
 80021f0:	40020458 	.word	0x40020458
 80021f4:	40020470 	.word	0x40020470
 80021f8:	40020488 	.word	0x40020488
 80021fc:	400204a0 	.word	0x400204a0
 8002200:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020e 	bic.w	r2, r2, #14
 8002212:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6c      	ldr	r2, [pc, #432]	; (80023cc <HAL_DMA_Abort_IT+0x3a8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6b      	ldr	r2, [pc, #428]	; (80023d0 <HAL_DMA_Abort_IT+0x3ac>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a69      	ldr	r2, [pc, #420]	; (80023d4 <HAL_DMA_Abort_IT+0x3b0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a68      	ldr	r2, [pc, #416]	; (80023d8 <HAL_DMA_Abort_IT+0x3b4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a66      	ldr	r2, [pc, #408]	; (80023dc <HAL_DMA_Abort_IT+0x3b8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_DMA_Abort_IT+0x3bc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a63      	ldr	r2, [pc, #396]	; (80023e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a62      	ldr	r2, [pc, #392]	; (80023e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a60      	ldr	r2, [pc, #384]	; (80023ec <HAL_DMA_Abort_IT+0x3c8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5f      	ldr	r2, [pc, #380]	; (80023f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_DMA_Abort_IT+0x3d0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_DMA_Abort_IT+0x3d4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_DMA_Abort_IT+0x3d8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a59      	ldr	r2, [pc, #356]	; (8002400 <HAL_DMA_Abort_IT+0x3dc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_DMA_Abort_IT+0x3e0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x290>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_DMA_Abort_IT+0x3e4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d108      	bne.n	80022c6 <HAL_DMA_Abort_IT+0x2a2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e007      	b.n	80022d6 <HAL_DMA_Abort_IT+0x2b2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <HAL_DMA_Abort_IT+0x3a8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d072      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <HAL_DMA_Abort_IT+0x3ac>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d06d      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a39      	ldr	r2, [pc, #228]	; (80023d4 <HAL_DMA_Abort_IT+0x3b0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d068      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a37      	ldr	r2, [pc, #220]	; (80023d8 <HAL_DMA_Abort_IT+0x3b4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d063      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a36      	ldr	r2, [pc, #216]	; (80023dc <HAL_DMA_Abort_IT+0x3b8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d05e      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_DMA_Abort_IT+0x3bc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d059      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d054      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04f      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a30      	ldr	r2, [pc, #192]	; (80023ec <HAL_DMA_Abort_IT+0x3c8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04a      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d045      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_DMA_Abort_IT+0x3d0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d040      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_DMA_Abort_IT+0x3d4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03b      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_DMA_Abort_IT+0x3d8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d036      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_DMA_Abort_IT+0x3dc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_DMA_Abort_IT+0x3e0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d02c      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_DMA_Abort_IT+0x3e4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d027      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_DMA_Abort_IT+0x3e8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_Abort_IT+0x3ec>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	; (8002414 <HAL_DMA_Abort_IT+0x3f0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_DMA_Abort_IT+0x3f4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_DMA_Abort_IT+0x3f8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_DMA_Abort_IT+0x3fc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_DMA_Abort_IT+0x400>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_DMA_Abort_IT+0x404>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d132      	bne.n	800242c <HAL_DMA_Abort_IT+0x408>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e031      	b.n	800242e <HAL_DMA_Abort_IT+0x40a>
 80023ca:	bf00      	nop
 80023cc:	40020010 	.word	0x40020010
 80023d0:	40020028 	.word	0x40020028
 80023d4:	40020040 	.word	0x40020040
 80023d8:	40020058 	.word	0x40020058
 80023dc:	40020070 	.word	0x40020070
 80023e0:	40020088 	.word	0x40020088
 80023e4:	400200a0 	.word	0x400200a0
 80023e8:	400200b8 	.word	0x400200b8
 80023ec:	40020410 	.word	0x40020410
 80023f0:	40020428 	.word	0x40020428
 80023f4:	40020440 	.word	0x40020440
 80023f8:	40020458 	.word	0x40020458
 80023fc:	40020470 	.word	0x40020470
 8002400:	40020488 	.word	0x40020488
 8002404:	400204a0 	.word	0x400204a0
 8002408:	400204b8 	.word	0x400204b8
 800240c:	58025408 	.word	0x58025408
 8002410:	5802541c 	.word	0x5802541c
 8002414:	58025430 	.word	0x58025430
 8002418:	58025444 	.word	0x58025444
 800241c:	58025458 	.word	0x58025458
 8002420:	5802546c 	.word	0x5802546c
 8002424:	58025480 	.word	0x58025480
 8002428:	58025494 	.word	0x58025494
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d028      	beq.n	8002484 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002440:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002460:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002478:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002482:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024be:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_GPIO_Init+0x234>)
 80024c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c2:	e194      	b.n	80027ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8186 	beq.w	80027e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d005      	beq.n	80024f4 <HAL_GPIO_Init+0x44>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d130      	bne.n	8002556 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252a:	2201      	movs	r2, #1
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0201 	and.w	r2, r3, #1
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b03      	cmp	r3, #3
 8002560:	d017      	beq.n	8002592 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d123      	bne.n	80025e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	69b9      	ldr	r1, [r7, #24]
 80025e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80e0 	beq.w	80027e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x238>)
 800262a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800262e:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <HAL_GPIO_Init+0x238>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_GPIO_Init+0x238>)
 800263a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a29      	ldr	r2, [pc, #164]	; (80026ec <HAL_GPIO_Init+0x23c>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_GPIO_Init+0x240>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d052      	beq.n	8002718 <HAL_GPIO_Init+0x268>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_GPIO_Init+0x244>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d031      	beq.n	80026de <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_GPIO_Init+0x248>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02b      	beq.n	80026da <HAL_GPIO_Init+0x22a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_GPIO_Init+0x24c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d025      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_GPIO_Init+0x250>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01f      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_GPIO_Init+0x254>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x258>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_GPIO_Init+0x25c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_GPIO_Init+0x260>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_GPIO_Init+0x264>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x20e>
 80026ba:	2309      	movs	r3, #9
 80026bc:	e02d      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026be:	230a      	movs	r3, #10
 80026c0:	e02b      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026c2:	2308      	movs	r3, #8
 80026c4:	e029      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e027      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e025      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e023      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e021      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e01f      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e01d      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026de:	2301      	movs	r3, #1
 80026e0:	e01b      	b.n	800271a <HAL_GPIO_Init+0x26a>
 80026e2:	bf00      	nop
 80026e4:	58000080 	.word	0x58000080
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58000400 	.word	0x58000400
 80026f0:	58020000 	.word	0x58020000
 80026f4:	58020400 	.word	0x58020400
 80026f8:	58020800 	.word	0x58020800
 80026fc:	58020c00 	.word	0x58020c00
 8002700:	58021000 	.word	0x58021000
 8002704:	58021400 	.word	0x58021400
 8002708:	58021800 	.word	0x58021800
 800270c:	58021c00 	.word	0x58021c00
 8002710:	58022000 	.word	0x58022000
 8002714:	58022400 	.word	0x58022400
 8002718:	2300      	movs	r3, #0
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272a:	4938      	ldr	r1, [pc, #224]	; (800280c <HAL_GPIO_Init+0x35c>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800275e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800278c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f ae63 	bne.w	80024c4 <HAL_GPIO_Init+0x14>
  }
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	58000400 	.word	0x58000400

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800282c:	e003      	b.n	8002836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fc64 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	e006      	b.n	80028cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d104      	bne.n	80028de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_I2C_Init+0x11c>)
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69d9      	ldr	r1, [r3, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	02008000 	.word	0x02008000

08002964 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	460b      	mov	r3, r1
 8002972:	817b      	strh	r3, [r7, #10]
 8002974:	4613      	mov	r3, r2
 8002976:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b20      	cmp	r3, #32
 8002982:	f040 80da 	bne.w	8002b3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x30>
 8002990:	2302      	movs	r3, #2
 8002992:	e0d3      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fed8 	bl	8001750 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2319      	movs	r3, #25
 80029a8:	2201      	movs	r2, #1
 80029aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fb54 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0be      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	; 0x21
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2210      	movs	r2, #16
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2bff      	cmp	r3, #255	; 0xff
 80029ee:	d90e      	bls.n	8002a0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	8979      	ldrh	r1, [r7, #10]
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fd64 	bl	80034d4 <I2C_TransferConfig>
 8002a0c:	e06c      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fd53 	bl	80034d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a2e:	e05b      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6a39      	ldr	r1, [r7, #32]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fb60 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e07b      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d034      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d130      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fae3 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04d      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d90e      	bls.n	8002ac8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fd07 	bl	80034d4 <I2C_TransferConfig>
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	8979      	ldrh	r1, [r7, #10]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fcf6 	bl	80034d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d19e      	bne.n	8002a30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb46 	bl	8003188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01a      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	80002000 	.word	0x80002000
 8002b48:	fe00e800 	.word	0xfe00e800

08002b4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	f040 80db 	bne.w	8002d24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_Master_Receive+0x30>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0d4      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fde4 	bl	8001750 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa60 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0bf      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2222      	movs	r2, #34	; 0x22
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d90e      	bls.n	8002bf6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <HAL_I2C_Master_Receive+0x1e4>)
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fc70 	bl	80034d4 <I2C_TransferConfig>
 8002bf4:	e06d      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_I2C_Master_Receive+0x1e4>)
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fc5f 	bl	80034d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c16:	e05c      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 faf7 	bl	8003210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e07c      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d034      	beq.n	8002cd2 <HAL_I2C_Master_Receive+0x186>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d130      	bne.n	8002cd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9ee 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e04d      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2bff      	cmp	r3, #255	; 0xff
 8002c92:	d90e      	bls.n	8002cb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fc12 	bl	80034d4 <I2C_TransferConfig>
 8002cb0:	e00f      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fc01 	bl	80034d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d19d      	bne.n	8002c18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa51 	bl	8003188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01a      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_I2C_Master_Receive+0x1e8>)
 8002d04:	400b      	ands	r3, r1
 8002d06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	80002400 	.word	0x80002400
 8002d34:	fe00e800 	.word	0xfe00e800

08002d38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	817b      	strh	r3, [r7, #10]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	813b      	strh	r3, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	f040 80fd 	bne.w	8002f5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x34>
 8002d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0f1      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Mem_Read+0x4e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0ea      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d8e:	f7fe fcdf 	bl	8001750 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2319      	movs	r3, #25
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f95b 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0d5      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2222      	movs	r2, #34	; 0x22
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd8:	88f8      	ldrh	r0, [r7, #6]
 8002dda:	893a      	ldrh	r2, [r7, #8]
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4603      	mov	r3, r0
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f8bf 	bl	8002f6c <I2C_RequestMemoryRead>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0ad      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2bff      	cmp	r3, #255	; 0xff
 8002e08:	d90e      	bls.n	8002e28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HAL_I2C_Mem_Read+0x22c>)
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb57 	bl	80034d4 <I2C_TransferConfig>
 8002e26:	e00f      	b.n	8002e48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	8979      	ldrh	r1, [r7, #10]
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_I2C_Mem_Read+0x22c>)
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fb46 	bl	80034d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2104      	movs	r1, #4
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f902 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07c      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d034      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x1d0>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d130      	bne.n	8002f08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8d3 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e04d      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d90e      	bls.n	8002ee8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 faf7 	bl	80034d4 <I2C_TransferConfig>
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fae6 	bl	80034d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d19a      	bne.n	8002e48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f936 	bl	8003188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01a      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_I2C_Mem_Read+0x230>)
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	80002400 	.word	0x80002400
 8002f68:	fe00e800 	.word	0xfe00e800

08002f6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	813b      	strh	r3, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <I2C_RequestMemoryRead+0xa4>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa9e 	bl	80034d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8ac 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e02c      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb2:	893b      	ldrh	r3, [r7, #8]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
 8002fbc:	e015      	b.n	8002fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fbe:	893b      	ldrh	r3, [r7, #8]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f892 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e012      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f831 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	80002000 	.word	0x80002000

08003014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d007      	beq.n	8003050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	619a      	str	r2, [r3, #24]
  }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	e031      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003074:	d02d      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fb6b 	bl	8001750 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d122      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d113      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d0be      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003106:	e033      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f901 	bl	8003314 <I2C_IsErrorOccurred>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e031      	b.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003122:	d025      	beq.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe fb14 	bl	8001750 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11a      	bne.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d013      	beq.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e007      	b.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d1c4      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	e02f      	b.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f8ba 	bl	8003314 <I2C_IsErrorOccurred>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02d      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7fe fad1 	bl	8001750 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11a      	bne.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d013      	beq.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	d1c8      	bne.n	8003196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321c:	e06b      	b.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f876 	bl	8003314 <I2C_IsErrorOccurred>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e069      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d138      	bne.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d105      	bne.n	800325a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e055      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d107      	bne.n	8003278 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2210      	movs	r2, #16
 800326e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2204      	movs	r2, #4
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
 8003276:	e002      	b.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2220      	movs	r2, #32
 8003284:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003292:	400b      	ands	r3, r1
 8003294:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e029      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fa4d 	bl	8001750 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d00f      	beq.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e007      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d18c      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	fe00e800 	.word	0xfe00e800

08003314 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d068      	beq.n	8003412 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2210      	movs	r2, #16
 8003346:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003348:	e049      	b.n	80033de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003350:	d045      	beq.n	80033de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fe f9fd 	bl	8001750 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_IsErrorOccurred+0x54>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13a      	bne.n	80033de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800337a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338a:	d121      	bne.n	80033d0 <I2C_IsErrorOccurred+0xbc>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003392:	d01d      	beq.n	80033d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b20      	cmp	r3, #32
 8003398:	d01a      	beq.n	80033d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033aa:	f7fe f9d1 	bl	8001750 <HAL_GetTick>
 80033ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b0:	e00e      	b.n	80033d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033b2:	f7fe f9cd 	bl	8001750 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b19      	cmp	r3, #25
 80033be:	d907      	bls.n	80033d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f043 0320 	orr.w	r3, r3, #32
 80033c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80033ce:	e006      	b.n	80033de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d1e9      	bne.n	80033b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d003      	beq.n	80033f4 <I2C_IsErrorOccurred+0xe0>
 80033ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0aa      	beq.n	800334a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2220      	movs	r2, #32
 8003402:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01c      	beq.n	80034c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fdc3 	bl	8003014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <I2C_IsErrorOccurred+0x1bc>)
 800349a:	400b      	ands	r3, r1
 800349c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	fe00e800 	.word	0xfe00e800

080034d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	4613      	mov	r3, r2
 80034e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034ec:	7a7b      	ldrb	r3, [r7, #9]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003502:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	0d5b      	lsrs	r3, r3, #21
 800350e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <I2C_TransferConfig+0x60>)
 8003514:	430b      	orrs	r3, r1
 8003516:	43db      	mvns	r3, r3
 8003518:	ea02 0103 	and.w	r1, r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	03ff63ff 	.word	0x03ff63ff

08003538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	d138      	bne.n	80035c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003558:	2302      	movs	r3, #2
 800355a:	e032      	b.n	80035c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d139      	bne.n	8003658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e033      	b.n	800365a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2224      	movs	r2, #36	; 0x24
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_PWREx_ConfigSupply+0x70>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d00a      	beq.n	8003692 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_PWREx_ConfigSupply+0x70>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e01f      	b.n	80036ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e01d      	b.n	80036ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_PWREx_ConfigSupply+0x70>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	490f      	ldr	r1, [pc, #60]	; (80036d8 <HAL_PWREx_ConfigSupply+0x70>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036a2:	f7fe f855 	bl	8001750 <HAL_GetTick>
 80036a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036a8:	e009      	b.n	80036be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036aa:	f7fe f851 	bl	8001750 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b8:	d901      	bls.n	80036be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_PWREx_ConfigSupply+0x70>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ca:	d1ee      	bne.n	80036aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	58024800 	.word	0x58024800

080036dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f000 bc48 	b.w	8003f80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8088 	beq.w	800380e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b99      	ldr	r3, [pc, #612]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003708:	4b96      	ldr	r3, [pc, #600]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	2b10      	cmp	r3, #16
 8003712:	d007      	beq.n	8003724 <HAL_RCC_OscConfig+0x48>
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b18      	cmp	r3, #24
 8003718:	d111      	bne.n	800373e <HAL_RCC_OscConfig+0x62>
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d10c      	bne.n	800373e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b8f      	ldr	r3, [pc, #572]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d06d      	beq.n	800380c <HAL_RCC_OscConfig+0x130>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d169      	bne.n	800380c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f000 bc21 	b.w	8003f80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x7a>
 8003748:	4b86      	ldr	r3, [pc, #536]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a85      	ldr	r2, [pc, #532]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e02e      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x9c>
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a80      	ldr	r2, [pc, #512]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0xc0>
 8003782:	4b78      	ldr	r3, [pc, #480]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a77      	ldr	r2, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b75      	ldr	r3, [pc, #468]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a74      	ldr	r2, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 800379c:	4b71      	ldr	r3, [pc, #452]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a70      	ldr	r2, [pc, #448]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6d      	ldr	r2, [pc, #436]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd ffc8 	bl	8001750 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd ffc4 	bl	8001750 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e3d4      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe8>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd ffb4 	bl	8001750 <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd ffb0 	bl	8001750 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e3c0      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037fe:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x110>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80ca 	beq.w	80039b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381c:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003824:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003826:	4b4f      	ldr	r3, [pc, #316]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_RCC_OscConfig+0x166>
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b18      	cmp	r3, #24
 8003836:	d156      	bne.n	80038e6 <HAL_RCC_OscConfig+0x20a>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d151      	bne.n	80038e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003842:	4b48      	ldr	r3, [pc, #288]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_RCC_OscConfig+0x17e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e392      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385a:	4b42      	ldr	r3, [pc, #264]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0219 	bic.w	r2, r3, #25
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	493f      	ldr	r1, [pc, #252]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd ff70 	bl	8001750 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7fd ff6c 	bl	8001750 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e37c      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	f7fd ff8d 	bl	80017b0 <HAL_GetREVID>
 8003896:	4603      	mov	r3, r0
 8003898:	f241 0203 	movw	r2, #4099	; 0x1003
 800389c:	4293      	cmp	r3, r2
 800389e:	d817      	bhi.n	80038d0 <HAL_RCC_OscConfig+0x1f4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x1de>
 80038a8:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038b0:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	e07a      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	4926      	ldr	r1, [pc, #152]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ce:	e06f      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4921      	ldr	r1, [pc, #132]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	e064      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d047      	beq.n	800397e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0219 	bic.w	r2, r3, #25
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	491a      	ldr	r1, [pc, #104]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd ff26 	bl	8001750 <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fd ff22 	bl	8001750 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e332      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	f7fd ff43 	bl	80017b0 <HAL_GetREVID>
 800392a:	4603      	mov	r3, r0
 800392c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003930:	4293      	cmp	r3, r2
 8003932:	d819      	bhi.n	8003968 <HAL_RCC_OscConfig+0x28c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d108      	bne.n	800394e <HAL_RCC_OscConfig+0x272>
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	6053      	str	r3, [r2, #4]
 800394c:	e030      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	031b      	lsls	r3, r3, #12
 800395c:	4901      	ldr	r1, [pc, #4]	; (8003964 <HAL_RCC_OscConfig+0x288>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
 8003962:	e025      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
 8003964:	58024400 	.word	0x58024400
 8003968:	4b9a      	ldr	r3, [pc, #616]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	4997      	ldr	r1, [pc, #604]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	e018      	b.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b95      	ldr	r3, [pc, #596]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a94      	ldr	r2, [pc, #592]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fd fee1 	bl	8001750 <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7fd fedd 	bl	8001750 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e2ed      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039a4:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a9 	beq.w	8003b10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c8:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d007      	beq.n	80039e4 <HAL_RCC_OscConfig+0x308>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b18      	cmp	r3, #24
 80039d8:	d13a      	bne.n	8003a50 <HAL_RCC_OscConfig+0x374>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d135      	bne.n	8003a50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039e4:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x320>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2c1      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039fc:	f7fd fed8 	bl	80017b0 <HAL_GetREVID>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d817      	bhi.n	8003a3a <HAL_RCC_OscConfig+0x35e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x348>
 8003a12:	4b70      	ldr	r3, [pc, #448]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a1a:	4a6e      	ldr	r2, [pc, #440]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a22:	e075      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a24:	4b6b      	ldr	r3, [pc, #428]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	069b      	lsls	r3, r3, #26
 8003a32:	4968      	ldr	r1, [pc, #416]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a38:	e06a      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3a:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	4962      	ldr	r1, [pc, #392]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a4e:	e05f      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d042      	beq.n	8003ade <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a58:	4b5e      	ldr	r3, [pc, #376]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fe74 	bl	8001750 <HAL_GetTick>
 8003a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fe70 	bl	8001750 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e280      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a7e:	4b55      	ldr	r3, [pc, #340]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a8a:	f7fd fe91 	bl	80017b0 <HAL_GetREVID>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d817      	bhi.n	8003ac8 <HAL_RCC_OscConfig+0x3ec>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d108      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3d6>
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aae:	6053      	str	r3, [r2, #4]
 8003ab0:	e02e      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
 8003ab2:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	069b      	lsls	r3, r3, #26
 8003ac0:	4944      	ldr	r1, [pc, #272]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
 8003ac6:	e023      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
 8003ac8:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	493f      	ldr	r1, [pc, #252]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
 8003adc:	e018      	b.n	8003b10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ade:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3c      	ldr	r2, [pc, #240]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fe31 	bl	8001750 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003af2:	f7fd fe2d 	bl	8001750 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e23d      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d036      	beq.n	8003b8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b28:	4a2a      	ldr	r2, [pc, #168]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd fe0e 	bl	8001750 <HAL_GetTick>
 8003b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd fe0a 	bl	8001750 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e21a      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x45c>
 8003b56:	e018      	b.n	8003b8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b58:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd fdf4 	bl	8001750 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fdf0 	bl	8001750 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e200      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d039      	beq.n	8003c0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003baa:	f7fd fdd1 	bl	8001750 <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb2:	f7fd fdcd 	bl	8001750 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1dd      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4d6>
 8003bd0:	e01b      	b.n	8003c0a <HAL_RCC_OscConfig+0x52e>
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bd8:	4b9b      	ldr	r3, [pc, #620]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a9a      	ldr	r2, [pc, #616]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003be4:	f7fd fdb4 	bl	8001750 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bec:	f7fd fdb0 	bl	8001750 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1c0      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bfe:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8081 	beq.w	8003d1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c18:	4b8c      	ldr	r3, [pc, #560]	; (8003e4c <HAL_RCC_OscConfig+0x770>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a8b      	ldr	r2, [pc, #556]	; (8003e4c <HAL_RCC_OscConfig+0x770>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c24:	f7fd fd94 	bl	8001750 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fd fd90 	bl	8001750 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1a0      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3e:	4b83      	ldr	r3, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x770>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_OscConfig+0x584>
 8003c52:	4b7d      	ldr	r3, [pc, #500]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e02d      	b.n	8003cbc <HAL_RCC_OscConfig+0x5e0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x5a6>
 8003c68:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a76      	ldr	r2, [pc, #472]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a73      	ldr	r2, [pc, #460]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	e01c      	b.n	8003cbc <HAL_RCC_OscConfig+0x5e0>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c8>
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	4b6c      	ldr	r3, [pc, #432]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a6b      	ldr	r2, [pc, #428]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0x5e0>
 8003ca4:	4b68      	ldr	r3, [pc, #416]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	4a67      	ldr	r2, [pc, #412]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb0:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a64      	ldr	r2, [pc, #400]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003cb6:	f023 0304 	bic.w	r3, r3, #4
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fd44 	bl	8001750 <HAL_GetTick>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fd40 	bl	8001750 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e14e      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce2:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ee      	beq.n	8003ccc <HAL_RCC_OscConfig+0x5f0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fd2e 	bl	8001750 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fd2a 	bl	8001750 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e138      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ee      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 812d 	beq.w	8003f7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d24:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2c:	2b18      	cmp	r3, #24
 8003d2e:	f000 80bd 	beq.w	8003eac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	f040 809e 	bne.w	8003e78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fd02 	bl	8001750 <HAL_GetTick>
 8003d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd fcfe 	bl	8001750 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e10e      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6e:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d72:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCC_OscConfig+0x774>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	430a      	orrs	r2, r1
 8003d82:	4931      	ldr	r1, [pc, #196]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	628b      	str	r3, [r1, #40]	; 0x28
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	3b01      	subs	r3, #1
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	3b01      	subs	r3, #1
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db0:	3b01      	subs	r3, #1
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003db8:	4923      	ldr	r1, [pc, #140]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_RCC_OscConfig+0x778>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dd6:	00d2      	lsls	r2, r2, #3
 8003dd8:	491b      	ldr	r1, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4917      	ldr	r1, [pc, #92]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f023 0202 	bic.w	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	4912      	ldr	r1, [pc, #72]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fc87 	bl	8001750 <HAL_GetTick>
 8003e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e44:	e011      	b.n	8003e6a <HAL_RCC_OscConfig+0x78e>
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	58024800 	.word	0x58024800
 8003e50:	fffffc0c 	.word	0xfffffc0c
 8003e54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd fc7a 	bl	8001750 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e08a      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x77c>
 8003e76:	e082      	b.n	8003f7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a42      	ldr	r2, [pc, #264]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd fc64 	bl	8001750 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd fc60 	bl	8001750 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e070      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x7b0>
 8003eaa:	e068      	b.n	8003f7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eb2:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d031      	beq.n	8003f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0203 	and.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d12a      	bne.n	8003f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d122      	bne.n	8003f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11a      	bne.n	8003f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0a5b      	lsrs	r3, r3, #9
 8003ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d111      	bne.n	8003f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d108      	bne.n	8003f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	0e1b      	lsrs	r3, r3, #24
 8003f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e02b      	b.n	8003f80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d01f      	beq.n	8003f7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f4a:	f7fd fc01 	bl	8001750 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f50:	bf00      	nop
 8003f52:	f7fd fbfd 	bl	8001750 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d0f9      	beq.n	8003f52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_RCC_OscConfig+0x8b0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4906      	ldr	r1, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCC_OscConfig+0x8ac>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	ffff0007 	.word	0xffff0007

08003f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e19c      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b87      	ldr	r3, [pc, #540]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 020f 	bic.w	r2, r3, #15
 8003fba:	4985      	ldr	r1, [pc, #532]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b83      	ldr	r3, [pc, #524]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e184      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	4b7b      	ldr	r3, [pc, #492]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ff0:	4b78      	ldr	r3, [pc, #480]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4975      	ldr	r1, [pc, #468]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800401a:	429a      	cmp	r2, r3
 800401c:	d908      	bls.n	8004030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800401e:	4b6d      	ldr	r3, [pc, #436]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	496a      	ldr	r1, [pc, #424]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800402c:	4313      	orrs	r3, r2
 800402e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004048:	429a      	cmp	r2, r3
 800404a:	d908      	bls.n	800405e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	495e      	ldr	r1, [pc, #376]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800405a:	4313      	orrs	r3, r2
 800405c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d010      	beq.n	800408c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004076:	429a      	cmp	r2, r3
 8004078:	d908      	bls.n	800408c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800407a:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4953      	ldr	r1, [pc, #332]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004088:	4313      	orrs	r3, r2
 800408a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d908      	bls.n	80040ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f023 020f 	bic.w	r2, r3, #15
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4947      	ldr	r1, [pc, #284]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d055      	beq.n	8004172 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4940      	ldr	r1, [pc, #256]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e0:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d121      	bne.n	8004130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0f6      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d115      	bne.n	8004130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0ea      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d107      	bne.n	8004120 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004110:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0de      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0d6      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f023 0207 	bic.w	r2, r3, #7
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4925      	ldr	r1, [pc, #148]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800413e:	4313      	orrs	r3, r2
 8004140:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004142:	f7fd fb05 	bl	8001750 <HAL_GetTick>
 8004146:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004148:	e00a      	b.n	8004160 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414a:	f7fd fb01 	bl	8001750 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0be      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	429a      	cmp	r2, r3
 8004170:	d1eb      	bne.n	800414a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	429a      	cmp	r2, r3
 800418c:	d208      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f023 020f 	bic.w	r2, r3, #15
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	490e      	ldr	r1, [pc, #56]	; (80041d4 <HAL_RCC_ClockConfig+0x244>)
 800419c:	4313      	orrs	r3, r2
 800419e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d214      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 020f 	bic.w	r2, r3, #15
 80041b6:	4906      	ldr	r1, [pc, #24]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_RCC_ClockConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e086      	b.n	80042de <HAL_RCC_ClockConfig+0x34e>
 80041d0:	52002000 	.word	0x52002000
 80041d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d208      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f4:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	4939      	ldr	r1, [pc, #228]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004202:	4313      	orrs	r3, r2
 8004204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d010      	beq.n	8004234 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421e:	429a      	cmp	r2, r3
 8004220:	d208      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	492e      	ldr	r1, [pc, #184]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004230:	4313      	orrs	r3, r2
 8004232:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800424c:	429a      	cmp	r2, r3
 800424e:	d208      	bcs.n	8004262 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4922      	ldr	r1, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 800425e:	4313      	orrs	r3, r2
 8004260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800427a:	429a      	cmp	r2, r3
 800427c:	d208      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4917      	ldr	r1, [pc, #92]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 800428c:	4313      	orrs	r3, r2
 800428e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004290:	f000 f834 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4912      	ldr	r1, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x35c>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x358>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <HAL_RCC_ClockConfig+0x35c>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x360>)
 80042c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042c8:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x364>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x368>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd f9f2 	bl	80016bc <HAL_InitTick>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
 80042ec:	0800b9dc 	.word	0x0800b9dc
 80042f0:	24000010 	.word	0x24000010
 80042f4:	2400000c 	.word	0x2400000c
 80042f8:	24000014 	.word	0x24000014

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004302:	4bb3      	ldr	r3, [pc, #716]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430a:	2b18      	cmp	r3, #24
 800430c:	f200 8155 	bhi.w	80045ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800437d 	.word	0x0800437d
 800431c:	080045bb 	.word	0x080045bb
 8004320:	080045bb 	.word	0x080045bb
 8004324:	080045bb 	.word	0x080045bb
 8004328:	080045bb 	.word	0x080045bb
 800432c:	080045bb 	.word	0x080045bb
 8004330:	080045bb 	.word	0x080045bb
 8004334:	080045bb 	.word	0x080045bb
 8004338:	080043a3 	.word	0x080043a3
 800433c:	080045bb 	.word	0x080045bb
 8004340:	080045bb 	.word	0x080045bb
 8004344:	080045bb 	.word	0x080045bb
 8004348:	080045bb 	.word	0x080045bb
 800434c:	080045bb 	.word	0x080045bb
 8004350:	080045bb 	.word	0x080045bb
 8004354:	080045bb 	.word	0x080045bb
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080045bb 	.word	0x080045bb
 8004360:	080045bb 	.word	0x080045bb
 8004364:	080045bb 	.word	0x080045bb
 8004368:	080045bb 	.word	0x080045bb
 800436c:	080045bb 	.word	0x080045bb
 8004370:	080045bb 	.word	0x080045bb
 8004374:	080045bb 	.word	0x080045bb
 8004378:	080043af 	.word	0x080043af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b94      	ldr	r3, [pc, #592]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004388:	4b91      	ldr	r3, [pc, #580]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	4a90      	ldr	r2, [pc, #576]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800439a:	e111      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800439c:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800439e:	61bb      	str	r3, [r7, #24]
      break;
 80043a0:	e10e      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043a2:	4b8d      	ldr	r3, [pc, #564]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043a4:	61bb      	str	r3, [r7, #24]
      break;
 80043a6:	e10b      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043a8:	4b8c      	ldr	r3, [pc, #560]	; (80045dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043aa:	61bb      	str	r3, [r7, #24]
      break;
 80043ac:	e108      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043ae:	4b88      	ldr	r3, [pc, #544]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043b8:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043c4:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043ce:	4b80      	ldr	r3, [pc, #512]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80e1 	beq.w	80045b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	f000 8083 	beq.w	8004500 <HAL_RCC_GetSysClockFreq+0x204>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f200 80a1 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x248>
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x114>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d056      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800440e:	e099      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004410:	4b6f      	ldr	r3, [pc, #444]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800441c:	4b6c      	ldr	r3, [pc, #432]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	4a6b      	ldr	r2, [pc, #428]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
 800442c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b62      	ldr	r3, [pc, #392]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a02 	vldr	s12, [r7, #8]
 800445a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004476:	e087      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a58 	vldr	s13, [pc, #352]	; 80045e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a02 	vldr	s12, [r7, #8]
 800449e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ba:	e065      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80045e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044fe:	e043      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80045ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a02 	vldr	s12, [r7, #8]
 8004526:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004542:	e021      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80045e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a02 	vldr	s12, [r7, #8]
 800456a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004586:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	0a5b      	lsrs	r3, r3, #9
 800458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004592:	3301      	adds	r3, #1
 8004594:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ac:	ee17 3a90 	vmov	r3, s15
 80045b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045b2:	e005      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
      break;
 80045b8:	e002      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045bc:	61bb      	str	r3, [r7, #24]
      break;
 80045be:	bf00      	nop
  }

  return sysclockfreq;
 80045c0:	69bb      	ldr	r3, [r7, #24]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400
 80045d4:	03d09000 	.word	0x03d09000
 80045d8:	003d0900 	.word	0x003d0900
 80045dc:	017d7840 	.word	0x017d7840
 80045e0:	46000000 	.word	0x46000000
 80045e4:	4c742400 	.word	0x4c742400
 80045e8:	4a742400 	.word	0x4a742400
 80045ec:	4bbebc20 	.word	0x4bbebc20

080045f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045f6:	f7ff fe81 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCC_GetHCLKFreq+0x50>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	490f      	ldr	r1, [pc, #60]	; (8004644 <HAL_RCC_GetHCLKFreq+0x54>)
 8004608:	5ccb      	ldrb	r3, [r1, r3]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <HAL_RCC_GetHCLKFreq+0x50>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	4a09      	ldr	r2, [pc, #36]	; (8004644 <HAL_RCC_GetHCLKFreq+0x54>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_RCC_GetHCLKFreq+0x58>)
 800462c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_RCC_GetHCLKFreq+0x58>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024400 	.word	0x58024400
 8004644:	0800b9dc 	.word	0x0800b9dc
 8004648:	24000010 	.word	0x24000010
 800464c:	2400000c 	.word	0x2400000c

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004654:	f7ff ffcc 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	58024400 	.word	0x58024400
 8004678:	0800b9dc 	.word	0x0800b9dc

0800467c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004680:	f7ff ffb6 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58024400 	.word	0x58024400
 80046a4:	0800b9dc 	.word	0x0800b9dc

080046a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b0ca      	sub	sp, #296	; 0x128
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80046cc:	2500      	movs	r5, #0
 80046ce:	ea54 0305 	orrs.w	r3, r4, r5
 80046d2:	d049      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046de:	d02f      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046e4:	d828      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ea:	d01a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f0:	d822      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fa:	d007      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046fc:	e01c      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fe:	4bb8      	ldr	r3, [pc, #736]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4ab7      	ldr	r2, [pc, #732]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800470a:	e01a      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	3308      	adds	r3, #8
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fc8f 	bl	8006038 <RCCEx_PLL2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004720:	e00f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	3328      	adds	r3, #40	; 0x28
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fd36 	bl	800619c <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800474a:	4ba5      	ldr	r3, [pc, #660]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004758:	4aa1      	ldr	r2, [pc, #644]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6513      	str	r3, [r2, #80]	; 0x50
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	ea58 0309 	orrs.w	r3, r8, r9
 800477c:	d047      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	2b04      	cmp	r3, #4
 8004786:	d82a      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047a5 	.word	0x080047a5
 8004794:	080047b3 	.word	0x080047b3
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047e7 	.word	0x080047e7
 80047a0:	080047e7 	.word	0x080047e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b8e      	ldr	r3, [pc, #568]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a8d      	ldr	r2, [pc, #564]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047b0:	e01a      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b6:	3308      	adds	r3, #8
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fc3c 	bl	8006038 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c6:	e00f      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	3328      	adds	r3, #40	; 0x28
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 fce3 	bl	800619c <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047dc:	e004      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e4:	e000      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f0:	4b7b      	ldr	r3, [pc, #492]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	f023 0107 	bic.w	r1, r3, #7
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4a78      	ldr	r2, [pc, #480]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6513      	str	r3, [r2, #80]	; 0x50
 8004804:	e003      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800480a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800481a:	f04f 0b00 	mov.w	fp, #0
 800481e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004822:	d04c      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482e:	d030      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004834:	d829      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004836:	2bc0      	cmp	r3, #192	; 0xc0
 8004838:	d02d      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d825      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800483e:	2b80      	cmp	r3, #128	; 0x80
 8004840:	d018      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d821      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d007      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800484e:	e01c      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004850:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a62      	ldr	r2, [pc, #392]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800485c:	e01c      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004862:	3308      	adds	r3, #8
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fbe6 	bl	8006038 <RCCEx_PLL2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004872:	e011      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004878:	3328      	adds	r3, #40	; 0x28
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fc8d 	bl	800619c <RCCEx_PLL3_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048a0:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	4a4c      	ldr	r2, [pc, #304]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6513      	str	r3, [r2, #80]	; 0x50
 80048b4:	e003      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80048ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048ce:	2300      	movs	r3, #0
 80048d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d053      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ea:	d035      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80048ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f0:	d82e      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048f6:	d031      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80048f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048fc:	d828      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004902:	d01a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004908:	d822      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800490e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004912:	d007      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004914:	e01c      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004916:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004922:	e01c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	3308      	adds	r3, #8
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fb83 	bl	8006038 <RCCEx_PLL2_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004938:	e011      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	3328      	adds	r3, #40	; 0x28
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f001 fc2a 	bl	800619c <RCCEx_PLL3_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800494e:	e006      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004956:	e002      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004992:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004996:	2300      	movs	r3, #0
 8004998:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800499c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d056      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b2:	d038      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80049b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b8:	d831      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049be:	d034      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80049c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c4:	d82b      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ca:	d01d      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80049cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049d0:	d825      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80049d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80049dc:	e01f      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e4:	4ba2      	ldr	r3, [pc, #648]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4aa1      	ldr	r2, [pc, #644]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049f0:	e01c      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	3308      	adds	r3, #8
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fb1c 	bl	8006038 <RCCEx_PLL2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a06:	e011      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	3328      	adds	r3, #40	; 0x28
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fbc3 	bl	800619c <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a24:	e002      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a34:	4b8e      	ldr	r3, [pc, #568]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a44:	4a8a      	ldr	r2, [pc, #552]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4a:	e003      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d03a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	2b30      	cmp	r3, #48	; 0x30
 8004a7c:	d01f      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d819      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d00c      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d815      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d111      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a92:	4b77      	ldr	r3, [pc, #476]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a76      	ldr	r2, [pc, #472]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a9e:	e011      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fac5 	bl	8006038 <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004acc:	4b68      	ldr	r3, [pc, #416]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	4a65      	ldr	r2, [pc, #404]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004af6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d051      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d035      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1a:	d82e      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b20:	d031      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b26:	d828      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2c:	d01a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d822      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d007      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004b3e:	e01c      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b40:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a4a      	ldr	r2, [pc, #296]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	3308      	adds	r3, #8
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fa6e 	bl	8006038 <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b68:	3328      	adds	r3, #40	; 0x28
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fb15 	bl	800619c <RCCEx_PLL3_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	4a34      	ldr	r2, [pc, #208]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d056      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd8:	d033      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bde:	d82c      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004be4:	d02f      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bea:	d826      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf0:	d02b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf6:	d820      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bfc:	d012      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c02:	d81a      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d022      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d115      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	3308      	adds	r3, #8
 8004c14:	2101      	movs	r1, #1
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fa0e 	bl	8006038 <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c22:	e015      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	3328      	adds	r3, #40	; 0x28
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fab5 	bl	800619c <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c66:	4a02      	ldr	r2, [pc, #8]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d055      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d033      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cae:	d82c      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d02f      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d826      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc0:	d02b      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc6:	d820      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d012      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd2:	d81a      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cdc:	d115      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f9a6 	bl	8006038 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cf2:	e015      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fa4d 	bl	800619c <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d28:	4ba3      	ldr	r3, [pc, #652]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d38:	4a9f      	ldr	r2, [pc, #636]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d037      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d72:	d00e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d78:	d816      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d82:	d111      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b8c      	ldr	r3, [pc, #560]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4a8b      	ldr	r2, [pc, #556]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f94c 	bl	8006038 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dba:	4b7f      	ldr	r3, [pc, #508]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a7b      	ldr	r2, [pc, #492]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d039      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d81c      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e45 	.word	0x08004e45
 8004e0c:	08004e19 	.word	0x08004e19
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004e45 	.word	0x08004e45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e18:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a66      	ldr	r2, [pc, #408]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e24:	e00f      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 f902 	bl	8006038 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e3a:	e004      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e4e:	4b5a      	ldr	r3, [pc, #360]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	f023 0103 	bic.w	r1, r3, #3
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	4a56      	ldr	r2, [pc, #344]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f000 809f 	beq.w	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4a      	ldr	r2, [pc, #296]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fc59 	bl	8001750 <HAL_GetTick>
 8004e9e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fc fc54 	bl	8001750 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d903      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eba:	e005      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ed      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d179      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ed0:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004edc:	4053      	eors	r3, r2
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee6:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a30      	ldr	r2, [pc, #192]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004efe:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a2d      	ldr	r2, [pc, #180]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d118      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc fc16 	bl	8001750 <HAL_GetTick>
 8004f24:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f28:	e00d      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc fc11 	bl	8001750 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d903      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004f44:	e005      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0eb      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d129      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d10e      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f7c:	091a      	lsrs	r2, r3, #4
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6113      	str	r3, [r2, #16]
 8004f88:	e005      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f94:	6113      	str	r3, [r2, #16]
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa6:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	e00e      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004fb6:	e009      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	58024800 	.word	0x58024800
 8004fc0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f002 0301 	and.w	r3, r2, #1
 8004fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fe2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f000 8089 	beq.w	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff4:	2b28      	cmp	r3, #40	; 0x28
 8004ff6:	d86b      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	080050d9 	.word	0x080050d9
 8005004:	080050d1 	.word	0x080050d1
 8005008:	080050d1 	.word	0x080050d1
 800500c:	080050d1 	.word	0x080050d1
 8005010:	080050d1 	.word	0x080050d1
 8005014:	080050d1 	.word	0x080050d1
 8005018:	080050d1 	.word	0x080050d1
 800501c:	080050d1 	.word	0x080050d1
 8005020:	080050a5 	.word	0x080050a5
 8005024:	080050d1 	.word	0x080050d1
 8005028:	080050d1 	.word	0x080050d1
 800502c:	080050d1 	.word	0x080050d1
 8005030:	080050d1 	.word	0x080050d1
 8005034:	080050d1 	.word	0x080050d1
 8005038:	080050d1 	.word	0x080050d1
 800503c:	080050d1 	.word	0x080050d1
 8005040:	080050bb 	.word	0x080050bb
 8005044:	080050d1 	.word	0x080050d1
 8005048:	080050d1 	.word	0x080050d1
 800504c:	080050d1 	.word	0x080050d1
 8005050:	080050d1 	.word	0x080050d1
 8005054:	080050d1 	.word	0x080050d1
 8005058:	080050d1 	.word	0x080050d1
 800505c:	080050d1 	.word	0x080050d1
 8005060:	080050d9 	.word	0x080050d9
 8005064:	080050d1 	.word	0x080050d1
 8005068:	080050d1 	.word	0x080050d1
 800506c:	080050d1 	.word	0x080050d1
 8005070:	080050d1 	.word	0x080050d1
 8005074:	080050d1 	.word	0x080050d1
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050d1 	.word	0x080050d1
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050d1 	.word	0x080050d1
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050d1 	.word	0x080050d1
 8005090:	080050d1 	.word	0x080050d1
 8005094:	080050d1 	.word	0x080050d1
 8005098:	080050d1 	.word	0x080050d1
 800509c:	080050d1 	.word	0x080050d1
 80050a0:	080050d9 	.word	0x080050d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a8:	3308      	adds	r3, #8
 80050aa:	2101      	movs	r1, #1
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 ffc3 	bl	8006038 <RCCEx_PLL2_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050b8:	e00f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050be:	3328      	adds	r3, #40	; 0x28
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f86a 	bl	800619c <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050e2:	4bbf      	ldr	r3, [pc, #764]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f0:	4abb      	ldr	r2, [pc, #748]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6553      	str	r3, [r2, #84]	; 0x54
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 0302 	and.w	r3, r2, #2
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005116:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d041      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005126:	2b05      	cmp	r3, #5
 8005128:	d824      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	0800517d 	.word	0x0800517d
 8005134:	08005149 	.word	0x08005149
 8005138:	0800515f 	.word	0x0800515f
 800513c:	0800517d 	.word	0x0800517d
 8005140:	0800517d 	.word	0x0800517d
 8005144:	0800517d 	.word	0x0800517d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514c:	3308      	adds	r3, #8
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f000 ff71 	bl	8006038 <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800515c:	e00f      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005162:	3328      	adds	r3, #40	; 0x28
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f001 f818 	bl	800619c <RCCEx_PLL3_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005186:	4b96      	ldr	r3, [pc, #600]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f023 0107 	bic.w	r1, r3, #7
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005194:	4a92      	ldr	r2, [pc, #584]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005196:	430b      	orrs	r3, r1
 8005198:	6553      	str	r3, [r2, #84]	; 0x54
 800519a:	e003      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f002 0304 	and.w	r3, r2, #4
 80051b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b4:	2300      	movs	r3, #0
 80051b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d044      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d825      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	08005225 	.word	0x08005225
 80051dc:	080051f1 	.word	0x080051f1
 80051e0:	08005207 	.word	0x08005207
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005225 	.word	0x08005225
 80051ec:	08005225 	.word	0x08005225
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f4:	3308      	adds	r3, #8
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 ff1d 	bl	8006038 <RCCEx_PLL2_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005204:	e00f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520a:	3328      	adds	r3, #40	; 0x28
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f000 ffc4 	bl	800619c <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800521a:	e004      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800522e:	4b6c      	ldr	r3, [pc, #432]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f023 0107 	bic.w	r1, r3, #7
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	4a68      	ldr	r2, [pc, #416]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800524a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f002 0320 	and.w	r3, r2, #32
 800525a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d055      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800527a:	d033      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800527c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005280:	d82c      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d826      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800528e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005292:	d02b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005298:	d820      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800529a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529e:	d012      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a4:	d81a      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d022      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ae:	d115      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b4:	3308      	adds	r3, #8
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 febd 	bl	8006038 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052c4:	e015      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	3328      	adds	r3, #40	; 0x28
 80052cc:	2102      	movs	r1, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff64 	bl	800619c <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052da:	e00a      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052e2:	e006      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	4a35      	ldr	r2, [pc, #212]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800530c:	430b      	orrs	r3, r1
 800530e:	6553      	str	r3, [r2, #84]	; 0x54
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005330:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d058      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005346:	d033      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005348:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800534c:	d82c      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d02f      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d826      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800535a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535e:	d02b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005364:	d820      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d012      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	d81a      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d115      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005380:	3308      	adds	r3, #8
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fe57 	bl	8006038 <RCCEx_PLL2_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005390:	e015      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005396:	3328      	adds	r3, #40	; 0x28
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fefe 	bl	800619c <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053a6:	e00a      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10e      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d6:	4a02      	ldr	r2, [pc, #8]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80053f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005402:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d055      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005418:	d033      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800541a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800541e:	d82c      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005424:	d02f      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d826      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800542c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005430:	d02b      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005432:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005436:	d820      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543c:	d012      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d81a      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544c:	d115      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005452:	3308      	adds	r3, #8
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fdee 	bl	8006038 <RCCEx_PLL2_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005462:	e015      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005468:	3328      	adds	r3, #40	; 0x28
 800546a:	2102      	movs	r1, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fe95 	bl	800619c <RCCEx_PLL3_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005478:	e00a      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800548e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005498:	4ba1      	ldr	r3, [pc, #644]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054a8:	4a9d      	ldr	r2, [pc, #628]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	6593      	str	r3, [r2, #88]	; 0x58
 80054ae:	e003      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 0308 	and.w	r3, r2, #8
 80054c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d01e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ea:	3328      	adds	r3, #40	; 0x28
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fe54 	bl	800619c <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005500:	4b87      	ldr	r3, [pc, #540]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005510:	4a83      	ldr	r2, [pc, #524]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f002 0310 	and.w	r3, r2, #16
 8005522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800552c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d01e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	d10c      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	3328      	adds	r3, #40	; 0x28
 800554a:	2102      	movs	r1, #2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fe25 	bl	800619c <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800555e:	4b70      	ldr	r3, [pc, #448]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800556e:	4a6c      	ldr	r2, [pc, #432]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005584:	2300      	movs	r3, #0
 8005586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800558a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800558e:	460b      	mov	r3, r1
 8005590:	4313      	orrs	r3, r2
 8005592:	d03e      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a0:	d022      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a6:	d81b      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d00b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80055b2:	e015      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b8:	3308      	adds	r3, #8
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fd3b 	bl	8006038 <RCCEx_PLL2_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055c8:	e00f      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ce:	3328      	adds	r3, #40	; 0x28
 80055d0:	2102      	movs	r1, #2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fde2 	bl	800619c <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055de:	e004      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055e6:	e000      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80055e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f2:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005602:	4a47      	ldr	r2, [pc, #284]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6593      	str	r3, [r2, #88]	; 0x58
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800561e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005620:	2300      	movs	r3, #0
 8005622:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005624:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563a:	d01f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800563c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005640:	d818      	bhi.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d003      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800564c:	d007      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800564e:	e011      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005650:	4b33      	ldr	r3, [pc, #204]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4a32      	ldr	r2, [pc, #200]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800565c:	e00f      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005662:	3328      	adds	r3, #40	; 0x28
 8005664:	2101      	movs	r1, #1
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fd98 	bl	800619c <RCCEx_PLL3_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005672:	e004      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800567c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6553      	str	r3, [r2, #84]	; 0x54
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056b2:	673b      	str	r3, [r7, #112]	; 0x70
 80056b4:	2300      	movs	r3, #0
 80056b6:	677b      	str	r3, [r7, #116]	; 0x74
 80056b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d034      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d007      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80056d2:	e011      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056e0:	e00e      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	3308      	adds	r3, #8
 80056e8:	2102      	movs	r1, #2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fca4 	bl	8006038 <RCCEx_PLL2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	4a02      	ldr	r2, [pc, #8]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005718:	430b      	orrs	r3, r1
 800571a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005728:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005738:	66bb      	str	r3, [r7, #104]	; 0x68
 800573a:	2300      	movs	r3, #0
 800573c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800573e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d00c      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	3328      	adds	r3, #40	; 0x28
 800574e:	2102      	movs	r1, #2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fd23 	bl	800619c <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800576e:	663b      	str	r3, [r7, #96]	; 0x60
 8005770:	2300      	movs	r3, #0
 8005772:	667b      	str	r3, [r7, #100]	; 0x64
 8005774:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005778:	460b      	mov	r3, r1
 800577a:	4313      	orrs	r3, r2
 800577c:	d038      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578a:	d018      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800578c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005790:	d811      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d014      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d80b      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d011      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d106      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a8:	4bc3      	ldr	r3, [pc, #780]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4ac2      	ldr	r2, [pc, #776]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057b4:	e008      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057bc:	e004      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d0:	4bb9      	ldr	r3, [pc, #740]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e0:	4ab5      	ldr	r2, [pc, #724]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e2:	430b      	orrs	r3, r1
 80057e4:	6553      	str	r3, [r2, #84]	; 0x54
 80057e6:	e003      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057fe:	2300      	movs	r3, #0
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005802:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800580c:	4baa      	ldr	r3, [pc, #680]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581a:	4aa7      	ldr	r2, [pc, #668]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800581c:	430b      	orrs	r3, r1
 800581e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800582c:	653b      	str	r3, [r7, #80]	; 0x50
 800582e:	2300      	movs	r3, #0
 8005830:	657b      	str	r3, [r7, #84]	; 0x54
 8005832:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005836:	460b      	mov	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	d00a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800583c:	4b9e      	ldr	r3, [pc, #632]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800584c:	4a9a      	ldr	r2, [pc, #616]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800584e:	430b      	orrs	r3, r1
 8005850:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800585e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005860:	2300      	movs	r3, #0
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005864:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800586e:	4b92      	ldr	r3, [pc, #584]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587c:	4a8e      	ldr	r2, [pc, #568]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587e:	430b      	orrs	r3, r1
 8005880:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800588e:	643b      	str	r3, [r7, #64]	; 0x40
 8005890:	2300      	movs	r3, #0
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800589e:	4b86      	ldr	r3, [pc, #536]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	4a85      	ldr	r2, [pc, #532]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a8:	6113      	str	r3, [r2, #16]
 80058aa:	4b83      	ldr	r3, [pc, #524]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ac:	6919      	ldr	r1, [r3, #16]
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058b6:	4a80      	ldr	r2, [pc, #512]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ca:	2300      	movs	r3, #0
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058d2:	460b      	mov	r3, r1
 80058d4:	4313      	orrs	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058d8:	4b77      	ldr	r3, [pc, #476]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	4a74      	ldr	r2, [pc, #464]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30
 80058fa:	2300      	movs	r3, #0
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
 80058fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005902:	460b      	mov	r3, r1
 8005904:	4313      	orrs	r3, r2
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005908:	4b6b      	ldr	r3, [pc, #428]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	4a67      	ldr	r2, [pc, #412]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800591a:	430b      	orrs	r3, r1
 800591c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	2100      	movs	r1, #0
 8005928:	62b9      	str	r1, [r7, #40]	; 0x28
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005930:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d011      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593e:	3308      	adds	r3, #8
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fb78 	bl	8006038 <RCCEx_PLL2_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800594e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800595a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	2100      	movs	r1, #0
 8005968:	6239      	str	r1, [r7, #32]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d011      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597e:	3308      	adds	r3, #8
 8005980:	2101      	movs	r1, #1
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fb58 	bl	8006038 <RCCEx_PLL2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800598e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	2100      	movs	r1, #0
 80059a8:	61b9      	str	r1, [r7, #24]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d011      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	3308      	adds	r3, #8
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fb38 	bl	8006038 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	2100      	movs	r1, #0
 80059e8:	6139      	str	r1, [r7, #16]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059f4:	460b      	mov	r3, r1
 80059f6:	4313      	orrs	r3, r2
 80059f8:	d011      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fe:	3328      	adds	r3, #40	; 0x28
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fbca 	bl	800619c <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	2100      	movs	r1, #0
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d011      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fbaa 	bl	800619c <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	2100      	movs	r1, #0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d011      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3328      	adds	r3, #40	; 0x28
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb8a 	bl	800619c <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005a9e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab8:	58024400 	.word	0x58024400

08005abc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ac0:	f7fe fd96 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4904      	ldr	r1, [pc, #16]	; (8005ae4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	0800b9dc 	.word	0x0800b9dc

08005ae8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005af0:	4ba1      	ldr	r3, [pc, #644]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005afa:	4b9f      	ldr	r3, [pc, #636]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	0b1b      	lsrs	r3, r3, #12
 8005b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b06:	4b9c      	ldr	r3, [pc, #624]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	091b      	lsrs	r3, r3, #4
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b12:	4b99      	ldr	r3, [pc, #612]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	08db      	lsrs	r3, r3, #3
 8005b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8111 	beq.w	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f000 8083 	beq.w	8005c44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f200 80a1 	bhi.w	8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d056      	beq.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b52:	e099      	b.n	8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b54:	4b88      	ldr	r3, [pc, #544]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02d      	beq.n	8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b60:	4b85      	ldr	r3, [pc, #532]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	08db      	lsrs	r3, r3, #3
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	4a84      	ldr	r2, [pc, #528]	; (8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8a:	4b7b      	ldr	r3, [pc, #492]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bba:	e087      	b.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bfe:	e065      	b.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c42:	e043      	b.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b48      	ldr	r3, [pc, #288]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c86:	e021      	b.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b37      	ldr	r3, [pc, #220]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 2a90 	vmov	r2, s15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d20:	ee17 2a90 	vmov	r2, s15
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	0e1b      	lsrs	r3, r3, #24
 8005d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d56:	e008      	b.n	8005d6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
}
 8005d6a:	bf00      	nop
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	46000000 	.word	0x46000000
 8005d84:	4c742400 	.word	0x4c742400
 8005d88:	4a742400 	.word	0x4a742400
 8005d8c:	4bbebc20 	.word	0x4bbebc20

08005d90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d98:	4ba1      	ldr	r3, [pc, #644]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005da2:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	0d1b      	lsrs	r3, r3, #20
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dae:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005dba:	4b99      	ldr	r3, [pc, #612]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	08db      	lsrs	r3, r3, #3
 8005dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8111 	beq.w	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f000 8083 	beq.w	8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f200 80a1 	bhi.w	8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d056      	beq.n	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dfa:	e099      	b.n	8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfc:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02d      	beq.n	8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e08:	4b85      	ldr	r3, [pc, #532]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	4a84      	ldr	r2, [pc, #528]	; (8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e62:	e087      	b.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800602c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea6:	e065      	b.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b59      	ldr	r3, [pc, #356]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eea:	e043      	b.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b48      	ldr	r3, [pc, #288]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2e:	e021      	b.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	0a5b      	lsrs	r3, r3, #9
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	0c1b      	lsrs	r3, r3, #16
 8005fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc8:	ee17 2a90 	vmov	r2, s15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	0e1b      	lsrs	r3, r3, #24
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff6:	ee17 2a90 	vmov	r2, s15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ffe:	e008      	b.n	8006012 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
}
 8006012:	bf00      	nop
 8006014:	3724      	adds	r7, #36	; 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	03d09000 	.word	0x03d09000
 8006028:	46000000 	.word	0x46000000
 800602c:	4c742400 	.word	0x4c742400
 8006030:	4a742400 	.word	0x4a742400
 8006034:	4bbebc20 	.word	0x4bbebc20

08006038 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006046:	4b53      	ldr	r3, [pc, #332]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b03      	cmp	r3, #3
 8006050:	d101      	bne.n	8006056 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e099      	b.n	800618a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006056:	4b4f      	ldr	r3, [pc, #316]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a4e      	ldr	r2, [pc, #312]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800605c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006062:	f7fb fb75 	bl	8001750 <HAL_GetTick>
 8006066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006068:	e008      	b.n	800607c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800606a:	f7fb fb71 	bl	8001750 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e086      	b.n	800618a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800607c:	4b45      	ldr	r3, [pc, #276]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f0      	bne.n	800606a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006088:	4b42      	ldr	r3, [pc, #264]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	493f      	ldr	r1, [pc, #252]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006098:	4313      	orrs	r3, r2
 800609a:	628b      	str	r3, [r1, #40]	; 0x28
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	025b      	lsls	r3, r3, #9
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060cc:	4931      	ldr	r1, [pc, #196]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	492d      	ldr	r1, [pc, #180]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060e4:	4b2b      	ldr	r3, [pc, #172]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	f023 0220 	bic.w	r2, r3, #32
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	4928      	ldr	r1, [pc, #160]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a26      	ldr	r2, [pc, #152]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	f023 0310 	bic.w	r3, r3, #16
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <RCCEx_PLL2_Config+0x160>)
 8006108:	4013      	ands	r3, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	69d2      	ldr	r2, [r2, #28]
 800610e:	00d2      	lsls	r2, r2, #3
 8006110:	4920      	ldr	r1, [pc, #128]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006112:	4313      	orrs	r3, r2
 8006114:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006116:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800611c:	f043 0310 	orr.w	r3, r3, #16
 8006120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800612e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006132:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006134:	e00f      	b.n	8006156 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d106      	bne.n	800614a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800613c:	4b15      	ldr	r3, [pc, #84]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	4a14      	ldr	r2, [pc, #80]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006146:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006148:	e005      	b.n	8006156 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006154:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800615c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006162:	f7fb faf5 	bl	8001750 <HAL_GetTick>
 8006166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006168:	e008      	b.n	800617c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800616a:	f7fb faf1 	bl	8001750 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e006      	b.n	800618a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <RCCEx_PLL2_Config+0x15c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	58024400 	.word	0x58024400
 8006198:	ffff0007 	.word	0xffff0007

0800619c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061aa:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d101      	bne.n	80061ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e099      	b.n	80062ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4e      	ldr	r2, [pc, #312]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c6:	f7fb fac3 	bl	8001750 <HAL_GetTick>
 80061ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061ce:	f7fb fabf 	bl	8001750 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e086      	b.n	80062ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061e0:	4b45      	ldr	r3, [pc, #276]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061ec:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	051b      	lsls	r3, r3, #20
 80061fa:	493f      	ldr	r1, [pc, #252]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	3b01      	subs	r3, #1
 8006210:	025b      	lsls	r3, r3, #9
 8006212:	b29b      	uxth	r3, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	3b01      	subs	r3, #1
 800622a:	061b      	lsls	r3, r3, #24
 800622c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006230:	4931      	ldr	r1, [pc, #196]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006236:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	492d      	ldr	r1, [pc, #180]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	4928      	ldr	r1, [pc, #160]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <RCCEx_PLL3_Config+0x160>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	69d2      	ldr	r2, [r2, #28]
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	4920      	ldr	r1, [pc, #128]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800628c:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 8006292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006298:	e00f      	b.n	80062ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d106      	bne.n	80062ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062a0:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062ac:	e005      	b.n	80062ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c6:	f7fb fa43 	bl	8001750 <HAL_GetTick>
 80062ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062cc:	e008      	b.n	80062e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062ce:	f7fb fa3f 	bl	8001750 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	ffff0007 	.word	0xffff0007

08006300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e042      	b.n	8006398 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	2b00      	cmp	r3, #0
 800631a:	d106      	bne.n	800632a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7fa ff71 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2224      	movs	r2, #36	; 0x24
 800632e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fce0 	bl	8006d08 <UART_SetConfig>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e022      	b.n	8006398 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fa3c 	bl	80077d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800636e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800637e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fac3 	bl	800791c <UART_CheckIdleState>
 8006396:	4603      	mov	r3, r0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d17b      	bne.n	80064b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_UART_Transmit+0x26>
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e074      	b.n	80064b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063da:	f7fb f9b9 	bl	8001750 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f8:	d108      	bne.n	800640c <HAL_UART_Transmit+0x6c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e003      	b.n	8006414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006414:	e030      	b.n	8006478 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f001 fb25 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e03d      	b.n	80064b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3302      	adds	r3, #2
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e007      	b.n	8006466 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	3301      	adds	r3, #1
 8006464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1c8      	bne.n	8006416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 faee 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e006      	b.n	80064b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e000      	b.n	80064b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d137      	bne.n	8006544 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Receive_IT+0x24>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e030      	b.n	8006546 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_UART_Receive_IT+0x94>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01f      	beq.n	8006534 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	613b      	str	r3, [r7, #16]
   return(result);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	69f9      	ldr	r1, [r7, #28]
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	61bb      	str	r3, [r7, #24]
   return(result);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	461a      	mov	r2, r3
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f001 fb00 	bl	8007b40 <UART_Start_Receive_IT>
 8006540:	4603      	mov	r3, r0
 8006542:	e000      	b.n	8006546 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	; 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	58000c00 	.word	0x58000c00

08006554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b0ba      	sub	sp, #232	; 0xe8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800657a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800657e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006582:	4013      	ands	r3, r2
 8006584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d11b      	bne.n	80065c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d015      	beq.n	80065c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8377 	beq.w	8006cac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      }
      return;
 80065c6:	e371      	b.n	8006cac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8123 	beq.w	8006818 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065d6:	4b8d      	ldr	r3, [pc, #564]	; (800680c <HAL_UART_IRQHandler+0x2b8>)
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065e2:	4b8b      	ldr	r3, [pc, #556]	; (8006810 <HAL_UART_IRQHandler+0x2bc>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8116 	beq.w	8006818 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d011      	beq.n	800661c <HAL_UART_IRQHandler+0xc8>
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2201      	movs	r2, #1
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_UART_IRQHandler+0xf8>
 8006628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2202      	movs	r2, #2
 800663a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f043 0204 	orr.w	r2, r3, #4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800664c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d011      	beq.n	800667c <HAL_UART_IRQHandler+0x128>
 8006658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2204      	movs	r2, #4
 800666a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f043 0202 	orr.w	r2, r3, #2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d017      	beq.n	80066b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006694:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006698:	4b5c      	ldr	r3, [pc, #368]	; (800680c <HAL_UART_IRQHandler+0x2b8>)
 800669a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2208      	movs	r2, #8
 80066a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ae:	f043 0208 	orr.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d012      	beq.n	80066ea <HAL_UART_IRQHandler+0x196>
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 82dd 	beq.w	8006cb0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800670e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006746:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674a:	2b00      	cmp	r3, #0
 800674c:	d054      	beq.n	80067f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fb18 	bl	8007d84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d146      	bne.n	80067f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800677c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800678e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800679a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1d9      	bne.n	8006762 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d017      	beq.n	80067e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067be:	4a15      	ldr	r2, [pc, #84]	; (8006814 <HAL_UART_IRQHandler+0x2c0>)
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fb fc2b 	bl	8002024 <HAL_DMA_Abort_IT>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d019      	beq.n	8006808 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e6:	e00f      	b.n	8006808 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa77 	bl	8006cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	e00b      	b.n	8006808 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa73 	bl	8006cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f6:	e007      	b.n	8006808 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa6f 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006806:	e253      	b.n	8006cb0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	bf00      	nop
    return;
 800680a:	e251      	b.n	8006cb0 <HAL_UART_IRQHandler+0x75c>
 800680c:	10000001 	.word	0x10000001
 8006810:	04000120 	.word	0x04000120
 8006814:	08007e51 	.word	0x08007e51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800681c:	2b01      	cmp	r3, #1
 800681e:	f040 81e7 	bne.w	8006bf0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 81e0 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 81d9 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2210      	movs	r2, #16
 8006844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	f040 8151 	bne.w	8006af8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a96      	ldr	r2, [pc, #600]	; (8006ab8 <HAL_UART_IRQHandler+0x564>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d068      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a93      	ldr	r2, [pc, #588]	; (8006abc <HAL_UART_IRQHandler+0x568>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d061      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a91      	ldr	r2, [pc, #580]	; (8006ac0 <HAL_UART_IRQHandler+0x56c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d05a      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a8e      	ldr	r2, [pc, #568]	; (8006ac4 <HAL_UART_IRQHandler+0x570>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d053      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a8c      	ldr	r2, [pc, #560]	; (8006ac8 <HAL_UART_IRQHandler+0x574>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04c      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a89      	ldr	r2, [pc, #548]	; (8006acc <HAL_UART_IRQHandler+0x578>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d045      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a87      	ldr	r2, [pc, #540]	; (8006ad0 <HAL_UART_IRQHandler+0x57c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d03e      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a84      	ldr	r2, [pc, #528]	; (8006ad4 <HAL_UART_IRQHandler+0x580>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d037      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a82      	ldr	r2, [pc, #520]	; (8006ad8 <HAL_UART_IRQHandler+0x584>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d030      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a7f      	ldr	r2, [pc, #508]	; (8006adc <HAL_UART_IRQHandler+0x588>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d029      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7d      	ldr	r2, [pc, #500]	; (8006ae0 <HAL_UART_IRQHandler+0x58c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d022      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a7a      	ldr	r2, [pc, #488]	; (8006ae4 <HAL_UART_IRQHandler+0x590>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a78      	ldr	r2, [pc, #480]	; (8006ae8 <HAL_UART_IRQHandler+0x594>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d014      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a75      	ldr	r2, [pc, #468]	; (8006aec <HAL_UART_IRQHandler+0x598>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00d      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a73      	ldr	r2, [pc, #460]	; (8006af0 <HAL_UART_IRQHandler+0x59c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d006      	beq.n	8006936 <HAL_UART_IRQHandler+0x3e2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a70      	ldr	r2, [pc, #448]	; (8006af4 <HAL_UART_IRQHandler+0x5a0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d106      	bne.n	8006944 <HAL_UART_IRQHandler+0x3f0>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	b29b      	uxth	r3, r3
 8006942:	e005      	b.n	8006950 <HAL_UART_IRQHandler+0x3fc>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 81ab 	beq.w	8006cb4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006968:	429a      	cmp	r2, r3
 800696a:	f080 81a3 	bcs.w	8006cb4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006974:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006984:	f000 8087 	beq.w	8006a96 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800699c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1da      	bne.n	8006988 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e1      	bne.n	80069d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e3      	bne.n	8006a0e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e4      	bne.n	8006a54 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa ffa9 	bl	80019e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f91d 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ab6:	e0fd      	b.n	8006cb4 <HAL_UART_IRQHandler+0x760>
 8006ab8:	40020010 	.word	0x40020010
 8006abc:	40020028 	.word	0x40020028
 8006ac0:	40020040 	.word	0x40020040
 8006ac4:	40020058 	.word	0x40020058
 8006ac8:	40020070 	.word	0x40020070
 8006acc:	40020088 	.word	0x40020088
 8006ad0:	400200a0 	.word	0x400200a0
 8006ad4:	400200b8 	.word	0x400200b8
 8006ad8:	40020410 	.word	0x40020410
 8006adc:	40020428 	.word	0x40020428
 8006ae0:	40020440 	.word	0x40020440
 8006ae4:	40020458 	.word	0x40020458
 8006ae8:	40020470 	.word	0x40020470
 8006aec:	40020488 	.word	0x40020488
 8006af0:	400204a0 	.word	0x400204a0
 8006af4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80cf 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80ca 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
 8006b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e4      	bne.n	8006b24 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6a:	6a3a      	ldr	r2, [r7, #32]
 8006b6c:	4b55      	ldr	r3, [pc, #340]	; (8006cc4 <HAL_UART_IRQHandler+0x770>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e4      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f881 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bee:	e063      	b.n	8006cb8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00e      	beq.n	8006c1a <HAL_UART_IRQHandler+0x6c6>
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fe7a 	bl	800890c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c18:	e051      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d014      	beq.n	8006c50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d03a      	beq.n	8006cbc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
    }
    return;
 8006c4e:	e035      	b.n	8006cbc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <HAL_UART_IRQHandler+0x71c>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f907 	bl	8007e7c <UART_EndTransmit_IT>
    return;
 8006c6e:	e026      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <HAL_UART_IRQHandler+0x73c>
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe53 	bl	8008934 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c8e:	e016      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_UART_IRQHandler+0x76a>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da0c      	bge.n	8006cbe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fe3b 	bl	8008920 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006caa:	e008      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
      return;
 8006cac:	bf00      	nop
 8006cae:	e006      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
    return;
 8006cb0:	bf00      	nop
 8006cb2:	e004      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
      return;
 8006cb4:	bf00      	nop
 8006cb6:	e002      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
      return;
 8006cb8:	bf00      	nop
 8006cba:	e000      	b.n	8006cbe <HAL_UART_IRQHandler+0x76a>
    return;
 8006cbc:	bf00      	nop
  }
}
 8006cbe:	37e8      	adds	r7, #232	; 0xe8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	effffffe 	.word	0xeffffffe

08006cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d0c:	b092      	sub	sp, #72	; 0x48
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4bbe      	ldr	r3, [pc, #760]	; (8007030 <UART_SetConfig+0x328>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4ab3      	ldr	r2, [pc, #716]	; (8007034 <UART_SetConfig+0x32c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d70:	4313      	orrs	r3, r2
 8006d72:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	4baf      	ldr	r3, [pc, #700]	; (8007038 <UART_SetConfig+0x330>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f023 010f 	bic.w	r1, r3, #15
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4aa6      	ldr	r2, [pc, #664]	; (800703c <UART_SetConfig+0x334>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d177      	bne.n	8006e98 <UART_SetConfig+0x190>
 8006da8:	4ba5      	ldr	r3, [pc, #660]	; (8007040 <UART_SetConfig+0x338>)
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db0:	2b28      	cmp	r3, #40	; 0x28
 8006db2:	d86d      	bhi.n	8006e90 <UART_SetConfig+0x188>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <UART_SetConfig+0xb4>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006e61 	.word	0x08006e61
 8006dc0:	08006e91 	.word	0x08006e91
 8006dc4:	08006e91 	.word	0x08006e91
 8006dc8:	08006e91 	.word	0x08006e91
 8006dcc:	08006e91 	.word	0x08006e91
 8006dd0:	08006e91 	.word	0x08006e91
 8006dd4:	08006e91 	.word	0x08006e91
 8006dd8:	08006e91 	.word	0x08006e91
 8006ddc:	08006e69 	.word	0x08006e69
 8006de0:	08006e91 	.word	0x08006e91
 8006de4:	08006e91 	.word	0x08006e91
 8006de8:	08006e91 	.word	0x08006e91
 8006dec:	08006e91 	.word	0x08006e91
 8006df0:	08006e91 	.word	0x08006e91
 8006df4:	08006e91 	.word	0x08006e91
 8006df8:	08006e91 	.word	0x08006e91
 8006dfc:	08006e71 	.word	0x08006e71
 8006e00:	08006e91 	.word	0x08006e91
 8006e04:	08006e91 	.word	0x08006e91
 8006e08:	08006e91 	.word	0x08006e91
 8006e0c:	08006e91 	.word	0x08006e91
 8006e10:	08006e91 	.word	0x08006e91
 8006e14:	08006e91 	.word	0x08006e91
 8006e18:	08006e91 	.word	0x08006e91
 8006e1c:	08006e79 	.word	0x08006e79
 8006e20:	08006e91 	.word	0x08006e91
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e91 	.word	0x08006e91
 8006e30:	08006e91 	.word	0x08006e91
 8006e34:	08006e91 	.word	0x08006e91
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006e81 	.word	0x08006e81
 8006e40:	08006e91 	.word	0x08006e91
 8006e44:	08006e91 	.word	0x08006e91
 8006e48:	08006e91 	.word	0x08006e91
 8006e4c:	08006e91 	.word	0x08006e91
 8006e50:	08006e91 	.word	0x08006e91
 8006e54:	08006e91 	.word	0x08006e91
 8006e58:	08006e91 	.word	0x08006e91
 8006e5c:	08006e89 	.word	0x08006e89
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e222      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6e:	e21e      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e70:	2308      	movs	r3, #8
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e76:	e21a      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e216      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e80:	2320      	movs	r3, #32
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e212      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e88:	2340      	movs	r3, #64	; 0x40
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e20e      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e20a      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a69      	ldr	r2, [pc, #420]	; (8007044 <UART_SetConfig+0x33c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d130      	bne.n	8006f04 <UART_SetConfig+0x1fc>
 8006ea2:	4b67      	ldr	r3, [pc, #412]	; (8007040 <UART_SetConfig+0x338>)
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	d826      	bhi.n	8006efc <UART_SetConfig+0x1f4>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <UART_SetConfig+0x1ac>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ecd 	.word	0x08006ecd
 8006eb8:	08006ed5 	.word	0x08006ed5
 8006ebc:	08006edd 	.word	0x08006edd
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e1ec      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eda:	e1e8      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006edc:	2308      	movs	r3, #8
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e1e4      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e1e0      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006eec:	2320      	movs	r3, #32
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e1dc      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006ef4:	2340      	movs	r3, #64	; 0x40
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e1d8      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e1d4      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a4f      	ldr	r2, [pc, #316]	; (8007048 <UART_SetConfig+0x340>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d130      	bne.n	8006f70 <UART_SetConfig+0x268>
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	; (8007040 <UART_SetConfig+0x338>)
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d826      	bhi.n	8006f68 <UART_SetConfig+0x260>
 8006f1a:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x218>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f39 	.word	0x08006f39
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3e:	e1b6      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f46:	e1b2      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e1ae      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e1aa      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f58:	2320      	movs	r3, #32
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e1a6      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e1a2      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e19e      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a35      	ldr	r2, [pc, #212]	; (800704c <UART_SetConfig+0x344>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d130      	bne.n	8006fdc <UART_SetConfig+0x2d4>
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <UART_SetConfig+0x338>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d826      	bhi.n	8006fd4 <UART_SetConfig+0x2cc>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <UART_SetConfig+0x284>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006fad 	.word	0x08006fad
 8006f94:	08006fb5 	.word	0x08006fb5
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006faa:	e180      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb2:	e17c      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e178      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e174      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e170      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e16c      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e168      	b.n	80072ae <UART_SetConfig+0x5a6>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <UART_SetConfig+0x348>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d142      	bne.n	800706c <UART_SetConfig+0x364>
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <UART_SetConfig+0x338>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d838      	bhi.n	8007064 <UART_SetConfig+0x35c>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x2f0>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007021 	.word	0x08007021
 8007004:	08007029 	.word	0x08007029
 8007008:	08007055 	.word	0x08007055
 800700c:	0800705d 	.word	0x0800705d
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e14a      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e146      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e142      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e13e      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007030:	cfff69f3 	.word	0xcfff69f3
 8007034:	58000c00 	.word	0x58000c00
 8007038:	11fff4ff 	.word	0x11fff4ff
 800703c:	40011000 	.word	0x40011000
 8007040:	58024400 	.word	0x58024400
 8007044:	40004400 	.word	0x40004400
 8007048:	40004800 	.word	0x40004800
 800704c:	40004c00 	.word	0x40004c00
 8007050:	40005000 	.word	0x40005000
 8007054:	2320      	movs	r3, #32
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e128      	b.n	80072ae <UART_SetConfig+0x5a6>
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e124      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e120      	b.n	80072ae <UART_SetConfig+0x5a6>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4acb      	ldr	r2, [pc, #812]	; (80073a0 <UART_SetConfig+0x698>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d176      	bne.n	8007164 <UART_SetConfig+0x45c>
 8007076:	4bcb      	ldr	r3, [pc, #812]	; (80073a4 <UART_SetConfig+0x69c>)
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800707e:	2b28      	cmp	r3, #40	; 0x28
 8007080:	d86c      	bhi.n	800715c <UART_SetConfig+0x454>
 8007082:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x380>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	0800712d 	.word	0x0800712d
 800708c:	0800715d 	.word	0x0800715d
 8007090:	0800715d 	.word	0x0800715d
 8007094:	0800715d 	.word	0x0800715d
 8007098:	0800715d 	.word	0x0800715d
 800709c:	0800715d 	.word	0x0800715d
 80070a0:	0800715d 	.word	0x0800715d
 80070a4:	0800715d 	.word	0x0800715d
 80070a8:	08007135 	.word	0x08007135
 80070ac:	0800715d 	.word	0x0800715d
 80070b0:	0800715d 	.word	0x0800715d
 80070b4:	0800715d 	.word	0x0800715d
 80070b8:	0800715d 	.word	0x0800715d
 80070bc:	0800715d 	.word	0x0800715d
 80070c0:	0800715d 	.word	0x0800715d
 80070c4:	0800715d 	.word	0x0800715d
 80070c8:	0800713d 	.word	0x0800713d
 80070cc:	0800715d 	.word	0x0800715d
 80070d0:	0800715d 	.word	0x0800715d
 80070d4:	0800715d 	.word	0x0800715d
 80070d8:	0800715d 	.word	0x0800715d
 80070dc:	0800715d 	.word	0x0800715d
 80070e0:	0800715d 	.word	0x0800715d
 80070e4:	0800715d 	.word	0x0800715d
 80070e8:	08007145 	.word	0x08007145
 80070ec:	0800715d 	.word	0x0800715d
 80070f0:	0800715d 	.word	0x0800715d
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	0800715d 	.word	0x0800715d
 80070fc:	0800715d 	.word	0x0800715d
 8007100:	0800715d 	.word	0x0800715d
 8007104:	0800715d 	.word	0x0800715d
 8007108:	0800714d 	.word	0x0800714d
 800710c:	0800715d 	.word	0x0800715d
 8007110:	0800715d 	.word	0x0800715d
 8007114:	0800715d 	.word	0x0800715d
 8007118:	0800715d 	.word	0x0800715d
 800711c:	0800715d 	.word	0x0800715d
 8007120:	0800715d 	.word	0x0800715d
 8007124:	0800715d 	.word	0x0800715d
 8007128:	08007155 	.word	0x08007155
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e0bc      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e0b8      	b.n	80072ae <UART_SetConfig+0x5a6>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e0b4      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e0b0      	b.n	80072ae <UART_SetConfig+0x5a6>
 800714c:	2320      	movs	r3, #32
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e0ac      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007154:	2340      	movs	r3, #64	; 0x40
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e0a8      	b.n	80072ae <UART_SetConfig+0x5a6>
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e0a4      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a8f      	ldr	r2, [pc, #572]	; (80073a8 <UART_SetConfig+0x6a0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d130      	bne.n	80071d0 <UART_SetConfig+0x4c8>
 800716e:	4b8d      	ldr	r3, [pc, #564]	; (80073a4 <UART_SetConfig+0x69c>)
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	2b05      	cmp	r3, #5
 8007178:	d826      	bhi.n	80071c8 <UART_SetConfig+0x4c0>
 800717a:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x478>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	08007199 	.word	0x08007199
 8007184:	080071a1 	.word	0x080071a1
 8007188:	080071a9 	.word	0x080071a9
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b9 	.word	0x080071b9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	2300      	movs	r3, #0
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e086      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e082      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e07e      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e07a      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071b8:	2320      	movs	r3, #32
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e076      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e072      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ce:	e06e      	b.n	80072ae <UART_SetConfig+0x5a6>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a75      	ldr	r2, [pc, #468]	; (80073ac <UART_SetConfig+0x6a4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d130      	bne.n	800723c <UART_SetConfig+0x534>
 80071da:	4b72      	ldr	r3, [pc, #456]	; (80073a4 <UART_SetConfig+0x69c>)
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d826      	bhi.n	8007234 <UART_SetConfig+0x52c>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <UART_SetConfig+0x4e4>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007205 	.word	0x08007205
 80071f0:	0800720d 	.word	0x0800720d
 80071f4:	08007215 	.word	0x08007215
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720a:	e050      	b.n	80072ae <UART_SetConfig+0x5a6>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e04c      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e048      	b.n	80072ae <UART_SetConfig+0x5a6>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e044      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007224:	2320      	movs	r3, #32
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e040      	b.n	80072ae <UART_SetConfig+0x5a6>
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e03c      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e038      	b.n	80072ae <UART_SetConfig+0x5a6>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5b      	ldr	r2, [pc, #364]	; (80073b0 <UART_SetConfig+0x6a8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d130      	bne.n	80072a8 <UART_SetConfig+0x5a0>
 8007246:	4b57      	ldr	r3, [pc, #348]	; (80073a4 <UART_SetConfig+0x69c>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	2b05      	cmp	r3, #5
 8007250:	d826      	bhi.n	80072a0 <UART_SetConfig+0x598>
 8007252:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x550>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007271 	.word	0x08007271
 800725c:	08007279 	.word	0x08007279
 8007260:	08007281 	.word	0x08007281
 8007264:	08007289 	.word	0x08007289
 8007268:	08007291 	.word	0x08007291
 800726c:	08007299 	.word	0x08007299
 8007270:	2302      	movs	r3, #2
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e01a      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e016      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e012      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e00e      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007290:	2320      	movs	r3, #32
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e00a      	b.n	80072ae <UART_SetConfig+0x5a6>
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729e:	e006      	b.n	80072ae <UART_SetConfig+0x5a6>
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a6:	e002      	b.n	80072ae <UART_SetConfig+0x5a6>
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a3f      	ldr	r2, [pc, #252]	; (80073b0 <UART_SetConfig+0x6a8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	f040 80f8 	bne.w	80074aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072be:	2b20      	cmp	r3, #32
 80072c0:	dc46      	bgt.n	8007350 <UART_SetConfig+0x648>
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	f2c0 8082 	blt.w	80073cc <UART_SetConfig+0x6c4>
 80072c8:	3b02      	subs	r3, #2
 80072ca:	2b1e      	cmp	r3, #30
 80072cc:	d87e      	bhi.n	80073cc <UART_SetConfig+0x6c4>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0x5cc>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	08007357 	.word	0x08007357
 80072d8:	080073cd 	.word	0x080073cd
 80072dc:	0800735f 	.word	0x0800735f
 80072e0:	080073cd 	.word	0x080073cd
 80072e4:	080073cd 	.word	0x080073cd
 80072e8:	080073cd 	.word	0x080073cd
 80072ec:	0800736f 	.word	0x0800736f
 80072f0:	080073cd 	.word	0x080073cd
 80072f4:	080073cd 	.word	0x080073cd
 80072f8:	080073cd 	.word	0x080073cd
 80072fc:	080073cd 	.word	0x080073cd
 8007300:	080073cd 	.word	0x080073cd
 8007304:	080073cd 	.word	0x080073cd
 8007308:	080073cd 	.word	0x080073cd
 800730c:	0800737f 	.word	0x0800737f
 8007310:	080073cd 	.word	0x080073cd
 8007314:	080073cd 	.word	0x080073cd
 8007318:	080073cd 	.word	0x080073cd
 800731c:	080073cd 	.word	0x080073cd
 8007320:	080073cd 	.word	0x080073cd
 8007324:	080073cd 	.word	0x080073cd
 8007328:	080073cd 	.word	0x080073cd
 800732c:	080073cd 	.word	0x080073cd
 8007330:	080073cd 	.word	0x080073cd
 8007334:	080073cd 	.word	0x080073cd
 8007338:	080073cd 	.word	0x080073cd
 800733c:	080073cd 	.word	0x080073cd
 8007340:	080073cd 	.word	0x080073cd
 8007344:	080073cd 	.word	0x080073cd
 8007348:	080073cd 	.word	0x080073cd
 800734c:	080073bf 	.word	0x080073bf
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d037      	beq.n	80073c4 <UART_SetConfig+0x6bc>
 8007354:	e03a      	b.n	80073cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007356:	f7fe fbb1 	bl	8005abc <HAL_RCCEx_GetD3PCLK1Freq>
 800735a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800735c:	e03c      	b.n	80073d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fbc0 	bl	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800736c:	e034      	b.n	80073d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fd0c 	bl	8005d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737c:	e02c      	b.n	80073d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <UART_SetConfig+0x69c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <UART_SetConfig+0x69c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	08db      	lsrs	r3, r3, #3
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	4a07      	ldr	r2, [pc, #28]	; (80073b4 <UART_SetConfig+0x6ac>)
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800739c:	e01c      	b.n	80073d8 <UART_SetConfig+0x6d0>
 800739e:	bf00      	nop
 80073a0:	40011400 	.word	0x40011400
 80073a4:	58024400 	.word	0x58024400
 80073a8:	40007800 	.word	0x40007800
 80073ac:	40007c00 	.word	0x40007c00
 80073b0:	58000c00 	.word	0x58000c00
 80073b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b9d      	ldr	r3, [pc, #628]	; (8007630 <UART_SetConfig+0x928>)
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073bc:	e00c      	b.n	80073d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073be:	4b9d      	ldr	r3, [pc, #628]	; (8007634 <UART_SetConfig+0x92c>)
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c2:	e009      	b.n	80073d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ca:	e005      	b.n	80073d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 81de 	beq.w	800779c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	4a94      	ldr	r2, [pc, #592]	; (8007638 <UART_SetConfig+0x930>)
 80073e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007400:	429a      	cmp	r2, r3
 8007402:	d305      	bcc.n	8007410 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740c:	429a      	cmp	r2, r3
 800740e:	d903      	bls.n	8007418 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007416:	e1c1      	b.n	800779c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741a:	2200      	movs	r2, #0
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	60fa      	str	r2, [r7, #12]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	4a84      	ldr	r2, [pc, #528]	; (8007638 <UART_SetConfig+0x930>)
 8007426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742a:	b29b      	uxth	r3, r3
 800742c:	2200      	movs	r2, #0
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800743a:	f7f8 ffa9 	bl	8000390 <__aeabi_uldivmod>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4610      	mov	r0, r2
 8007444:	4619      	mov	r1, r3
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	020b      	lsls	r3, r1, #8
 8007450:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007454:	0202      	lsls	r2, r0, #8
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	6849      	ldr	r1, [r1, #4]
 800745a:	0849      	lsrs	r1, r1, #1
 800745c:	2000      	movs	r0, #0
 800745e:	460c      	mov	r4, r1
 8007460:	4605      	mov	r5, r0
 8007462:	eb12 0804 	adds.w	r8, r2, r4
 8007466:	eb43 0905 	adc.w	r9, r3, r5
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	469a      	mov	sl, r3
 8007472:	4693      	mov	fp, r2
 8007474:	4652      	mov	r2, sl
 8007476:	465b      	mov	r3, fp
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f8 ff88 	bl	8000390 <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4613      	mov	r3, r2
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748e:	d308      	bcc.n	80074a2 <UART_SetConfig+0x79a>
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007496:	d204      	bcs.n	80074a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749e:	60da      	str	r2, [r3, #12]
 80074a0:	e17c      	b.n	800779c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074a8:	e178      	b.n	800779c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b2:	f040 80c5 	bne.w	8007640 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80074b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	dc48      	bgt.n	8007550 <UART_SetConfig+0x848>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	db7b      	blt.n	80075ba <UART_SetConfig+0x8b2>
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d879      	bhi.n	80075ba <UART_SetConfig+0x8b2>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0x7c4>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007557 	.word	0x08007557
 80074d0:	0800755f 	.word	0x0800755f
 80074d4:	080075bb 	.word	0x080075bb
 80074d8:	080075bb 	.word	0x080075bb
 80074dc:	08007567 	.word	0x08007567
 80074e0:	080075bb 	.word	0x080075bb
 80074e4:	080075bb 	.word	0x080075bb
 80074e8:	080075bb 	.word	0x080075bb
 80074ec:	08007577 	.word	0x08007577
 80074f0:	080075bb 	.word	0x080075bb
 80074f4:	080075bb 	.word	0x080075bb
 80074f8:	080075bb 	.word	0x080075bb
 80074fc:	080075bb 	.word	0x080075bb
 8007500:	080075bb 	.word	0x080075bb
 8007504:	080075bb 	.word	0x080075bb
 8007508:	080075bb 	.word	0x080075bb
 800750c:	08007587 	.word	0x08007587
 8007510:	080075bb 	.word	0x080075bb
 8007514:	080075bb 	.word	0x080075bb
 8007518:	080075bb 	.word	0x080075bb
 800751c:	080075bb 	.word	0x080075bb
 8007520:	080075bb 	.word	0x080075bb
 8007524:	080075bb 	.word	0x080075bb
 8007528:	080075bb 	.word	0x080075bb
 800752c:	080075bb 	.word	0x080075bb
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075bb 	.word	0x080075bb
 8007538:	080075bb 	.word	0x080075bb
 800753c:	080075bb 	.word	0x080075bb
 8007540:	080075bb 	.word	0x080075bb
 8007544:	080075bb 	.word	0x080075bb
 8007548:	080075bb 	.word	0x080075bb
 800754c:	080075ad 	.word	0x080075ad
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d02e      	beq.n	80075b2 <UART_SetConfig+0x8aa>
 8007554:	e031      	b.n	80075ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007556:	f7fd f87b 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 800755a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800755c:	e033      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800755e:	f7fd f88d 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 8007562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007564:	e02f      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fabc 	bl	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007574:	e027      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007576:	f107 0318 	add.w	r3, r7, #24
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fc08 	bl	8005d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007584:	e01f      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007586:	4b2d      	ldr	r3, [pc, #180]	; (800763c <UART_SetConfig+0x934>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007592:	4b2a      	ldr	r3, [pc, #168]	; (800763c <UART_SetConfig+0x934>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	4a24      	ldr	r2, [pc, #144]	; (8007630 <UART_SetConfig+0x928>)
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075a4:	e00f      	b.n	80075c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075a6:	4b22      	ldr	r3, [pc, #136]	; (8007630 <UART_SetConfig+0x928>)
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075aa:	e00c      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <UART_SetConfig+0x92c>)
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b0:	e009      	b.n	80075c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b8:	e005      	b.n	80075c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80e7 	beq.w	800779c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	4a19      	ldr	r2, [pc, #100]	; (8007638 <UART_SetConfig+0x930>)
 80075d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d8:	461a      	mov	r2, r3
 80075da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e0:	005a      	lsls	r2, r3, #1
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	085b      	lsrs	r3, r3, #1
 80075e8:	441a      	add	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d916      	bls.n	8007628 <UART_SetConfig+0x920>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007600:	d212      	bcs.n	8007628 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	b29b      	uxth	r3, r3
 8007606:	f023 030f 	bic.w	r3, r3, #15
 800760a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	b29b      	uxth	r3, r3
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	b29a      	uxth	r2, r3
 8007618:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800761a:	4313      	orrs	r3, r2
 800761c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	e0b9      	b.n	800779c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800762e:	e0b5      	b.n	800779c <UART_SetConfig+0xa94>
 8007630:	03d09000 	.word	0x03d09000
 8007634:	003d0900 	.word	0x003d0900
 8007638:	0800b9ec 	.word	0x0800b9ec
 800763c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007640:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007644:	2b20      	cmp	r3, #32
 8007646:	dc49      	bgt.n	80076dc <UART_SetConfig+0x9d4>
 8007648:	2b00      	cmp	r3, #0
 800764a:	db7c      	blt.n	8007746 <UART_SetConfig+0xa3e>
 800764c:	2b20      	cmp	r3, #32
 800764e:	d87a      	bhi.n	8007746 <UART_SetConfig+0xa3e>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x950>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	080076e3 	.word	0x080076e3
 800765c:	080076eb 	.word	0x080076eb
 8007660:	08007747 	.word	0x08007747
 8007664:	08007747 	.word	0x08007747
 8007668:	080076f3 	.word	0x080076f3
 800766c:	08007747 	.word	0x08007747
 8007670:	08007747 	.word	0x08007747
 8007674:	08007747 	.word	0x08007747
 8007678:	08007703 	.word	0x08007703
 800767c:	08007747 	.word	0x08007747
 8007680:	08007747 	.word	0x08007747
 8007684:	08007747 	.word	0x08007747
 8007688:	08007747 	.word	0x08007747
 800768c:	08007747 	.word	0x08007747
 8007690:	08007747 	.word	0x08007747
 8007694:	08007747 	.word	0x08007747
 8007698:	08007713 	.word	0x08007713
 800769c:	08007747 	.word	0x08007747
 80076a0:	08007747 	.word	0x08007747
 80076a4:	08007747 	.word	0x08007747
 80076a8:	08007747 	.word	0x08007747
 80076ac:	08007747 	.word	0x08007747
 80076b0:	08007747 	.word	0x08007747
 80076b4:	08007747 	.word	0x08007747
 80076b8:	08007747 	.word	0x08007747
 80076bc:	08007747 	.word	0x08007747
 80076c0:	08007747 	.word	0x08007747
 80076c4:	08007747 	.word	0x08007747
 80076c8:	08007747 	.word	0x08007747
 80076cc:	08007747 	.word	0x08007747
 80076d0:	08007747 	.word	0x08007747
 80076d4:	08007747 	.word	0x08007747
 80076d8:	08007739 	.word	0x08007739
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d02e      	beq.n	800773e <UART_SetConfig+0xa36>
 80076e0:	e031      	b.n	8007746 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e2:	f7fc ffb5 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 80076e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076e8:	e033      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ea:	f7fc ffc7 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 80076ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076f0:	e02f      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe f9f6 	bl	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007700:	e027      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007702:	f107 0318 	add.w	r3, r7, #24
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fb42 	bl	8005d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007710:	e01f      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007712:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <UART_SetConfig+0xac0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <UART_SetConfig+0xac0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	08db      	lsrs	r3, r3, #3
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	4a28      	ldr	r2, [pc, #160]	; (80077cc <UART_SetConfig+0xac4>)
 800772a:	fa22 f303 	lsr.w	r3, r2, r3
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007730:	e00f      	b.n	8007752 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007732:	4b26      	ldr	r3, [pc, #152]	; (80077cc <UART_SetConfig+0xac4>)
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007736:	e00c      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007738:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <UART_SetConfig+0xac8>)
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773c:	e009      	b.n	8007752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e005      	b.n	8007752 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007750:	bf00      	nop
    }

    if (pclk != 0U)
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d021      	beq.n	800779c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <UART_SetConfig+0xacc>)
 800775e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007762:	461a      	mov	r2, r3
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	fbb3 f2f2 	udiv	r2, r3, r2
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	441a      	add	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	fbb2 f3f3 	udiv	r3, r2, r3
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	2b0f      	cmp	r3, #15
 8007780:	d909      	bls.n	8007796 <UART_SetConfig+0xa8e>
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007788:	d205      	bcs.n	8007796 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	b29a      	uxth	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60da      	str	r2, [r3, #12]
 8007794:	e002      	b.n	800779c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2201      	movs	r2, #1
 80077a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2200      	movs	r2, #0
 80077b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3748      	adds	r7, #72	; 0x48
 80077c0:	46bd      	mov	sp, r7
 80077c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	003d0900 	.word	0x003d0900
 80077d4:	0800b9ec 	.word	0x0800b9ec

080077d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01a      	beq.n	80078ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d6:	d10a      	bne.n	80078ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b098      	sub	sp, #96	; 0x60
 8007920:	af02      	add	r7, sp, #8
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800792c:	f7f9 ff10 	bl	8001750 <HAL_GetTick>
 8007930:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b08      	cmp	r3, #8
 800793e:	d12f      	bne.n	80079a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007948:	2200      	movs	r2, #0
 800794a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f88e 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d022      	beq.n	80079a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796e:	653b      	str	r3, [r7, #80]	; 0x50
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007978:	647b      	str	r3, [r7, #68]	; 0x44
 800797a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800797e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e063      	b.n	8007a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d149      	bne.n	8007a42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b6:	2200      	movs	r2, #0
 80079b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f857 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d03c      	beq.n	8007a42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	623b      	str	r3, [r7, #32]
   return(result);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	633b      	str	r3, [r7, #48]	; 0x30
 80079e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1a:	61fa      	str	r2, [r7, #28]
 8007a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	69b9      	ldr	r1, [r7, #24]
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	617b      	str	r3, [r7, #20]
   return(result);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e5      	bne.n	80079fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e012      	b.n	8007a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3758      	adds	r7, #88	; 0x58
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a80:	e049      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d045      	beq.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7f9 fe61 	bl	8001750 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e048      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d031      	beq.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d110      	bne.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f95b 	bl	8007d84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e029      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d111      	bne.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f941 	bl	8007d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e00f      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	bf0c      	ite	eq
 8007b26:	2301      	moveq	r3, #1
 8007b28:	2300      	movne	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d0a6      	beq.n	8007a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b0a3      	sub	sp, #140	; 0x8c
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	d10e      	bne.n	8007b92 <UART_Start_Receive_IT+0x52>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <UART_Start_Receive_IT+0x48>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b86:	e02d      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	22ff      	movs	r2, #255	; 0xff
 8007b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b90:	e028      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10d      	bne.n	8007bb6 <UART_Start_Receive_IT+0x76>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <UART_Start_Receive_IT+0x6c>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	22ff      	movs	r2, #255	; 0xff
 8007ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007baa:	e01b      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	227f      	movs	r2, #127	; 0x7f
 8007bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bb4:	e016      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bbe:	d10d      	bne.n	8007bdc <UART_Start_Receive_IT+0x9c>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <UART_Start_Receive_IT+0x92>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	227f      	movs	r2, #127	; 0x7f
 8007bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bd0:	e008      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	223f      	movs	r2, #63	; 0x3f
 8007bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bda:	e003      	b.n	8007be4 <UART_Start_Receive_IT+0xa4>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2222      	movs	r2, #34	; 0x22
 8007bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c18:	673a      	str	r2, [r7, #112]	; 0x70
 8007c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e3      	bne.n	8007bf4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c34:	d14f      	bne.n	8007cd6 <UART_Start_Receive_IT+0x196>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c3c:	88fa      	ldrh	r2, [r7, #6]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d349      	bcc.n	8007cd6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4a:	d107      	bne.n	8007c5c <UART_Start_Receive_IT+0x11c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a47      	ldr	r2, [pc, #284]	; (8007d74 <UART_Start_Receive_IT+0x234>)
 8007c58:	675a      	str	r2, [r3, #116]	; 0x74
 8007c5a:	e002      	b.n	8007c62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a46      	ldr	r2, [pc, #280]	; (8007d78 <UART_Start_Receive_IT+0x238>)
 8007c60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01a      	beq.n	8007ca0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e5      	bne.n	8007ca0 <UART_Start_Receive_IT+0x160>
 8007cd4:	e046      	b.n	8007d64 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cde:	d107      	bne.n	8007cf0 <UART_Start_Receive_IT+0x1b0>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a24      	ldr	r2, [pc, #144]	; (8007d7c <UART_Start_Receive_IT+0x23c>)
 8007cec:	675a      	str	r2, [r3, #116]	; 0x74
 8007cee:	e002      	b.n	8007cf6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <UART_Start_Receive_IT+0x240>)
 8007cf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d019      	beq.n	8007d32 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d12:	677b      	str	r3, [r7, #116]	; 0x74
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_Start_Receive_IT+0x1be>
 8007d30:	e018      	b.n	8007d64 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f043 0320 	orr.w	r3, r3, #32
 8007d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d50:	623b      	str	r3, [r7, #32]
 8007d52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	69f9      	ldr	r1, [r7, #28]
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	378c      	adds	r7, #140	; 0x8c
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	080085a5 	.word	0x080085a5
 8007d78:	08008245 	.word	0x08008245
 8007d7c:	0800808d 	.word	0x0800808d
 8007d80:	08007ed5 	.word	0x08007ed5

08007d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b095      	sub	sp, #84	; 0x54
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007daa:	643b      	str	r3, [r7, #64]	; 0x40
 8007dac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e6      	bne.n	8007d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	4b1e      	ldr	r3, [pc, #120]	; (8007e4c <UART_EndRxTransfer+0xc8>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d118      	bne.n	8007e2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	613b      	str	r3, [r7, #16]
   return(result);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e6      	bne.n	8007dfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e40:	bf00      	nop
 8007e42:	3754      	adds	r7, #84	; 0x54
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	effffffe 	.word	0xeffffffe

08007e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7fe ff34 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6979      	ldr	r1, [r7, #20]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e6      	bne.n	8007e84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fe feff 	bl	8006cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eca:	bf00      	nop
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b09c      	sub	sp, #112	; 0x70
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ee2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eec:	2b22      	cmp	r3, #34	; 0x22
 8007eee:	f040 80be 	bne.w	800806e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007efc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f00:	b2d9      	uxtb	r1, r3
 8007f02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f040 80a1 	bne.w	800807e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e6      	bne.n	8007f3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3308      	adds	r3, #8
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	667b      	str	r3, [r7, #100]	; 0x64
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a33      	ldr	r2, [pc, #204]	; (8008088 <UART_RxISR_8BIT+0x1b4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d01f      	beq.n	8008000 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d018      	beq.n	8008000 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	623b      	str	r3, [r7, #32]
   return(result);
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fec:	633b      	str	r3, [r7, #48]	; 0x30
 8007fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d12e      	bne.n	8008066 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	60fb      	str	r3, [r7, #12]
   return(result);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	69b9      	ldr	r1, [r7, #24]
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	617b      	str	r3, [r7, #20]
   return(result);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b10      	cmp	r3, #16
 800804c:	d103      	bne.n	8008056 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2210      	movs	r2, #16
 8008054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fe fe46 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008064:	e00b      	b.n	800807e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7f8 fd8c 	bl	8000b84 <HAL_UART_RxCpltCallback>
}
 800806c:	e007      	b.n	800807e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0208 	orr.w	r2, r2, #8
 800807c:	619a      	str	r2, [r3, #24]
}
 800807e:	bf00      	nop
 8008080:	3770      	adds	r7, #112	; 0x70
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	58000c00 	.word	0x58000c00

0800808c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b09c      	sub	sp, #112	; 0x70
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800809a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a4:	2b22      	cmp	r3, #34	; 0x22
 80080a6:	f040 80be 	bne.w	8008226 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80080ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80080be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80080c2:	4013      	ands	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80a1 	bne.w	8008236 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008108:	667b      	str	r3, [r7, #100]	; 0x64
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008112:	657b      	str	r3, [r7, #84]	; 0x54
 8008114:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	663b      	str	r3, [r7, #96]	; 0x60
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008146:	643a      	str	r2, [r7, #64]	; 0x40
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800814c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a33      	ldr	r2, [pc, #204]	; (8008240 <UART_RxISR_16BIT+0x1b4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01f      	beq.n	80081b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	61fb      	str	r3, [r7, #28]
   return(result);
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800819a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d12e      	bne.n	800821e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f023 0310 	bic.w	r3, r3, #16
 80081da:	65bb      	str	r3, [r7, #88]	; 0x58
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6979      	ldr	r1, [r7, #20]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	613b      	str	r3, [r7, #16]
   return(result);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e6      	bne.n	80081c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d103      	bne.n	800820e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2210      	movs	r2, #16
 800820c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe fd6a 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800821c:	e00b      	b.n	8008236 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7f8 fcb0 	bl	8000b84 <HAL_UART_RxCpltCallback>
}
 8008224:	e007      	b.n	8008236 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0208 	orr.w	r2, r2, #8
 8008234:	619a      	str	r2, [r3, #24]
}
 8008236:	bf00      	nop
 8008238:	3770      	adds	r7, #112	; 0x70
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	58000c00 	.word	0x58000c00

08008244 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b0ac      	sub	sp, #176	; 0xb0
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008252:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827a:	2b22      	cmp	r3, #34	; 0x22
 800827c:	f040 8180 	bne.w	8008580 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008286:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800828a:	e123      	b.n	80084d4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008296:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800829a:	b2d9      	uxtb	r1, r3
 800829c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a6:	400a      	ands	r2, r1
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d053      	beq.n	8008386 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d011      	beq.n	800830e <UART_RxISR_8BIT_FIFOEN+0xca>
 80082ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2201      	movs	r2, #1
 80082fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008304:	f043 0201 	orr.w	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d011      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800831a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2202      	movs	r2, #2
 800832c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008334:	f043 0204 	orr.w	r2, r3, #4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800834a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2204      	movs	r2, #4
 800835c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008364:	f043 0202 	orr.w	r2, r3, #2
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fe fcaf 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	f040 80a0 	bne.w	80084d4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80083a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80083bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80083c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e4      	bne.n	8008394 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80083da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083dc:	4b6e      	ldr	r3, [pc, #440]	; (8008598 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80083de:	4013      	ands	r3, r2
 80083e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80083f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80083f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e3      	bne.n	80083ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a60      	ldr	r2, [pc, #384]	; (800859c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d021      	beq.n	8008464 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01a      	beq.n	8008464 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800843c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008450:	657b      	str	r3, [r7, #84]	; 0x54
 8008452:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800845e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e4      	bne.n	800842e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d130      	bne.n	80084ce <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	f023 0310 	bic.w	r3, r3, #16
 8008486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008494:	643b      	str	r3, [r7, #64]	; 0x40
 8008496:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800849a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e4      	bne.n	8008472 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d103      	bne.n	80084be <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2210      	movs	r2, #16
 80084bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fe fc12 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
 80084cc:	e002      	b.n	80084d4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7f8 fb58 	bl	8000b84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80084dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f aed1 	bne.w	800828c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d049      	beq.n	8008590 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008502:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008506:	429a      	cmp	r2, r3
 8008508:	d242      	bcs.n	8008590 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	61fb      	str	r3, [r7, #28]
   return(result);
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800852e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e3      	bne.n	800850a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a16      	ldr	r2, [pc, #88]	; (80085a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008546:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	60bb      	str	r3, [r7, #8]
   return(result);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f043 0320 	orr.w	r3, r3, #32
 800855c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6979      	ldr	r1, [r7, #20]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	613b      	str	r3, [r7, #16]
   return(result);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e4      	bne.n	8008548 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800857e:	e007      	b.n	8008590 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0208 	orr.w	r2, r2, #8
 800858e:	619a      	str	r2, [r3, #24]
}
 8008590:	bf00      	nop
 8008592:	37b0      	adds	r7, #176	; 0xb0
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	effffffe 	.word	0xeffffffe
 800859c:	58000c00 	.word	0x58000c00
 80085a0:	08007ed5 	.word	0x08007ed5

080085a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b0ae      	sub	sp, #184	; 0xb8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085da:	2b22      	cmp	r3, #34	; 0x22
 80085dc:	f040 8184 	bne.w	80088e8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085ea:	e127      	b.n	800883c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80085fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008602:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008606:	4013      	ands	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800860e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008614:	1c9a      	adds	r2, r3, #2
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b00      	cmp	r3, #0
 8008640:	d053      	beq.n	80086ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d011      	beq.n	8008672 <UART_RxISR_16BIT_FIFOEN+0xce>
 800864e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00b      	beq.n	8008672 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2201      	movs	r2, #1
 8008660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008668:	f043 0201 	orr.w	r2, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d011      	beq.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800867e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00b      	beq.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2202      	movs	r2, #2
 8008690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	f043 0204 	orr.w	r2, r3, #4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d011      	beq.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80086ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2204      	movs	r2, #4
 80086c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	f043 0202 	orr.w	r2, r3, #2
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d006      	beq.n	80086ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fe fafd 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f040 80a2 	bne.w	800883c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800870c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800871a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800871e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008722:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800872c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e2      	bne.n	80086f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008744:	4b6e      	ldr	r3, [pc, #440]	; (8008900 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008746:	4013      	ands	r3, r2
 8008748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008756:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008758:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800875c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e3      	bne.n	8008732 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a60      	ldr	r2, [pc, #384]	; (8008904 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d021      	beq.n	80087cc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01a      	beq.n	80087cc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e4      	bne.n	8008796 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d130      	bne.n	8008836 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	f023 0310 	bic.w	r3, r3, #16
 80087ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087fc:	647b      	str	r3, [r7, #68]	; 0x44
 80087fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e4      	bne.n	80087da <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f003 0310 	and.w	r3, r3, #16
 800881a:	2b10      	cmp	r3, #16
 800881c:	d103      	bne.n	8008826 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2210      	movs	r2, #16
 8008824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fe fa5e 	bl	8006cf0 <HAL_UARTEx_RxEventCallback>
 8008834:	e002      	b.n	800883c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7f8 f9a4 	bl	8000b84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800883c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	f47f aecd 	bne.w	80085ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008858:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800885c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008860:	2b00      	cmp	r3, #0
 8008862:	d049      	beq.n	80088f8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800886a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800886e:	429a      	cmp	r2, r3
 8008870:	d242      	bcs.n	80088f8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	623b      	str	r3, [r7, #32]
   return(result);
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008896:	633a      	str	r2, [r7, #48]	; 0x30
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800889c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e3      	bne.n	8008872 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a16      	ldr	r2, [pc, #88]	; (8008908 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80088ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f043 0320 	orr.w	r3, r3, #32
 80088c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	69b9      	ldr	r1, [r7, #24]
 80088d8:	69fa      	ldr	r2, [r7, #28]
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	617b      	str	r3, [r7, #20]
   return(result);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e4      	bne.n	80088b0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088e6:	e007      	b.n	80088f8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0208 	orr.w	r2, r2, #8
 80088f6:	619a      	str	r2, [r3, #24]
}
 80088f8:	bf00      	nop
 80088fa:	37b8      	adds	r7, #184	; 0xb8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	effffffe 	.word	0xeffffffe
 8008904:	58000c00 	.word	0x58000c00
 8008908:	0800808d 	.word	0x0800808d

0800890c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_UARTEx_DisableFifoMode+0x16>
 800895a:	2302      	movs	r3, #2
 800895c:	e027      	b.n	80089ae <HAL_UARTEx_DisableFifoMode+0x66>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2224      	movs	r2, #36	; 0x24
 800896a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800898c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e02d      	b.n	8008a2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2224      	movs	r2, #36	; 0x24
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f850 	bl	8008ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e02d      	b.n	8008aaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2224      	movs	r2, #36	; 0x24
 8008a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f812 	bl	8008ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ad4:	e031      	b.n	8008b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ada:	2310      	movs	r3, #16
 8008adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	0e5b      	lsrs	r3, r3, #25
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	0f5b      	lsrs	r3, r3, #29
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	7b3a      	ldrb	r2, [r7, #12]
 8008b02:	4911      	ldr	r1, [pc, #68]	; (8008b48 <UARTEx_SetNbDataToProcess+0x94>)
 8008b04:	5c8a      	ldrb	r2, [r1, r2]
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b0a:	7b3a      	ldrb	r2, [r7, #12]
 8008b0c:	490f      	ldr	r1, [pc, #60]	; (8008b4c <UARTEx_SetNbDataToProcess+0x98>)
 8008b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	7b7a      	ldrb	r2, [r7, #13]
 8008b20:	4909      	ldr	r1, [pc, #36]	; (8008b48 <UARTEx_SetNbDataToProcess+0x94>)
 8008b22:	5c8a      	ldrb	r2, [r1, r2]
 8008b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b28:	7b7a      	ldrb	r2, [r7, #13]
 8008b2a:	4908      	ldr	r1, [pc, #32]	; (8008b4c <UARTEx_SetNbDataToProcess+0x98>)
 8008b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	0800ba04 	.word	0x0800ba04
 8008b4c:	0800ba0c 	.word	0x0800ba0c

08008b50 <__assert_func>:
 8008b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b52:	4614      	mov	r4, r2
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <__assert_func+0x2c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	68d8      	ldr	r0, [r3, #12]
 8008b5e:	b14c      	cbz	r4, 8008b74 <__assert_func+0x24>
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <__assert_func+0x30>)
 8008b62:	9100      	str	r1, [sp, #0]
 8008b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b68:	4906      	ldr	r1, [pc, #24]	; (8008b84 <__assert_func+0x34>)
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f000 f814 	bl	8008b98 <fiprintf>
 8008b70:	f000 ff06 	bl	8009980 <abort>
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <__assert_func+0x38>)
 8008b76:	461c      	mov	r4, r3
 8008b78:	e7f3      	b.n	8008b62 <__assert_func+0x12>
 8008b7a:	bf00      	nop
 8008b7c:	2400001c 	.word	0x2400001c
 8008b80:	0800ba14 	.word	0x0800ba14
 8008b84:	0800ba21 	.word	0x0800ba21
 8008b88:	0800ba4f 	.word	0x0800ba4f

08008b8c <__errno>:
 8008b8c:	4b01      	ldr	r3, [pc, #4]	; (8008b94 <__errno+0x8>)
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2400001c 	.word	0x2400001c

08008b98 <fiprintf>:
 8008b98:	b40e      	push	{r1, r2, r3}
 8008b9a:	b503      	push	{r0, r1, lr}
 8008b9c:	4601      	mov	r1, r0
 8008b9e:	ab03      	add	r3, sp, #12
 8008ba0:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <fiprintf+0x20>)
 8008ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba6:	6800      	ldr	r0, [r0, #0]
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	f000 f85d 	bl	8008c68 <_vfiprintf_r>
 8008bae:	b002      	add	sp, #8
 8008bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb4:	b003      	add	sp, #12
 8008bb6:	4770      	bx	lr
 8008bb8:	2400001c 	.word	0x2400001c

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4d0d      	ldr	r5, [pc, #52]	; (8008bf4 <__libc_init_array+0x38>)
 8008bc0:	4c0d      	ldr	r4, [pc, #52]	; (8008bf8 <__libc_init_array+0x3c>)
 8008bc2:	1b64      	subs	r4, r4, r5
 8008bc4:	10a4      	asrs	r4, r4, #2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	4d0b      	ldr	r5, [pc, #44]	; (8008bfc <__libc_init_array+0x40>)
 8008bce:	4c0c      	ldr	r4, [pc, #48]	; (8008c00 <__libc_init_array+0x44>)
 8008bd0:	f002 fe64 	bl	800b89c <_init>
 8008bd4:	1b64      	subs	r4, r4, r5
 8008bd6:	10a4      	asrs	r4, r4, #2
 8008bd8:	2600      	movs	r6, #0
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	0800bdf8 	.word	0x0800bdf8
 8008bf8:	0800bdf8 	.word	0x0800bdf8
 8008bfc:	0800bdf8 	.word	0x0800bdf8
 8008c00:	0800bdfc 	.word	0x0800bdfc

08008c04 <memset>:
 8008c04:	4402      	add	r2, r0
 8008c06:	4603      	mov	r3, r0
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d100      	bne.n	8008c0e <memset+0xa>
 8008c0c:	4770      	bx	lr
 8008c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c12:	e7f9      	b.n	8008c08 <memset+0x4>

08008c14 <__sfputc_r>:
 8008c14:	6893      	ldr	r3, [r2, #8]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	b410      	push	{r4}
 8008c1c:	6093      	str	r3, [r2, #8]
 8008c1e:	da08      	bge.n	8008c32 <__sfputc_r+0x1e>
 8008c20:	6994      	ldr	r4, [r2, #24]
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	db01      	blt.n	8008c2a <__sfputc_r+0x16>
 8008c26:	290a      	cmp	r1, #10
 8008c28:	d103      	bne.n	8008c32 <__sfputc_r+0x1e>
 8008c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2e:	f000 bde7 	b.w	8009800 <__swbuf_r>
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	1c58      	adds	r0, r3, #1
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	7019      	strb	r1, [r3, #0]
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <__sfputs_r>:
 8008c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	4614      	mov	r4, r2
 8008c4a:	18d5      	adds	r5, r2, r3
 8008c4c:	42ac      	cmp	r4, r5
 8008c4e:	d101      	bne.n	8008c54 <__sfputs_r+0x12>
 8008c50:	2000      	movs	r0, #0
 8008c52:	e007      	b.n	8008c64 <__sfputs_r+0x22>
 8008c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c58:	463a      	mov	r2, r7
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ffda 	bl	8008c14 <__sfputc_r>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d1f3      	bne.n	8008c4c <__sfputs_r+0xa>
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	b09d      	sub	sp, #116	; 0x74
 8008c70:	4614      	mov	r4, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6983      	ldr	r3, [r0, #24]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f001 fd9c 	bl	800a7b8 <__sinit>
 8008c80:	4b89      	ldr	r3, [pc, #548]	; (8008ea8 <_vfiprintf_r+0x240>)
 8008c82:	429d      	cmp	r5, r3
 8008c84:	d11b      	bne.n	8008cbe <_vfiprintf_r+0x56>
 8008c86:	6875      	ldr	r5, [r6, #4]
 8008c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8a:	07d9      	lsls	r1, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_vfiprintf_r+0x32>
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_vfiprintf_r+0x32>
 8008c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c96:	f001 fe32 	bl	800a8fe <__retarget_lock_acquire_recursive>
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	071b      	lsls	r3, r3, #28
 8008c9e:	d501      	bpl.n	8008ca4 <_vfiprintf_r+0x3c>
 8008ca0:	692b      	ldr	r3, [r5, #16]
 8008ca2:	b9eb      	cbnz	r3, 8008ce0 <_vfiprintf_r+0x78>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f000 fdfc 	bl	80098a4 <__swsetup_r>
 8008cac:	b1c0      	cbz	r0, 8008ce0 <_vfiprintf_r+0x78>
 8008cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb0:	07dc      	lsls	r4, r3, #31
 8008cb2:	d50e      	bpl.n	8008cd2 <_vfiprintf_r+0x6a>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cb8:	b01d      	add	sp, #116	; 0x74
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	4b7b      	ldr	r3, [pc, #492]	; (8008eac <_vfiprintf_r+0x244>)
 8008cc0:	429d      	cmp	r5, r3
 8008cc2:	d101      	bne.n	8008cc8 <_vfiprintf_r+0x60>
 8008cc4:	68b5      	ldr	r5, [r6, #8]
 8008cc6:	e7df      	b.n	8008c88 <_vfiprintf_r+0x20>
 8008cc8:	4b79      	ldr	r3, [pc, #484]	; (8008eb0 <_vfiprintf_r+0x248>)
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	bf08      	it	eq
 8008cce:	68f5      	ldreq	r5, [r6, #12]
 8008cd0:	e7da      	b.n	8008c88 <_vfiprintf_r+0x20>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	0598      	lsls	r0, r3, #22
 8008cd6:	d4ed      	bmi.n	8008cb4 <_vfiprintf_r+0x4c>
 8008cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cda:	f001 fe11 	bl	800a900 <__retarget_lock_release_recursive>
 8008cde:	e7e9      	b.n	8008cb4 <_vfiprintf_r+0x4c>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cee:	2330      	movs	r3, #48	; 0x30
 8008cf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008eb4 <_vfiprintf_r+0x24c>
 8008cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf8:	f04f 0901 	mov.w	r9, #1
 8008cfc:	4623      	mov	r3, r4
 8008cfe:	469a      	mov	sl, r3
 8008d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d04:	b10a      	cbz	r2, 8008d0a <_vfiprintf_r+0xa2>
 8008d06:	2a25      	cmp	r2, #37	; 0x25
 8008d08:	d1f9      	bne.n	8008cfe <_vfiprintf_r+0x96>
 8008d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0e:	d00b      	beq.n	8008d28 <_vfiprintf_r+0xc0>
 8008d10:	465b      	mov	r3, fp
 8008d12:	4622      	mov	r2, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff ff93 	bl	8008c42 <__sfputs_r>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f000 80aa 	beq.w	8008e76 <_vfiprintf_r+0x20e>
 8008d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d24:	445a      	add	r2, fp
 8008d26:	9209      	str	r2, [sp, #36]	; 0x24
 8008d28:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80a2 	beq.w	8008e76 <_vfiprintf_r+0x20e>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3c:	f10a 0a01 	add.w	sl, sl, #1
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d48:	931a      	str	r3, [sp, #104]	; 0x68
 8008d4a:	4654      	mov	r4, sl
 8008d4c:	2205      	movs	r2, #5
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	4858      	ldr	r0, [pc, #352]	; (8008eb4 <_vfiprintf_r+0x24c>)
 8008d54:	f7f7 facc 	bl	80002f0 <memchr>
 8008d58:	9a04      	ldr	r2, [sp, #16]
 8008d5a:	b9d8      	cbnz	r0, 8008d94 <_vfiprintf_r+0x12c>
 8008d5c:	06d1      	lsls	r1, r2, #27
 8008d5e:	bf44      	itt	mi
 8008d60:	2320      	movmi	r3, #32
 8008d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d66:	0713      	lsls	r3, r2, #28
 8008d68:	bf44      	itt	mi
 8008d6a:	232b      	movmi	r3, #43	; 0x2b
 8008d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d70:	f89a 3000 	ldrb.w	r3, [sl]
 8008d74:	2b2a      	cmp	r3, #42	; 0x2a
 8008d76:	d015      	beq.n	8008da4 <_vfiprintf_r+0x13c>
 8008d78:	9a07      	ldr	r2, [sp, #28]
 8008d7a:	4654      	mov	r4, sl
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	f04f 0c0a 	mov.w	ip, #10
 8008d82:	4621      	mov	r1, r4
 8008d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d88:	3b30      	subs	r3, #48	; 0x30
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d94e      	bls.n	8008e2c <_vfiprintf_r+0x1c4>
 8008d8e:	b1b0      	cbz	r0, 8008dbe <_vfiprintf_r+0x156>
 8008d90:	9207      	str	r2, [sp, #28]
 8008d92:	e014      	b.n	8008dbe <_vfiprintf_r+0x156>
 8008d94:	eba0 0308 	sub.w	r3, r0, r8
 8008d98:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	46a2      	mov	sl, r4
 8008da2:	e7d2      	b.n	8008d4a <_vfiprintf_r+0xe2>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1d19      	adds	r1, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	9103      	str	r1, [sp, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfbb      	ittet	lt
 8008db0:	425b      	neglt	r3, r3
 8008db2:	f042 0202 	orrlt.w	r2, r2, #2
 8008db6:	9307      	strge	r3, [sp, #28]
 8008db8:	9307      	strlt	r3, [sp, #28]
 8008dba:	bfb8      	it	lt
 8008dbc:	9204      	strlt	r2, [sp, #16]
 8008dbe:	7823      	ldrb	r3, [r4, #0]
 8008dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc2:	d10c      	bne.n	8008dde <_vfiprintf_r+0x176>
 8008dc4:	7863      	ldrb	r3, [r4, #1]
 8008dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc8:	d135      	bne.n	8008e36 <_vfiprintf_r+0x1ce>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	9203      	str	r2, [sp, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bfb8      	it	lt
 8008dd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008dda:	3402      	adds	r4, #2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ec4 <_vfiprintf_r+0x25c>
 8008de2:	7821      	ldrb	r1, [r4, #0]
 8008de4:	2203      	movs	r2, #3
 8008de6:	4650      	mov	r0, sl
 8008de8:	f7f7 fa82 	bl	80002f0 <memchr>
 8008dec:	b140      	cbz	r0, 8008e00 <_vfiprintf_r+0x198>
 8008dee:	2340      	movs	r3, #64	; 0x40
 8008df0:	eba0 000a 	sub.w	r0, r0, sl
 8008df4:	fa03 f000 	lsl.w	r0, r3, r0
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	4303      	orrs	r3, r0
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	482c      	ldr	r0, [pc, #176]	; (8008eb8 <_vfiprintf_r+0x250>)
 8008e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	f7f7 fa70 	bl	80002f0 <memchr>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d03f      	beq.n	8008e94 <_vfiprintf_r+0x22c>
 8008e14:	4b29      	ldr	r3, [pc, #164]	; (8008ebc <_vfiprintf_r+0x254>)
 8008e16:	bb1b      	cbnz	r3, 8008e60 <_vfiprintf_r+0x1f8>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	3308      	adds	r3, #8
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e26:	443b      	add	r3, r7
 8008e28:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2a:	e767      	b.n	8008cfc <_vfiprintf_r+0x94>
 8008e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e30:	460c      	mov	r4, r1
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7a5      	b.n	8008d82 <_vfiprintf_r+0x11a>
 8008e36:	2300      	movs	r3, #0
 8008e38:	3401      	adds	r4, #1
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4620      	mov	r0, r4
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	3a30      	subs	r2, #48	; 0x30
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d903      	bls.n	8008e56 <_vfiprintf_r+0x1ee>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c5      	beq.n	8008dde <_vfiprintf_r+0x176>
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	e7c3      	b.n	8008dde <_vfiprintf_r+0x176>
 8008e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e7f0      	b.n	8008e42 <_vfiprintf_r+0x1da>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <_vfiprintf_r+0x258>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f8bc 	bl	8008fe8 <_printf_float>
 8008e70:	4607      	mov	r7, r0
 8008e72:	1c78      	adds	r0, r7, #1
 8008e74:	d1d6      	bne.n	8008e24 <_vfiprintf_r+0x1bc>
 8008e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e78:	07d9      	lsls	r1, r3, #31
 8008e7a:	d405      	bmi.n	8008e88 <_vfiprintf_r+0x220>
 8008e7c:	89ab      	ldrh	r3, [r5, #12]
 8008e7e:	059a      	lsls	r2, r3, #22
 8008e80:	d402      	bmi.n	8008e88 <_vfiprintf_r+0x220>
 8008e82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e84:	f001 fd3c 	bl	800a900 <__retarget_lock_release_recursive>
 8008e88:	89ab      	ldrh	r3, [r5, #12]
 8008e8a:	065b      	lsls	r3, r3, #25
 8008e8c:	f53f af12 	bmi.w	8008cb4 <_vfiprintf_r+0x4c>
 8008e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e92:	e711      	b.n	8008cb8 <_vfiprintf_r+0x50>
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <_vfiprintf_r+0x258>)
 8008e9c:	a904      	add	r1, sp, #16
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 fb2e 	bl	8009500 <_printf_i>
 8008ea4:	e7e4      	b.n	8008e70 <_vfiprintf_r+0x208>
 8008ea6:	bf00      	nop
 8008ea8:	0800bb4c 	.word	0x0800bb4c
 8008eac:	0800bb6c 	.word	0x0800bb6c
 8008eb0:	0800bb2c 	.word	0x0800bb2c
 8008eb4:	0800ba54 	.word	0x0800ba54
 8008eb8:	0800ba5e 	.word	0x0800ba5e
 8008ebc:	08008fe9 	.word	0x08008fe9
 8008ec0:	08008c43 	.word	0x08008c43
 8008ec4:	0800ba5a 	.word	0x0800ba5a

08008ec8 <__cvt>:
 8008ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eca:	ed2d 8b02 	vpush	{d8}
 8008ece:	eeb0 8b40 	vmov.f64	d8, d0
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	4617      	mov	r7, r2
 8008ed6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008ed8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008eda:	ee18 2a90 	vmov	r2, s17
 8008ede:	f025 0520 	bic.w	r5, r5, #32
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	bfb6      	itet	lt
 8008ee6:	222d      	movlt	r2, #45	; 0x2d
 8008ee8:	2200      	movge	r2, #0
 8008eea:	eeb1 8b40 	vneglt.f64	d8, d0
 8008eee:	2d46      	cmp	r5, #70	; 0x46
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	d004      	beq.n	8008f00 <__cvt+0x38>
 8008ef6:	2d45      	cmp	r5, #69	; 0x45
 8008ef8:	d100      	bne.n	8008efc <__cvt+0x34>
 8008efa:	3401      	adds	r4, #1
 8008efc:	2102      	movs	r1, #2
 8008efe:	e000      	b.n	8008f02 <__cvt+0x3a>
 8008f00:	2103      	movs	r1, #3
 8008f02:	ab03      	add	r3, sp, #12
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	ab02      	add	r3, sp, #8
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4633      	mov	r3, r6
 8008f0e:	eeb0 0b48 	vmov.f64	d0, d8
 8008f12:	f000 fdc9 	bl	8009aa8 <_dtoa_r>
 8008f16:	2d47      	cmp	r5, #71	; 0x47
 8008f18:	d101      	bne.n	8008f1e <__cvt+0x56>
 8008f1a:	07fb      	lsls	r3, r7, #31
 8008f1c:	d51a      	bpl.n	8008f54 <__cvt+0x8c>
 8008f1e:	2d46      	cmp	r5, #70	; 0x46
 8008f20:	eb00 0204 	add.w	r2, r0, r4
 8008f24:	d10c      	bne.n	8008f40 <__cvt+0x78>
 8008f26:	7803      	ldrb	r3, [r0, #0]
 8008f28:	2b30      	cmp	r3, #48	; 0x30
 8008f2a:	d107      	bne.n	8008f3c <__cvt+0x74>
 8008f2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	bf1c      	itt	ne
 8008f36:	f1c4 0401 	rsbne	r4, r4, #1
 8008f3a:	6034      	strne	r4, [r6, #0]
 8008f3c:	6833      	ldr	r3, [r6, #0]
 8008f3e:	441a      	add	r2, r3
 8008f40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f48:	bf08      	it	eq
 8008f4a:	9203      	streq	r2, [sp, #12]
 8008f4c:	2130      	movs	r1, #48	; 0x30
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d307      	bcc.n	8008f64 <__cvt+0x9c>
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f58:	1a1b      	subs	r3, r3, r0
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	b005      	add	sp, #20
 8008f5e:	ecbd 8b02 	vpop	{d8}
 8008f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f64:	1c5c      	adds	r4, r3, #1
 8008f66:	9403      	str	r4, [sp, #12]
 8008f68:	7019      	strb	r1, [r3, #0]
 8008f6a:	e7f0      	b.n	8008f4e <__cvt+0x86>

08008f6c <__exponent>:
 8008f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2900      	cmp	r1, #0
 8008f72:	bfb8      	it	lt
 8008f74:	4249      	neglt	r1, r1
 8008f76:	f803 2b02 	strb.w	r2, [r3], #2
 8008f7a:	bfb4      	ite	lt
 8008f7c:	222d      	movlt	r2, #45	; 0x2d
 8008f7e:	222b      	movge	r2, #43	; 0x2b
 8008f80:	2909      	cmp	r1, #9
 8008f82:	7042      	strb	r2, [r0, #1]
 8008f84:	dd2a      	ble.n	8008fdc <__exponent+0x70>
 8008f86:	f10d 0407 	add.w	r4, sp, #7
 8008f8a:	46a4      	mov	ip, r4
 8008f8c:	270a      	movs	r7, #10
 8008f8e:	46a6      	mov	lr, r4
 8008f90:	460a      	mov	r2, r1
 8008f92:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f96:	fb07 1516 	mls	r5, r7, r6, r1
 8008f9a:	3530      	adds	r5, #48	; 0x30
 8008f9c:	2a63      	cmp	r2, #99	; 0x63
 8008f9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008fa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	dcf1      	bgt.n	8008f8e <__exponent+0x22>
 8008faa:	3130      	adds	r1, #48	; 0x30
 8008fac:	f1ae 0502 	sub.w	r5, lr, #2
 8008fb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fb4:	1c44      	adds	r4, r0, #1
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4561      	cmp	r1, ip
 8008fba:	d30a      	bcc.n	8008fd2 <__exponent+0x66>
 8008fbc:	f10d 0209 	add.w	r2, sp, #9
 8008fc0:	eba2 020e 	sub.w	r2, r2, lr
 8008fc4:	4565      	cmp	r5, ip
 8008fc6:	bf88      	it	hi
 8008fc8:	2200      	movhi	r2, #0
 8008fca:	4413      	add	r3, r2
 8008fcc:	1a18      	subs	r0, r3, r0
 8008fce:	b003      	add	sp, #12
 8008fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fda:	e7ed      	b.n	8008fb8 <__exponent+0x4c>
 8008fdc:	2330      	movs	r3, #48	; 0x30
 8008fde:	3130      	adds	r1, #48	; 0x30
 8008fe0:	7083      	strb	r3, [r0, #2]
 8008fe2:	70c1      	strb	r1, [r0, #3]
 8008fe4:	1d03      	adds	r3, r0, #4
 8008fe6:	e7f1      	b.n	8008fcc <__exponent+0x60>

08008fe8 <_printf_float>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	b08b      	sub	sp, #44	; 0x2c
 8008fee:	460c      	mov	r4, r1
 8008ff0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	461f      	mov	r7, r3
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	f001 fc7b 	bl	800a8f4 <_localeconv_r>
 8008ffe:	f8d0 b000 	ldr.w	fp, [r0]
 8009002:	4658      	mov	r0, fp
 8009004:	f7f7 f96c 	bl	80002e0 <strlen>
 8009008:	2300      	movs	r3, #0
 800900a:	9308      	str	r3, [sp, #32]
 800900c:	f8d8 3000 	ldr.w	r3, [r8]
 8009010:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	f103 0108 	add.w	r1, r3, #8
 8009020:	f8c8 1000 	str.w	r1, [r8]
 8009024:	4682      	mov	sl, r0
 8009026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800902a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800902e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009290 <_printf_float+0x2a8>
 8009032:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009036:	eeb0 6bc0 	vabs.f64	d6, d0
 800903a:	eeb4 6b47 	vcmp.f64	d6, d7
 800903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009042:	dd24      	ble.n	800908e <_printf_float+0xa6>
 8009044:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	d502      	bpl.n	8009054 <_printf_float+0x6c>
 800904e:	232d      	movs	r3, #45	; 0x2d
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009054:	4b90      	ldr	r3, [pc, #576]	; (8009298 <_printf_float+0x2b0>)
 8009056:	4891      	ldr	r0, [pc, #580]	; (800929c <_printf_float+0x2b4>)
 8009058:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800905c:	bf94      	ite	ls
 800905e:	4698      	movls	r8, r3
 8009060:	4680      	movhi	r8, r0
 8009062:	2303      	movs	r3, #3
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	f022 0204 	bic.w	r2, r2, #4
 800906a:	2300      	movs	r3, #0
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	9700      	str	r7, [sp, #0]
 8009072:	4633      	mov	r3, r6
 8009074:	aa09      	add	r2, sp, #36	; 0x24
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f000 f9d3 	bl	8009424 <_printf_common>
 800907e:	3001      	adds	r0, #1
 8009080:	f040 808a 	bne.w	8009198 <_printf_float+0x1b0>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009088:	b00b      	add	sp, #44	; 0x2c
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	d709      	bvc.n	80090ac <_printf_float+0xc4>
 8009098:	ee10 3a90 	vmov	r3, s1
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfbc      	itt	lt
 80090a0:	232d      	movlt	r3, #45	; 0x2d
 80090a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090a6:	487e      	ldr	r0, [pc, #504]	; (80092a0 <_printf_float+0x2b8>)
 80090a8:	4b7e      	ldr	r3, [pc, #504]	; (80092a4 <_printf_float+0x2bc>)
 80090aa:	e7d5      	b.n	8009058 <_printf_float+0x70>
 80090ac:	6863      	ldr	r3, [r4, #4]
 80090ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80090b2:	9104      	str	r1, [sp, #16]
 80090b4:	1c59      	adds	r1, r3, #1
 80090b6:	d13c      	bne.n	8009132 <_printf_float+0x14a>
 80090b8:	2306      	movs	r3, #6
 80090ba:	6063      	str	r3, [r4, #4]
 80090bc:	2300      	movs	r3, #0
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	ab08      	add	r3, sp, #32
 80090c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090ca:	ab07      	add	r3, sp, #28
 80090cc:	6861      	ldr	r1, [r4, #4]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	f10d 031b 	add.w	r3, sp, #27
 80090d6:	4628      	mov	r0, r5
 80090d8:	f7ff fef6 	bl	8008ec8 <__cvt>
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	9907      	ldr	r1, [sp, #28]
 80090e0:	2b47      	cmp	r3, #71	; 0x47
 80090e2:	4680      	mov	r8, r0
 80090e4:	d108      	bne.n	80090f8 <_printf_float+0x110>
 80090e6:	1cc8      	adds	r0, r1, #3
 80090e8:	db02      	blt.n	80090f0 <_printf_float+0x108>
 80090ea:	6863      	ldr	r3, [r4, #4]
 80090ec:	4299      	cmp	r1, r3
 80090ee:	dd41      	ble.n	8009174 <_printf_float+0x18c>
 80090f0:	f1a9 0902 	sub.w	r9, r9, #2
 80090f4:	fa5f f989 	uxtb.w	r9, r9
 80090f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80090fc:	d820      	bhi.n	8009140 <_printf_float+0x158>
 80090fe:	3901      	subs	r1, #1
 8009100:	464a      	mov	r2, r9
 8009102:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009106:	9107      	str	r1, [sp, #28]
 8009108:	f7ff ff30 	bl	8008f6c <__exponent>
 800910c:	9a08      	ldr	r2, [sp, #32]
 800910e:	9004      	str	r0, [sp, #16]
 8009110:	1813      	adds	r3, r2, r0
 8009112:	2a01      	cmp	r2, #1
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	dc02      	bgt.n	800911e <_printf_float+0x136>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	07d2      	lsls	r2, r2, #31
 800911c:	d501      	bpl.n	8009122 <_printf_float+0x13a>
 800911e:	3301      	adds	r3, #1
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0a2      	beq.n	8009070 <_printf_float+0x88>
 800912a:	232d      	movs	r3, #45	; 0x2d
 800912c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009130:	e79e      	b.n	8009070 <_printf_float+0x88>
 8009132:	9904      	ldr	r1, [sp, #16]
 8009134:	2947      	cmp	r1, #71	; 0x47
 8009136:	d1c1      	bne.n	80090bc <_printf_float+0xd4>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1bf      	bne.n	80090bc <_printf_float+0xd4>
 800913c:	2301      	movs	r3, #1
 800913e:	e7bc      	b.n	80090ba <_printf_float+0xd2>
 8009140:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009144:	d118      	bne.n	8009178 <_printf_float+0x190>
 8009146:	2900      	cmp	r1, #0
 8009148:	6863      	ldr	r3, [r4, #4]
 800914a:	dd0b      	ble.n	8009164 <_printf_float+0x17c>
 800914c:	6121      	str	r1, [r4, #16]
 800914e:	b913      	cbnz	r3, 8009156 <_printf_float+0x16e>
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	07d0      	lsls	r0, r2, #31
 8009154:	d502      	bpl.n	800915c <_printf_float+0x174>
 8009156:	3301      	adds	r3, #1
 8009158:	440b      	add	r3, r1
 800915a:	6123      	str	r3, [r4, #16]
 800915c:	2300      	movs	r3, #0
 800915e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	e7de      	b.n	8009122 <_printf_float+0x13a>
 8009164:	b913      	cbnz	r3, 800916c <_printf_float+0x184>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	07d2      	lsls	r2, r2, #31
 800916a:	d501      	bpl.n	8009170 <_printf_float+0x188>
 800916c:	3302      	adds	r3, #2
 800916e:	e7f4      	b.n	800915a <_printf_float+0x172>
 8009170:	2301      	movs	r3, #1
 8009172:	e7f2      	b.n	800915a <_printf_float+0x172>
 8009174:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	4299      	cmp	r1, r3
 800917c:	db05      	blt.n	800918a <_printf_float+0x1a2>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	6121      	str	r1, [r4, #16]
 8009182:	07d8      	lsls	r0, r3, #31
 8009184:	d5ea      	bpl.n	800915c <_printf_float+0x174>
 8009186:	1c4b      	adds	r3, r1, #1
 8009188:	e7e7      	b.n	800915a <_printf_float+0x172>
 800918a:	2900      	cmp	r1, #0
 800918c:	bfd4      	ite	le
 800918e:	f1c1 0202 	rsble	r2, r1, #2
 8009192:	2201      	movgt	r2, #1
 8009194:	4413      	add	r3, r2
 8009196:	e7e0      	b.n	800915a <_printf_float+0x172>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	055a      	lsls	r2, r3, #21
 800919c:	d407      	bmi.n	80091ae <_printf_float+0x1c6>
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	4642      	mov	r2, r8
 80091a2:	4631      	mov	r1, r6
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b8      	blx	r7
 80091a8:	3001      	adds	r0, #1
 80091aa:	d12a      	bne.n	8009202 <_printf_float+0x21a>
 80091ac:	e76a      	b.n	8009084 <_printf_float+0x9c>
 80091ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091b2:	f240 80e2 	bls.w	800937a <_printf_float+0x392>
 80091b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80091ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c2:	d133      	bne.n	800922c <_printf_float+0x244>
 80091c4:	4a38      	ldr	r2, [pc, #224]	; (80092a8 <_printf_float+0x2c0>)
 80091c6:	2301      	movs	r3, #1
 80091c8:	4631      	mov	r1, r6
 80091ca:	4628      	mov	r0, r5
 80091cc:	47b8      	blx	r7
 80091ce:	3001      	adds	r0, #1
 80091d0:	f43f af58 	beq.w	8009084 <_printf_float+0x9c>
 80091d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091d8:	429a      	cmp	r2, r3
 80091da:	db02      	blt.n	80091e2 <_printf_float+0x1fa>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	07d8      	lsls	r0, r3, #31
 80091e0:	d50f      	bpl.n	8009202 <_printf_float+0x21a>
 80091e2:	4653      	mov	r3, sl
 80091e4:	465a      	mov	r2, fp
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f af49 	beq.w	8009084 <_printf_float+0x9c>
 80091f2:	f04f 0800 	mov.w	r8, #0
 80091f6:	f104 091a 	add.w	r9, r4, #26
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	4543      	cmp	r3, r8
 8009200:	dc09      	bgt.n	8009216 <_printf_float+0x22e>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	079b      	lsls	r3, r3, #30
 8009206:	f100 8108 	bmi.w	800941a <_printf_float+0x432>
 800920a:	68e0      	ldr	r0, [r4, #12]
 800920c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920e:	4298      	cmp	r0, r3
 8009210:	bfb8      	it	lt
 8009212:	4618      	movlt	r0, r3
 8009214:	e738      	b.n	8009088 <_printf_float+0xa0>
 8009216:	2301      	movs	r3, #1
 8009218:	464a      	mov	r2, r9
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	f43f af2f 	beq.w	8009084 <_printf_float+0x9c>
 8009226:	f108 0801 	add.w	r8, r8, #1
 800922a:	e7e6      	b.n	80091fa <_printf_float+0x212>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dc3c      	bgt.n	80092ac <_printf_float+0x2c4>
 8009232:	4a1d      	ldr	r2, [pc, #116]	; (80092a8 <_printf_float+0x2c0>)
 8009234:	2301      	movs	r3, #1
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f af21 	beq.w	8009084 <_printf_float+0x9c>
 8009242:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009246:	4313      	orrs	r3, r2
 8009248:	d102      	bne.n	8009250 <_printf_float+0x268>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	07d9      	lsls	r1, r3, #31
 800924e:	d5d8      	bpl.n	8009202 <_printf_float+0x21a>
 8009250:	4653      	mov	r3, sl
 8009252:	465a      	mov	r2, fp
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	f43f af12 	beq.w	8009084 <_printf_float+0x9c>
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	9b07      	ldr	r3, [sp, #28]
 800926a:	425b      	negs	r3, r3
 800926c:	454b      	cmp	r3, r9
 800926e:	dc01      	bgt.n	8009274 <_printf_float+0x28c>
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	e795      	b.n	80091a0 <_printf_float+0x1b8>
 8009274:	2301      	movs	r3, #1
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af00 	beq.w	8009084 <_printf_float+0x9c>
 8009284:	f109 0901 	add.w	r9, r9, #1
 8009288:	e7ee      	b.n	8009268 <_printf_float+0x280>
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w
 8009290:	ffffffff 	.word	0xffffffff
 8009294:	7fefffff 	.word	0x7fefffff
 8009298:	0800ba65 	.word	0x0800ba65
 800929c:	0800ba69 	.word	0x0800ba69
 80092a0:	0800ba71 	.word	0x0800ba71
 80092a4:	0800ba6d 	.word	0x0800ba6d
 80092a8:	0800ba75 	.word	0x0800ba75
 80092ac:	9a08      	ldr	r2, [sp, #32]
 80092ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092b0:	429a      	cmp	r2, r3
 80092b2:	bfa8      	it	ge
 80092b4:	461a      	movge	r2, r3
 80092b6:	2a00      	cmp	r2, #0
 80092b8:	4691      	mov	r9, r2
 80092ba:	dc38      	bgt.n	800932e <_printf_float+0x346>
 80092bc:	2300      	movs	r3, #0
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c4:	f104 021a 	add.w	r2, r4, #26
 80092c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092ca:	9905      	ldr	r1, [sp, #20]
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	eba3 0309 	sub.w	r3, r3, r9
 80092d2:	428b      	cmp	r3, r1
 80092d4:	dc33      	bgt.n	800933e <_printf_float+0x356>
 80092d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80092da:	429a      	cmp	r2, r3
 80092dc:	db3c      	blt.n	8009358 <_printf_float+0x370>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	07da      	lsls	r2, r3, #31
 80092e2:	d439      	bmi.n	8009358 <_printf_float+0x370>
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	9a04      	ldr	r2, [sp, #16]
 80092e8:	9907      	ldr	r1, [sp, #28]
 80092ea:	1a9a      	subs	r2, r3, r2
 80092ec:	eba3 0901 	sub.w	r9, r3, r1
 80092f0:	4591      	cmp	r9, r2
 80092f2:	bfa8      	it	ge
 80092f4:	4691      	movge	r9, r2
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	dc35      	bgt.n	8009368 <_printf_float+0x380>
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009304:	f104 0a1a 	add.w	sl, r4, #26
 8009308:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	eba3 0309 	sub.w	r3, r3, r9
 8009312:	4543      	cmp	r3, r8
 8009314:	f77f af75 	ble.w	8009202 <_printf_float+0x21a>
 8009318:	2301      	movs	r3, #1
 800931a:	4652      	mov	r2, sl
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f aeae 	beq.w	8009084 <_printf_float+0x9c>
 8009328:	f108 0801 	add.w	r8, r8, #1
 800932c:	e7ec      	b.n	8009308 <_printf_float+0x320>
 800932e:	4613      	mov	r3, r2
 8009330:	4631      	mov	r1, r6
 8009332:	4642      	mov	r2, r8
 8009334:	4628      	mov	r0, r5
 8009336:	47b8      	blx	r7
 8009338:	3001      	adds	r0, #1
 800933a:	d1bf      	bne.n	80092bc <_printf_float+0x2d4>
 800933c:	e6a2      	b.n	8009084 <_printf_float+0x9c>
 800933e:	2301      	movs	r3, #1
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	9204      	str	r2, [sp, #16]
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	f43f ae9b 	beq.w	8009084 <_printf_float+0x9c>
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	3301      	adds	r3, #1
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	e7b7      	b.n	80092c8 <_printf_float+0x2e0>
 8009358:	4653      	mov	r3, sl
 800935a:	465a      	mov	r2, fp
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	d1be      	bne.n	80092e4 <_printf_float+0x2fc>
 8009366:	e68d      	b.n	8009084 <_printf_float+0x9c>
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	464b      	mov	r3, r9
 800936c:	4442      	add	r2, r8
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	d1c1      	bne.n	80092fc <_printf_float+0x314>
 8009378:	e684      	b.n	8009084 <_printf_float+0x9c>
 800937a:	9a08      	ldr	r2, [sp, #32]
 800937c:	2a01      	cmp	r2, #1
 800937e:	dc01      	bgt.n	8009384 <_printf_float+0x39c>
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d537      	bpl.n	80093f4 <_printf_float+0x40c>
 8009384:	2301      	movs	r3, #1
 8009386:	4642      	mov	r2, r8
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	f43f ae78 	beq.w	8009084 <_printf_float+0x9c>
 8009394:	4653      	mov	r3, sl
 8009396:	465a      	mov	r2, fp
 8009398:	4631      	mov	r1, r6
 800939a:	4628      	mov	r0, r5
 800939c:	47b8      	blx	r7
 800939e:	3001      	adds	r0, #1
 80093a0:	f43f ae70 	beq.w	8009084 <_printf_float+0x9c>
 80093a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80093a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	d01b      	beq.n	80093ea <_printf_float+0x402>
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	f108 0201 	add.w	r2, r8, #1
 80093b8:	3b01      	subs	r3, #1
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d10e      	bne.n	80093e2 <_printf_float+0x3fa>
 80093c4:	e65e      	b.n	8009084 <_printf_float+0x9c>
 80093c6:	2301      	movs	r3, #1
 80093c8:	464a      	mov	r2, r9
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f ae57 	beq.w	8009084 <_printf_float+0x9c>
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	3b01      	subs	r3, #1
 80093de:	4543      	cmp	r3, r8
 80093e0:	dcf1      	bgt.n	80093c6 <_printf_float+0x3de>
 80093e2:	9b04      	ldr	r3, [sp, #16]
 80093e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093e8:	e6db      	b.n	80091a2 <_printf_float+0x1ba>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	f104 091a 	add.w	r9, r4, #26
 80093f2:	e7f2      	b.n	80093da <_printf_float+0x3f2>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4642      	mov	r2, r8
 80093f8:	e7df      	b.n	80093ba <_printf_float+0x3d2>
 80093fa:	2301      	movs	r3, #1
 80093fc:	464a      	mov	r2, r9
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f ae3d 	beq.w	8009084 <_printf_float+0x9c>
 800940a:	f108 0801 	add.w	r8, r8, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	4543      	cmp	r3, r8
 8009416:	dcf0      	bgt.n	80093fa <_printf_float+0x412>
 8009418:	e6f7      	b.n	800920a <_printf_float+0x222>
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	f104 0919 	add.w	r9, r4, #25
 8009422:	e7f4      	b.n	800940e <_printf_float+0x426>

08009424 <_printf_common>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	4616      	mov	r6, r2
 800942a:	4699      	mov	r9, r3
 800942c:	688a      	ldr	r2, [r1, #8]
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009434:	4293      	cmp	r3, r2
 8009436:	bfb8      	it	lt
 8009438:	4613      	movlt	r3, r2
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009440:	4607      	mov	r7, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b10a      	cbz	r2, 800944a <_printf_common+0x26>
 8009446:	3301      	adds	r3, #1
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	0699      	lsls	r1, r3, #26
 800944e:	bf42      	ittt	mi
 8009450:	6833      	ldrmi	r3, [r6, #0]
 8009452:	3302      	addmi	r3, #2
 8009454:	6033      	strmi	r3, [r6, #0]
 8009456:	6825      	ldr	r5, [r4, #0]
 8009458:	f015 0506 	ands.w	r5, r5, #6
 800945c:	d106      	bne.n	800946c <_printf_common+0x48>
 800945e:	f104 0a19 	add.w	sl, r4, #25
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	6832      	ldr	r2, [r6, #0]
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	42ab      	cmp	r3, r5
 800946a:	dc26      	bgt.n	80094ba <_printf_common+0x96>
 800946c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009470:	1e13      	subs	r3, r2, #0
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	bf18      	it	ne
 8009476:	2301      	movne	r3, #1
 8009478:	0692      	lsls	r2, r2, #26
 800947a:	d42b      	bmi.n	80094d4 <_printf_common+0xb0>
 800947c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009480:	4649      	mov	r1, r9
 8009482:	4638      	mov	r0, r7
 8009484:	47c0      	blx	r8
 8009486:	3001      	adds	r0, #1
 8009488:	d01e      	beq.n	80094c8 <_printf_common+0xa4>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	68e5      	ldr	r5, [r4, #12]
 800948e:	6832      	ldr	r2, [r6, #0]
 8009490:	f003 0306 	and.w	r3, r3, #6
 8009494:	2b04      	cmp	r3, #4
 8009496:	bf08      	it	eq
 8009498:	1aad      	subeq	r5, r5, r2
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	bf0c      	ite	eq
 80094a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a4:	2500      	movne	r5, #0
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfc4      	itt	gt
 80094aa:	1a9b      	subgt	r3, r3, r2
 80094ac:	18ed      	addgt	r5, r5, r3
 80094ae:	2600      	movs	r6, #0
 80094b0:	341a      	adds	r4, #26
 80094b2:	42b5      	cmp	r5, r6
 80094b4:	d11a      	bne.n	80094ec <_printf_common+0xc8>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e008      	b.n	80094cc <_printf_common+0xa8>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4652      	mov	r2, sl
 80094be:	4649      	mov	r1, r9
 80094c0:	4638      	mov	r0, r7
 80094c2:	47c0      	blx	r8
 80094c4:	3001      	adds	r0, #1
 80094c6:	d103      	bne.n	80094d0 <_printf_common+0xac>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	3501      	adds	r5, #1
 80094d2:	e7c6      	b.n	8009462 <_printf_common+0x3e>
 80094d4:	18e1      	adds	r1, r4, r3
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	2030      	movs	r0, #48	; 0x30
 80094da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094de:	4422      	add	r2, r4
 80094e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094e8:	3302      	adds	r3, #2
 80094ea:	e7c7      	b.n	800947c <_printf_common+0x58>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4622      	mov	r2, r4
 80094f0:	4649      	mov	r1, r9
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c0      	blx	r8
 80094f6:	3001      	adds	r0, #1
 80094f8:	d0e6      	beq.n	80094c8 <_printf_common+0xa4>
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7d9      	b.n	80094b2 <_printf_common+0x8e>
	...

08009500 <_printf_i>:
 8009500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	7e0f      	ldrb	r7, [r1, #24]
 8009506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009508:	2f78      	cmp	r7, #120	; 0x78
 800950a:	4691      	mov	r9, r2
 800950c:	4680      	mov	r8, r0
 800950e:	460c      	mov	r4, r1
 8009510:	469a      	mov	sl, r3
 8009512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009516:	d807      	bhi.n	8009528 <_printf_i+0x28>
 8009518:	2f62      	cmp	r7, #98	; 0x62
 800951a:	d80a      	bhi.n	8009532 <_printf_i+0x32>
 800951c:	2f00      	cmp	r7, #0
 800951e:	f000 80d8 	beq.w	80096d2 <_printf_i+0x1d2>
 8009522:	2f58      	cmp	r7, #88	; 0x58
 8009524:	f000 80a3 	beq.w	800966e <_printf_i+0x16e>
 8009528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800952c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009530:	e03a      	b.n	80095a8 <_printf_i+0xa8>
 8009532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009536:	2b15      	cmp	r3, #21
 8009538:	d8f6      	bhi.n	8009528 <_printf_i+0x28>
 800953a:	a101      	add	r1, pc, #4	; (adr r1, 8009540 <_printf_i+0x40>)
 800953c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009540:	08009599 	.word	0x08009599
 8009544:	080095ad 	.word	0x080095ad
 8009548:	08009529 	.word	0x08009529
 800954c:	08009529 	.word	0x08009529
 8009550:	08009529 	.word	0x08009529
 8009554:	08009529 	.word	0x08009529
 8009558:	080095ad 	.word	0x080095ad
 800955c:	08009529 	.word	0x08009529
 8009560:	08009529 	.word	0x08009529
 8009564:	08009529 	.word	0x08009529
 8009568:	08009529 	.word	0x08009529
 800956c:	080096b9 	.word	0x080096b9
 8009570:	080095dd 	.word	0x080095dd
 8009574:	0800969b 	.word	0x0800969b
 8009578:	08009529 	.word	0x08009529
 800957c:	08009529 	.word	0x08009529
 8009580:	080096db 	.word	0x080096db
 8009584:	08009529 	.word	0x08009529
 8009588:	080095dd 	.word	0x080095dd
 800958c:	08009529 	.word	0x08009529
 8009590:	08009529 	.word	0x08009529
 8009594:	080096a3 	.word	0x080096a3
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	602a      	str	r2, [r5, #0]
 80095a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095a8:	2301      	movs	r3, #1
 80095aa:	e0a3      	b.n	80096f4 <_printf_i+0x1f4>
 80095ac:	6820      	ldr	r0, [r4, #0]
 80095ae:	6829      	ldr	r1, [r5, #0]
 80095b0:	0606      	lsls	r6, r0, #24
 80095b2:	f101 0304 	add.w	r3, r1, #4
 80095b6:	d50a      	bpl.n	80095ce <_printf_i+0xce>
 80095b8:	680e      	ldr	r6, [r1, #0]
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	2e00      	cmp	r6, #0
 80095be:	da03      	bge.n	80095c8 <_printf_i+0xc8>
 80095c0:	232d      	movs	r3, #45	; 0x2d
 80095c2:	4276      	negs	r6, r6
 80095c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c8:	485e      	ldr	r0, [pc, #376]	; (8009744 <_printf_i+0x244>)
 80095ca:	230a      	movs	r3, #10
 80095cc:	e019      	b.n	8009602 <_printf_i+0x102>
 80095ce:	680e      	ldr	r6, [r1, #0]
 80095d0:	602b      	str	r3, [r5, #0]
 80095d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095d6:	bf18      	it	ne
 80095d8:	b236      	sxthne	r6, r6
 80095da:	e7ef      	b.n	80095bc <_printf_i+0xbc>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	6820      	ldr	r0, [r4, #0]
 80095e0:	1d19      	adds	r1, r3, #4
 80095e2:	6029      	str	r1, [r5, #0]
 80095e4:	0601      	lsls	r1, r0, #24
 80095e6:	d501      	bpl.n	80095ec <_printf_i+0xec>
 80095e8:	681e      	ldr	r6, [r3, #0]
 80095ea:	e002      	b.n	80095f2 <_printf_i+0xf2>
 80095ec:	0646      	lsls	r6, r0, #25
 80095ee:	d5fb      	bpl.n	80095e8 <_printf_i+0xe8>
 80095f0:	881e      	ldrh	r6, [r3, #0]
 80095f2:	4854      	ldr	r0, [pc, #336]	; (8009744 <_printf_i+0x244>)
 80095f4:	2f6f      	cmp	r7, #111	; 0x6f
 80095f6:	bf0c      	ite	eq
 80095f8:	2308      	moveq	r3, #8
 80095fa:	230a      	movne	r3, #10
 80095fc:	2100      	movs	r1, #0
 80095fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009602:	6865      	ldr	r5, [r4, #4]
 8009604:	60a5      	str	r5, [r4, #8]
 8009606:	2d00      	cmp	r5, #0
 8009608:	bfa2      	ittt	ge
 800960a:	6821      	ldrge	r1, [r4, #0]
 800960c:	f021 0104 	bicge.w	r1, r1, #4
 8009610:	6021      	strge	r1, [r4, #0]
 8009612:	b90e      	cbnz	r6, 8009618 <_printf_i+0x118>
 8009614:	2d00      	cmp	r5, #0
 8009616:	d04d      	beq.n	80096b4 <_printf_i+0x1b4>
 8009618:	4615      	mov	r5, r2
 800961a:	fbb6 f1f3 	udiv	r1, r6, r3
 800961e:	fb03 6711 	mls	r7, r3, r1, r6
 8009622:	5dc7      	ldrb	r7, [r0, r7]
 8009624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009628:	4637      	mov	r7, r6
 800962a:	42bb      	cmp	r3, r7
 800962c:	460e      	mov	r6, r1
 800962e:	d9f4      	bls.n	800961a <_printf_i+0x11a>
 8009630:	2b08      	cmp	r3, #8
 8009632:	d10b      	bne.n	800964c <_printf_i+0x14c>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	07de      	lsls	r6, r3, #31
 8009638:	d508      	bpl.n	800964c <_printf_i+0x14c>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	6861      	ldr	r1, [r4, #4]
 800963e:	4299      	cmp	r1, r3
 8009640:	bfde      	ittt	le
 8009642:	2330      	movle	r3, #48	; 0x30
 8009644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009648:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800964c:	1b52      	subs	r2, r2, r5
 800964e:	6122      	str	r2, [r4, #16]
 8009650:	f8cd a000 	str.w	sl, [sp]
 8009654:	464b      	mov	r3, r9
 8009656:	aa03      	add	r2, sp, #12
 8009658:	4621      	mov	r1, r4
 800965a:	4640      	mov	r0, r8
 800965c:	f7ff fee2 	bl	8009424 <_printf_common>
 8009660:	3001      	adds	r0, #1
 8009662:	d14c      	bne.n	80096fe <_printf_i+0x1fe>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009668:	b004      	add	sp, #16
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	4835      	ldr	r0, [pc, #212]	; (8009744 <_printf_i+0x244>)
 8009670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009674:	6829      	ldr	r1, [r5, #0]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	f851 6b04 	ldr.w	r6, [r1], #4
 800967c:	6029      	str	r1, [r5, #0]
 800967e:	061d      	lsls	r5, r3, #24
 8009680:	d514      	bpl.n	80096ac <_printf_i+0x1ac>
 8009682:	07df      	lsls	r7, r3, #31
 8009684:	bf44      	itt	mi
 8009686:	f043 0320 	orrmi.w	r3, r3, #32
 800968a:	6023      	strmi	r3, [r4, #0]
 800968c:	b91e      	cbnz	r6, 8009696 <_printf_i+0x196>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f023 0320 	bic.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	2310      	movs	r3, #16
 8009698:	e7b0      	b.n	80095fc <_printf_i+0xfc>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f043 0320 	orr.w	r3, r3, #32
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	2378      	movs	r3, #120	; 0x78
 80096a4:	4828      	ldr	r0, [pc, #160]	; (8009748 <_printf_i+0x248>)
 80096a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096aa:	e7e3      	b.n	8009674 <_printf_i+0x174>
 80096ac:	0659      	lsls	r1, r3, #25
 80096ae:	bf48      	it	mi
 80096b0:	b2b6      	uxthmi	r6, r6
 80096b2:	e7e6      	b.n	8009682 <_printf_i+0x182>
 80096b4:	4615      	mov	r5, r2
 80096b6:	e7bb      	b.n	8009630 <_printf_i+0x130>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	6826      	ldr	r6, [r4, #0]
 80096bc:	6961      	ldr	r1, [r4, #20]
 80096be:	1d18      	adds	r0, r3, #4
 80096c0:	6028      	str	r0, [r5, #0]
 80096c2:	0635      	lsls	r5, r6, #24
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	d501      	bpl.n	80096cc <_printf_i+0x1cc>
 80096c8:	6019      	str	r1, [r3, #0]
 80096ca:	e002      	b.n	80096d2 <_printf_i+0x1d2>
 80096cc:	0670      	lsls	r0, r6, #25
 80096ce:	d5fb      	bpl.n	80096c8 <_printf_i+0x1c8>
 80096d0:	8019      	strh	r1, [r3, #0]
 80096d2:	2300      	movs	r3, #0
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	4615      	mov	r5, r2
 80096d8:	e7ba      	b.n	8009650 <_printf_i+0x150>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	1d1a      	adds	r2, r3, #4
 80096de:	602a      	str	r2, [r5, #0]
 80096e0:	681d      	ldr	r5, [r3, #0]
 80096e2:	6862      	ldr	r2, [r4, #4]
 80096e4:	2100      	movs	r1, #0
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7f6 fe02 	bl	80002f0 <memchr>
 80096ec:	b108      	cbz	r0, 80096f2 <_printf_i+0x1f2>
 80096ee:	1b40      	subs	r0, r0, r5
 80096f0:	6060      	str	r0, [r4, #4]
 80096f2:	6863      	ldr	r3, [r4, #4]
 80096f4:	6123      	str	r3, [r4, #16]
 80096f6:	2300      	movs	r3, #0
 80096f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096fc:	e7a8      	b.n	8009650 <_printf_i+0x150>
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	462a      	mov	r2, r5
 8009702:	4649      	mov	r1, r9
 8009704:	4640      	mov	r0, r8
 8009706:	47d0      	blx	sl
 8009708:	3001      	adds	r0, #1
 800970a:	d0ab      	beq.n	8009664 <_printf_i+0x164>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	079b      	lsls	r3, r3, #30
 8009710:	d413      	bmi.n	800973a <_printf_i+0x23a>
 8009712:	68e0      	ldr	r0, [r4, #12]
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	4298      	cmp	r0, r3
 8009718:	bfb8      	it	lt
 800971a:	4618      	movlt	r0, r3
 800971c:	e7a4      	b.n	8009668 <_printf_i+0x168>
 800971e:	2301      	movs	r3, #1
 8009720:	4632      	mov	r2, r6
 8009722:	4649      	mov	r1, r9
 8009724:	4640      	mov	r0, r8
 8009726:	47d0      	blx	sl
 8009728:	3001      	adds	r0, #1
 800972a:	d09b      	beq.n	8009664 <_printf_i+0x164>
 800972c:	3501      	adds	r5, #1
 800972e:	68e3      	ldr	r3, [r4, #12]
 8009730:	9903      	ldr	r1, [sp, #12]
 8009732:	1a5b      	subs	r3, r3, r1
 8009734:	42ab      	cmp	r3, r5
 8009736:	dcf2      	bgt.n	800971e <_printf_i+0x21e>
 8009738:	e7eb      	b.n	8009712 <_printf_i+0x212>
 800973a:	2500      	movs	r5, #0
 800973c:	f104 0619 	add.w	r6, r4, #25
 8009740:	e7f5      	b.n	800972e <_printf_i+0x22e>
 8009742:	bf00      	nop
 8009744:	0800ba77 	.word	0x0800ba77
 8009748:	0800ba88 	.word	0x0800ba88

0800974c <sniprintf>:
 800974c:	b40c      	push	{r2, r3}
 800974e:	b530      	push	{r4, r5, lr}
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <sniprintf+0x64>)
 8009752:	1e0c      	subs	r4, r1, #0
 8009754:	681d      	ldr	r5, [r3, #0]
 8009756:	b09d      	sub	sp, #116	; 0x74
 8009758:	da08      	bge.n	800976c <sniprintf+0x20>
 800975a:	238b      	movs	r3, #139	; 0x8b
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009762:	b01d      	add	sp, #116	; 0x74
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	b002      	add	sp, #8
 800976a:	4770      	bx	lr
 800976c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009774:	bf14      	ite	ne
 8009776:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800977a:	4623      	moveq	r3, r4
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	9307      	str	r3, [sp, #28]
 8009780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	9006      	str	r0, [sp, #24]
 8009788:	f8ad 3016 	strh.w	r3, [sp, #22]
 800978c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800978e:	ab21      	add	r3, sp, #132	; 0x84
 8009790:	a902      	add	r1, sp, #8
 8009792:	4628      	mov	r0, r5
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f001 fe4d 	bl	800b434 <_svfiprintf_r>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	bfbc      	itt	lt
 800979e:	238b      	movlt	r3, #139	; 0x8b
 80097a0:	602b      	strlt	r3, [r5, #0]
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d0dd      	beq.n	8009762 <sniprintf+0x16>
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	e7d9      	b.n	8009762 <sniprintf+0x16>
 80097ae:	bf00      	nop
 80097b0:	2400001c 	.word	0x2400001c

080097b4 <strcat>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	4602      	mov	r2, r0
 80097b8:	7814      	ldrb	r4, [r2, #0]
 80097ba:	4613      	mov	r3, r2
 80097bc:	3201      	adds	r2, #1
 80097be:	2c00      	cmp	r4, #0
 80097c0:	d1fa      	bne.n	80097b8 <strcat+0x4>
 80097c2:	3b01      	subs	r3, #1
 80097c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d1f9      	bne.n	80097c4 <strcat+0x10>
 80097d0:	bd10      	pop	{r4, pc}

080097d2 <strstr>:
 80097d2:	780a      	ldrb	r2, [r1, #0]
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	b96a      	cbnz	r2, 80097f4 <strstr+0x22>
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	429a      	cmp	r2, r3
 80097dc:	d109      	bne.n	80097f2 <strstr+0x20>
 80097de:	460c      	mov	r4, r1
 80097e0:	4605      	mov	r5, r0
 80097e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f6      	beq.n	80097d8 <strstr+0x6>
 80097ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80097ee:	429e      	cmp	r6, r3
 80097f0:	d0f7      	beq.n	80097e2 <strstr+0x10>
 80097f2:	3001      	adds	r0, #1
 80097f4:	7803      	ldrb	r3, [r0, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1ef      	bne.n	80097da <strstr+0x8>
 80097fa:	4618      	mov	r0, r3
 80097fc:	e7ec      	b.n	80097d8 <strstr+0x6>
	...

08009800 <__swbuf_r>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	460e      	mov	r6, r1
 8009804:	4614      	mov	r4, r2
 8009806:	4605      	mov	r5, r0
 8009808:	b118      	cbz	r0, 8009812 <__swbuf_r+0x12>
 800980a:	6983      	ldr	r3, [r0, #24]
 800980c:	b90b      	cbnz	r3, 8009812 <__swbuf_r+0x12>
 800980e:	f000 ffd3 	bl	800a7b8 <__sinit>
 8009812:	4b21      	ldr	r3, [pc, #132]	; (8009898 <__swbuf_r+0x98>)
 8009814:	429c      	cmp	r4, r3
 8009816:	d12b      	bne.n	8009870 <__swbuf_r+0x70>
 8009818:	686c      	ldr	r4, [r5, #4]
 800981a:	69a3      	ldr	r3, [r4, #24]
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	071a      	lsls	r2, r3, #28
 8009822:	d52f      	bpl.n	8009884 <__swbuf_r+0x84>
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	b36b      	cbz	r3, 8009884 <__swbuf_r+0x84>
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	1ac0      	subs	r0, r0, r3
 800982e:	6963      	ldr	r3, [r4, #20]
 8009830:	b2f6      	uxtb	r6, r6
 8009832:	4283      	cmp	r3, r0
 8009834:	4637      	mov	r7, r6
 8009836:	dc04      	bgt.n	8009842 <__swbuf_r+0x42>
 8009838:	4621      	mov	r1, r4
 800983a:	4628      	mov	r0, r5
 800983c:	f000 ff28 	bl	800a690 <_fflush_r>
 8009840:	bb30      	cbnz	r0, 8009890 <__swbuf_r+0x90>
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	3b01      	subs	r3, #1
 8009846:	60a3      	str	r3, [r4, #8]
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	701e      	strb	r6, [r3, #0]
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	3001      	adds	r0, #1
 8009854:	4283      	cmp	r3, r0
 8009856:	d004      	beq.n	8009862 <__swbuf_r+0x62>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	07db      	lsls	r3, r3, #31
 800985c:	d506      	bpl.n	800986c <__swbuf_r+0x6c>
 800985e:	2e0a      	cmp	r6, #10
 8009860:	d104      	bne.n	800986c <__swbuf_r+0x6c>
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 ff13 	bl	800a690 <_fflush_r>
 800986a:	b988      	cbnz	r0, 8009890 <__swbuf_r+0x90>
 800986c:	4638      	mov	r0, r7
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <__swbuf_r+0x9c>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <__swbuf_r+0x7a>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7cf      	b.n	800981a <__swbuf_r+0x1a>
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <__swbuf_r+0xa0>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7ca      	b.n	800981a <__swbuf_r+0x1a>
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f80c 	bl	80098a4 <__swsetup_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	d0cb      	beq.n	8009828 <__swbuf_r+0x28>
 8009890:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009894:	e7ea      	b.n	800986c <__swbuf_r+0x6c>
 8009896:	bf00      	nop
 8009898:	0800bb4c 	.word	0x0800bb4c
 800989c:	0800bb6c 	.word	0x0800bb6c
 80098a0:	0800bb2c 	.word	0x0800bb2c

080098a4 <__swsetup_r>:
 80098a4:	4b32      	ldr	r3, [pc, #200]	; (8009970 <__swsetup_r+0xcc>)
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	681d      	ldr	r5, [r3, #0]
 80098aa:	4606      	mov	r6, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	b125      	cbz	r5, 80098ba <__swsetup_r+0x16>
 80098b0:	69ab      	ldr	r3, [r5, #24]
 80098b2:	b913      	cbnz	r3, 80098ba <__swsetup_r+0x16>
 80098b4:	4628      	mov	r0, r5
 80098b6:	f000 ff7f 	bl	800a7b8 <__sinit>
 80098ba:	4b2e      	ldr	r3, [pc, #184]	; (8009974 <__swsetup_r+0xd0>)
 80098bc:	429c      	cmp	r4, r3
 80098be:	d10f      	bne.n	80098e0 <__swsetup_r+0x3c>
 80098c0:	686c      	ldr	r4, [r5, #4]
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c8:	0719      	lsls	r1, r3, #28
 80098ca:	d42c      	bmi.n	8009926 <__swsetup_r+0x82>
 80098cc:	06dd      	lsls	r5, r3, #27
 80098ce:	d411      	bmi.n	80098f4 <__swsetup_r+0x50>
 80098d0:	2309      	movs	r3, #9
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098de:	e03e      	b.n	800995e <__swsetup_r+0xba>
 80098e0:	4b25      	ldr	r3, [pc, #148]	; (8009978 <__swsetup_r+0xd4>)
 80098e2:	429c      	cmp	r4, r3
 80098e4:	d101      	bne.n	80098ea <__swsetup_r+0x46>
 80098e6:	68ac      	ldr	r4, [r5, #8]
 80098e8:	e7eb      	b.n	80098c2 <__swsetup_r+0x1e>
 80098ea:	4b24      	ldr	r3, [pc, #144]	; (800997c <__swsetup_r+0xd8>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	bf08      	it	eq
 80098f0:	68ec      	ldreq	r4, [r5, #12]
 80098f2:	e7e6      	b.n	80098c2 <__swsetup_r+0x1e>
 80098f4:	0758      	lsls	r0, r3, #29
 80098f6:	d512      	bpl.n	800991e <__swsetup_r+0x7a>
 80098f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fa:	b141      	cbz	r1, 800990e <__swsetup_r+0x6a>
 80098fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009900:	4299      	cmp	r1, r3
 8009902:	d002      	beq.n	800990a <__swsetup_r+0x66>
 8009904:	4630      	mov	r0, r6
 8009906:	f001 fc2b 	bl	800b160 <_free_r>
 800990a:	2300      	movs	r3, #0
 800990c:	6363      	str	r3, [r4, #52]	; 0x34
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	2300      	movs	r3, #0
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f043 0308 	orr.w	r3, r3, #8
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	b94b      	cbnz	r3, 800993e <__swsetup_r+0x9a>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009934:	d003      	beq.n	800993e <__swsetup_r+0x9a>
 8009936:	4621      	mov	r1, r4
 8009938:	4630      	mov	r0, r6
 800993a:	f001 f807 	bl	800a94c <__smakebuf_r>
 800993e:	89a0      	ldrh	r0, [r4, #12]
 8009940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009944:	f010 0301 	ands.w	r3, r0, #1
 8009948:	d00a      	beq.n	8009960 <__swsetup_r+0xbc>
 800994a:	2300      	movs	r3, #0
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6963      	ldr	r3, [r4, #20]
 8009950:	425b      	negs	r3, r3
 8009952:	61a3      	str	r3, [r4, #24]
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	b943      	cbnz	r3, 800996a <__swsetup_r+0xc6>
 8009958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800995c:	d1ba      	bne.n	80098d4 <__swsetup_r+0x30>
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	0781      	lsls	r1, r0, #30
 8009962:	bf58      	it	pl
 8009964:	6963      	ldrpl	r3, [r4, #20]
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	e7f4      	b.n	8009954 <__swsetup_r+0xb0>
 800996a:	2000      	movs	r0, #0
 800996c:	e7f7      	b.n	800995e <__swsetup_r+0xba>
 800996e:	bf00      	nop
 8009970:	2400001c 	.word	0x2400001c
 8009974:	0800bb4c 	.word	0x0800bb4c
 8009978:	0800bb6c 	.word	0x0800bb6c
 800997c:	0800bb2c 	.word	0x0800bb2c

08009980 <abort>:
 8009980:	b508      	push	{r3, lr}
 8009982:	2006      	movs	r0, #6
 8009984:	f001 fe8e 	bl	800b6a4 <raise>
 8009988:	2001      	movs	r0, #1
 800998a:	f7f7 fcfb 	bl	8001384 <_exit>

0800998e <quorem>:
 800998e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009992:	6903      	ldr	r3, [r0, #16]
 8009994:	690c      	ldr	r4, [r1, #16]
 8009996:	42a3      	cmp	r3, r4
 8009998:	4607      	mov	r7, r0
 800999a:	f2c0 8081 	blt.w	8009aa0 <quorem+0x112>
 800999e:	3c01      	subs	r4, #1
 80099a0:	f101 0814 	add.w	r8, r1, #20
 80099a4:	f100 0514 	add.w	r5, r0, #20
 80099a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099b6:	3301      	adds	r3, #1
 80099b8:	429a      	cmp	r2, r3
 80099ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80099c6:	d331      	bcc.n	8009a2c <quorem+0x9e>
 80099c8:	f04f 0e00 	mov.w	lr, #0
 80099cc:	4640      	mov	r0, r8
 80099ce:	46ac      	mov	ip, r5
 80099d0:	46f2      	mov	sl, lr
 80099d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80099d6:	b293      	uxth	r3, r2
 80099d8:	fb06 e303 	mla	r3, r6, r3, lr
 80099dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	ebaa 0303 	sub.w	r3, sl, r3
 80099e6:	f8dc a000 	ldr.w	sl, [ip]
 80099ea:	0c12      	lsrs	r2, r2, #16
 80099ec:	fa13 f38a 	uxtah	r3, r3, sl
 80099f0:	fb06 e202 	mla	r2, r6, r2, lr
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099fc:	b292      	uxth	r2, r2
 80099fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a06:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a0a:	4581      	cmp	r9, r0
 8009a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a10:	f84c 3b04 	str.w	r3, [ip], #4
 8009a14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a18:	d2db      	bcs.n	80099d2 <quorem+0x44>
 8009a1a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a1e:	b92b      	cbnz	r3, 8009a2c <quorem+0x9e>
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	3b04      	subs	r3, #4
 8009a24:	429d      	cmp	r5, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	d32e      	bcc.n	8009a88 <quorem+0xfa>
 8009a2a:	613c      	str	r4, [r7, #16]
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f001 fa7f 	bl	800af30 <__mcmp>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	db24      	blt.n	8009a80 <quorem+0xf2>
 8009a36:	3601      	adds	r6, #1
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f04f 0c00 	mov.w	ip, #0
 8009a3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a42:	f8d0 e000 	ldr.w	lr, [r0]
 8009a46:	b293      	uxth	r3, r2
 8009a48:	ebac 0303 	sub.w	r3, ip, r3
 8009a4c:	0c12      	lsrs	r2, r2, #16
 8009a4e:	fa13 f38e 	uxtah	r3, r3, lr
 8009a52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a60:	45c1      	cmp	r9, r8
 8009a62:	f840 3b04 	str.w	r3, [r0], #4
 8009a66:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a6a:	d2e8      	bcs.n	8009a3e <quorem+0xb0>
 8009a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a74:	b922      	cbnz	r2, 8009a80 <quorem+0xf2>
 8009a76:	3b04      	subs	r3, #4
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	d30a      	bcc.n	8009a94 <quorem+0x106>
 8009a7e:	613c      	str	r4, [r7, #16]
 8009a80:	4630      	mov	r0, r6
 8009a82:	b003      	add	sp, #12
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	3b04      	subs	r3, #4
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d1cc      	bne.n	8009a2a <quorem+0x9c>
 8009a90:	3c01      	subs	r4, #1
 8009a92:	e7c7      	b.n	8009a24 <quorem+0x96>
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	3b04      	subs	r3, #4
 8009a98:	2a00      	cmp	r2, #0
 8009a9a:	d1f0      	bne.n	8009a7e <quorem+0xf0>
 8009a9c:	3c01      	subs	r4, #1
 8009a9e:	e7eb      	b.n	8009a78 <quorem+0xea>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e7ee      	b.n	8009a82 <quorem+0xf4>
 8009aa4:	0000      	movs	r0, r0
	...

08009aa8 <_dtoa_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	ed2d 8b02 	vpush	{d8}
 8009ab0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ab2:	b091      	sub	sp, #68	; 0x44
 8009ab4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ab8:	ec59 8b10 	vmov	r8, r9, d0
 8009abc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009abe:	9106      	str	r1, [sp, #24]
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	9208      	str	r2, [sp, #32]
 8009ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8009ac6:	b975      	cbnz	r5, 8009ae6 <_dtoa_r+0x3e>
 8009ac8:	2010      	movs	r0, #16
 8009aca:	f000 ff7f 	bl	800a9cc <malloc>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ad2:	b920      	cbnz	r0, 8009ade <_dtoa_r+0x36>
 8009ad4:	4baa      	ldr	r3, [pc, #680]	; (8009d80 <_dtoa_r+0x2d8>)
 8009ad6:	21ea      	movs	r1, #234	; 0xea
 8009ad8:	48aa      	ldr	r0, [pc, #680]	; (8009d84 <_dtoa_r+0x2dc>)
 8009ada:	f7ff f839 	bl	8008b50 <__assert_func>
 8009ade:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ae2:	6005      	str	r5, [r0, #0]
 8009ae4:	60c5      	str	r5, [r0, #12]
 8009ae6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ae8:	6819      	ldr	r1, [r3, #0]
 8009aea:	b151      	cbz	r1, 8009b02 <_dtoa_r+0x5a>
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	604a      	str	r2, [r1, #4]
 8009af0:	2301      	movs	r3, #1
 8009af2:	4093      	lsls	r3, r2
 8009af4:	608b      	str	r3, [r1, #8]
 8009af6:	4630      	mov	r0, r6
 8009af8:	f000 ffd8 	bl	800aaac <_Bfree>
 8009afc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	f1b9 0300 	subs.w	r3, r9, #0
 8009b06:	bfbb      	ittet	lt
 8009b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b0c:	9303      	strlt	r3, [sp, #12]
 8009b0e:	2300      	movge	r3, #0
 8009b10:	2201      	movlt	r2, #1
 8009b12:	bfac      	ite	ge
 8009b14:	6023      	strge	r3, [r4, #0]
 8009b16:	6022      	strlt	r2, [r4, #0]
 8009b18:	4b9b      	ldr	r3, [pc, #620]	; (8009d88 <_dtoa_r+0x2e0>)
 8009b1a:	9c03      	ldr	r4, [sp, #12]
 8009b1c:	43a3      	bics	r3, r4
 8009b1e:	d11c      	bne.n	8009b5a <_dtoa_r+0xb2>
 8009b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009b2c:	ea53 0308 	orrs.w	r3, r3, r8
 8009b30:	f000 84fd 	beq.w	800a52e <_dtoa_r+0xa86>
 8009b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b36:	b963      	cbnz	r3, 8009b52 <_dtoa_r+0xaa>
 8009b38:	4b94      	ldr	r3, [pc, #592]	; (8009d8c <_dtoa_r+0x2e4>)
 8009b3a:	e01f      	b.n	8009b7c <_dtoa_r+0xd4>
 8009b3c:	4b94      	ldr	r3, [pc, #592]	; (8009d90 <_dtoa_r+0x2e8>)
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	3308      	adds	r3, #8
 8009b42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	9801      	ldr	r0, [sp, #4]
 8009b48:	b011      	add	sp, #68	; 0x44
 8009b4a:	ecbd 8b02 	vpop	{d8}
 8009b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b52:	4b8e      	ldr	r3, [pc, #568]	; (8009d8c <_dtoa_r+0x2e4>)
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	3303      	adds	r3, #3
 8009b58:	e7f3      	b.n	8009b42 <_dtoa_r+0x9a>
 8009b5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009b5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b66:	d10b      	bne.n	8009b80 <_dtoa_r+0xd8>
 8009b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 84d9 	beq.w	800a528 <_dtoa_r+0xa80>
 8009b76:	4887      	ldr	r0, [pc, #540]	; (8009d94 <_dtoa_r+0x2ec>)
 8009b78:	6018      	str	r0, [r3, #0]
 8009b7a:	1e43      	subs	r3, r0, #1
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	e7e2      	b.n	8009b46 <_dtoa_r+0x9e>
 8009b80:	a90f      	add	r1, sp, #60	; 0x3c
 8009b82:	aa0e      	add	r2, sp, #56	; 0x38
 8009b84:	4630      	mov	r0, r6
 8009b86:	eeb0 0b48 	vmov.f64	d0, d8
 8009b8a:	f001 fa77 	bl	800b07c <__d2b>
 8009b8e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009b92:	4605      	mov	r5, r0
 8009b94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009b96:	2900      	cmp	r1, #0
 8009b98:	d046      	beq.n	8009c28 <_dtoa_r+0x180>
 8009b9a:	ee18 4a90 	vmov	r4, s17
 8009b9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ba2:	ec53 2b18 	vmov	r2, r3, d8
 8009ba6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009baa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	ec43 2b16 	vmov	d6, r2, r3
 8009bb8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009bbc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009d68 <_dtoa_r+0x2c0>
 8009bc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009bc4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009d70 <_dtoa_r+0x2c8>
 8009bc8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009bcc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009d78 <_dtoa_r+0x2d0>
 8009bd0:	ee07 1a90 	vmov	s15, r1
 8009bd4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009bd8:	eeb0 7b46 	vmov.f64	d7, d6
 8009bdc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009be0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009be4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bec:	ee16 ba90 	vmov	fp, s13
 8009bf0:	940a      	str	r4, [sp, #40]	; 0x28
 8009bf2:	d508      	bpl.n	8009c06 <_dtoa_r+0x15e>
 8009bf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009bf8:	eeb4 6b47 	vcmp.f64	d6, d7
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	bf18      	it	ne
 8009c02:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009c06:	f1bb 0f16 	cmp.w	fp, #22
 8009c0a:	d82f      	bhi.n	8009c6c <_dtoa_r+0x1c4>
 8009c0c:	4b62      	ldr	r3, [pc, #392]	; (8009d98 <_dtoa_r+0x2f0>)
 8009c0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c12:	ed93 7b00 	vldr	d7, [r3]
 8009c16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1e:	d501      	bpl.n	8009c24 <_dtoa_r+0x17c>
 8009c20:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009c24:	2300      	movs	r3, #0
 8009c26:	e022      	b.n	8009c6e <_dtoa_r+0x1c6>
 8009c28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c2a:	4401      	add	r1, r0
 8009c2c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	bfc1      	itttt	gt
 8009c34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c38:	fa04 f303 	lslgt.w	r3, r4, r3
 8009c3c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009c40:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009c44:	bfd6      	itet	le
 8009c46:	f1c3 0320 	rsble	r3, r3, #32
 8009c4a:	ea43 0808 	orrgt.w	r8, r3, r8
 8009c4e:	fa08 f803 	lslle.w	r8, r8, r3
 8009c52:	ee07 8a90 	vmov	s15, r8
 8009c56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009c5a:	3901      	subs	r1, #1
 8009c5c:	ee17 4a90 	vmov	r4, s15
 8009c60:	ec53 2b17 	vmov	r2, r3, d7
 8009c64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009c68:	2401      	movs	r4, #1
 8009c6a:	e7a3      	b.n	8009bb4 <_dtoa_r+0x10c>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c70:	1a43      	subs	r3, r0, r1
 8009c72:	1e5a      	subs	r2, r3, #1
 8009c74:	bf45      	ittet	mi
 8009c76:	f1c3 0301 	rsbmi	r3, r3, #1
 8009c7a:	9304      	strmi	r3, [sp, #16]
 8009c7c:	2300      	movpl	r3, #0
 8009c7e:	2300      	movmi	r3, #0
 8009c80:	9205      	str	r2, [sp, #20]
 8009c82:	bf54      	ite	pl
 8009c84:	9304      	strpl	r3, [sp, #16]
 8009c86:	9305      	strmi	r3, [sp, #20]
 8009c88:	f1bb 0f00 	cmp.w	fp, #0
 8009c8c:	db18      	blt.n	8009cc0 <_dtoa_r+0x218>
 8009c8e:	9b05      	ldr	r3, [sp, #20]
 8009c90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009c94:	445b      	add	r3, fp
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9a06      	ldr	r2, [sp, #24]
 8009c9c:	2a09      	cmp	r2, #9
 8009c9e:	d849      	bhi.n	8009d34 <_dtoa_r+0x28c>
 8009ca0:	2a05      	cmp	r2, #5
 8009ca2:	bfc4      	itt	gt
 8009ca4:	3a04      	subgt	r2, #4
 8009ca6:	9206      	strgt	r2, [sp, #24]
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	f1a2 0202 	sub.w	r2, r2, #2
 8009cae:	bfcc      	ite	gt
 8009cb0:	2400      	movgt	r4, #0
 8009cb2:	2401      	movle	r4, #1
 8009cb4:	2a03      	cmp	r2, #3
 8009cb6:	d848      	bhi.n	8009d4a <_dtoa_r+0x2a2>
 8009cb8:	e8df f002 	tbb	[pc, r2]
 8009cbc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	eba3 030b 	sub.w	r3, r3, fp
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	9209      	str	r2, [sp, #36]	; 0x24
 8009ccc:	f1cb 0300 	rsb	r3, fp, #0
 8009cd0:	e7e3      	b.n	8009c9a <_dtoa_r+0x1f2>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	9a08      	ldr	r2, [sp, #32]
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	dc39      	bgt.n	8009d50 <_dtoa_r+0x2a8>
 8009cdc:	f04f 0a01 	mov.w	sl, #1
 8009ce0:	46d1      	mov	r9, sl
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	f8cd a020 	str.w	sl, [sp, #32]
 8009ce8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009cea:	2100      	movs	r1, #0
 8009cec:	6079      	str	r1, [r7, #4]
 8009cee:	2004      	movs	r0, #4
 8009cf0:	f100 0c14 	add.w	ip, r0, #20
 8009cf4:	4594      	cmp	ip, r2
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	d92f      	bls.n	8009d5a <_dtoa_r+0x2b2>
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8009cfe:	f000 fe95 	bl	800aa2c <_Balloc>
 8009d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d04:	9001      	str	r0, [sp, #4]
 8009d06:	4602      	mov	r2, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d149      	bne.n	8009da0 <_dtoa_r+0x2f8>
 8009d0c:	4b23      	ldr	r3, [pc, #140]	; (8009d9c <_dtoa_r+0x2f4>)
 8009d0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d12:	e6e1      	b.n	8009ad8 <_dtoa_r+0x30>
 8009d14:	2201      	movs	r2, #1
 8009d16:	e7dd      	b.n	8009cd4 <_dtoa_r+0x22c>
 8009d18:	2200      	movs	r2, #0
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	9a08      	ldr	r2, [sp, #32]
 8009d1e:	eb0b 0a02 	add.w	sl, fp, r2
 8009d22:	f10a 0901 	add.w	r9, sl, #1
 8009d26:	464a      	mov	r2, r9
 8009d28:	2a01      	cmp	r2, #1
 8009d2a:	bfb8      	it	lt
 8009d2c:	2201      	movlt	r2, #1
 8009d2e:	e7db      	b.n	8009ce8 <_dtoa_r+0x240>
 8009d30:	2201      	movs	r2, #1
 8009d32:	e7f2      	b.n	8009d1a <_dtoa_r+0x272>
 8009d34:	2401      	movs	r4, #1
 8009d36:	2200      	movs	r2, #0
 8009d38:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009d3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009d40:	2100      	movs	r1, #0
 8009d42:	46d1      	mov	r9, sl
 8009d44:	2212      	movs	r2, #18
 8009d46:	9108      	str	r1, [sp, #32]
 8009d48:	e7ce      	b.n	8009ce8 <_dtoa_r+0x240>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	9207      	str	r2, [sp, #28]
 8009d4e:	e7f5      	b.n	8009d3c <_dtoa_r+0x294>
 8009d50:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d54:	46d1      	mov	r9, sl
 8009d56:	4652      	mov	r2, sl
 8009d58:	e7c6      	b.n	8009ce8 <_dtoa_r+0x240>
 8009d5a:	3101      	adds	r1, #1
 8009d5c:	6079      	str	r1, [r7, #4]
 8009d5e:	0040      	lsls	r0, r0, #1
 8009d60:	e7c6      	b.n	8009cf0 <_dtoa_r+0x248>
 8009d62:	bf00      	nop
 8009d64:	f3af 8000 	nop.w
 8009d68:	636f4361 	.word	0x636f4361
 8009d6c:	3fd287a7 	.word	0x3fd287a7
 8009d70:	8b60c8b3 	.word	0x8b60c8b3
 8009d74:	3fc68a28 	.word	0x3fc68a28
 8009d78:	509f79fb 	.word	0x509f79fb
 8009d7c:	3fd34413 	.word	0x3fd34413
 8009d80:	0800baa6 	.word	0x0800baa6
 8009d84:	0800babd 	.word	0x0800babd
 8009d88:	7ff00000 	.word	0x7ff00000
 8009d8c:	0800baa2 	.word	0x0800baa2
 8009d90:	0800ba99 	.word	0x0800ba99
 8009d94:	0800ba76 	.word	0x0800ba76
 8009d98:	0800bc10 	.word	0x0800bc10
 8009d9c:	0800bb18 	.word	0x0800bb18
 8009da0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009da2:	9901      	ldr	r1, [sp, #4]
 8009da4:	6011      	str	r1, [r2, #0]
 8009da6:	f1b9 0f0e 	cmp.w	r9, #14
 8009daa:	d86c      	bhi.n	8009e86 <_dtoa_r+0x3de>
 8009dac:	2c00      	cmp	r4, #0
 8009dae:	d06a      	beq.n	8009e86 <_dtoa_r+0x3de>
 8009db0:	f1bb 0f00 	cmp.w	fp, #0
 8009db4:	f340 80a0 	ble.w	8009ef8 <_dtoa_r+0x450>
 8009db8:	49c1      	ldr	r1, [pc, #772]	; (800a0c0 <_dtoa_r+0x618>)
 8009dba:	f00b 020f 	and.w	r2, fp, #15
 8009dbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009dc2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009dc6:	ed92 7b00 	vldr	d7, [r2]
 8009dca:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009dce:	f000 8087 	beq.w	8009ee0 <_dtoa_r+0x438>
 8009dd2:	4abc      	ldr	r2, [pc, #752]	; (800a0c4 <_dtoa_r+0x61c>)
 8009dd4:	ed92 6b08 	vldr	d6, [r2, #32]
 8009dd8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009ddc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009de0:	f001 010f 	and.w	r1, r1, #15
 8009de4:	2203      	movs	r2, #3
 8009de6:	48b7      	ldr	r0, [pc, #732]	; (800a0c4 <_dtoa_r+0x61c>)
 8009de8:	2900      	cmp	r1, #0
 8009dea:	d17b      	bne.n	8009ee4 <_dtoa_r+0x43c>
 8009dec:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009df0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009df4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dfa:	2900      	cmp	r1, #0
 8009dfc:	f000 80a2 	beq.w	8009f44 <_dtoa_r+0x49c>
 8009e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	f140 8098 	bpl.w	8009f44 <_dtoa_r+0x49c>
 8009e14:	f1b9 0f00 	cmp.w	r9, #0
 8009e18:	f000 8094 	beq.w	8009f44 <_dtoa_r+0x49c>
 8009e1c:	f1ba 0f00 	cmp.w	sl, #0
 8009e20:	dd2f      	ble.n	8009e82 <_dtoa_r+0x3da>
 8009e22:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e2e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009e32:	3201      	adds	r2, #1
 8009e34:	4650      	mov	r0, sl
 8009e36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009e3a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009e3e:	ee07 2a90 	vmov	s15, r2
 8009e42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e46:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009e4a:	ee15 4a90 	vmov	r4, s11
 8009e4e:	ec52 1b15 	vmov	r1, r2, d5
 8009e52:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d177      	bne.n	8009f4a <_dtoa_r+0x4a2>
 8009e5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009e5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e62:	ec42 1b17 	vmov	d7, r1, r2
 8009e66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6e:	f300 8263 	bgt.w	800a338 <_dtoa_r+0x890>
 8009e72:	eeb1 7b47 	vneg.f64	d7, d7
 8009e76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7e:	f100 8258 	bmi.w	800a332 <_dtoa_r+0x88a>
 8009e82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	f2c0 811d 	blt.w	800a0c8 <_dtoa_r+0x620>
 8009e8e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e92:	f300 8119 	bgt.w	800a0c8 <_dtoa_r+0x620>
 8009e96:	4b8a      	ldr	r3, [pc, #552]	; (800a0c0 <_dtoa_r+0x618>)
 8009e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e9c:	ed93 6b00 	vldr	d6, [r3]
 8009ea0:	9b08      	ldr	r3, [sp, #32]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f280 80b7 	bge.w	800a016 <_dtoa_r+0x56e>
 8009ea8:	f1b9 0f00 	cmp.w	r9, #0
 8009eac:	f300 80b3 	bgt.w	800a016 <_dtoa_r+0x56e>
 8009eb0:	f040 823f 	bne.w	800a332 <_dtoa_r+0x88a>
 8009eb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009eb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec8:	464c      	mov	r4, r9
 8009eca:	464f      	mov	r7, r9
 8009ecc:	f280 8215 	bge.w	800a2fa <_dtoa_r+0x852>
 8009ed0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ed4:	2331      	movs	r3, #49	; 0x31
 8009ed6:	f808 3b01 	strb.w	r3, [r8], #1
 8009eda:	f10b 0b01 	add.w	fp, fp, #1
 8009ede:	e211      	b.n	800a304 <_dtoa_r+0x85c>
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	e780      	b.n	8009de6 <_dtoa_r+0x33e>
 8009ee4:	07cc      	lsls	r4, r1, #31
 8009ee6:	d504      	bpl.n	8009ef2 <_dtoa_r+0x44a>
 8009ee8:	ed90 6b00 	vldr	d6, [r0]
 8009eec:	3201      	adds	r2, #1
 8009eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ef2:	1049      	asrs	r1, r1, #1
 8009ef4:	3008      	adds	r0, #8
 8009ef6:	e777      	b.n	8009de8 <_dtoa_r+0x340>
 8009ef8:	d022      	beq.n	8009f40 <_dtoa_r+0x498>
 8009efa:	f1cb 0100 	rsb	r1, fp, #0
 8009efe:	4a70      	ldr	r2, [pc, #448]	; (800a0c0 <_dtoa_r+0x618>)
 8009f00:	f001 000f 	and.w	r0, r1, #15
 8009f04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009f08:	ed92 7b00 	vldr	d7, [r2]
 8009f0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009f10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f14:	486b      	ldr	r0, [pc, #428]	; (800a0c4 <_dtoa_r+0x61c>)
 8009f16:	1109      	asrs	r1, r1, #4
 8009f18:	2400      	movs	r4, #0
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	b929      	cbnz	r1, 8009f2a <_dtoa_r+0x482>
 8009f1e:	2c00      	cmp	r4, #0
 8009f20:	f43f af6a 	beq.w	8009df8 <_dtoa_r+0x350>
 8009f24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f28:	e766      	b.n	8009df8 <_dtoa_r+0x350>
 8009f2a:	07cf      	lsls	r7, r1, #31
 8009f2c:	d505      	bpl.n	8009f3a <_dtoa_r+0x492>
 8009f2e:	ed90 6b00 	vldr	d6, [r0]
 8009f32:	3201      	adds	r2, #1
 8009f34:	2401      	movs	r4, #1
 8009f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f3a:	1049      	asrs	r1, r1, #1
 8009f3c:	3008      	adds	r0, #8
 8009f3e:	e7ed      	b.n	8009f1c <_dtoa_r+0x474>
 8009f40:	2202      	movs	r2, #2
 8009f42:	e759      	b.n	8009df8 <_dtoa_r+0x350>
 8009f44:	465f      	mov	r7, fp
 8009f46:	4648      	mov	r0, r9
 8009f48:	e775      	b.n	8009e36 <_dtoa_r+0x38e>
 8009f4a:	ec42 1b17 	vmov	d7, r1, r2
 8009f4e:	4a5c      	ldr	r2, [pc, #368]	; (800a0c0 <_dtoa_r+0x618>)
 8009f50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009f54:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009f58:	9a01      	ldr	r2, [sp, #4]
 8009f5a:	1814      	adds	r4, r2, r0
 8009f5c:	9a07      	ldr	r2, [sp, #28]
 8009f5e:	b352      	cbz	r2, 8009fb6 <_dtoa_r+0x50e>
 8009f60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009f64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009f68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009f70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009f74:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009f78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009f7c:	ee14 2a90 	vmov	r2, s9
 8009f80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009f84:	3230      	adds	r2, #48	; 0x30
 8009f86:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009f8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f92:	f808 2b01 	strb.w	r2, [r8], #1
 8009f96:	d439      	bmi.n	800a00c <_dtoa_r+0x564>
 8009f98:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009f9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa4:	d472      	bmi.n	800a08c <_dtoa_r+0x5e4>
 8009fa6:	45a0      	cmp	r8, r4
 8009fa8:	f43f af6b 	beq.w	8009e82 <_dtoa_r+0x3da>
 8009fac:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009fb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009fb4:	e7e0      	b.n	8009f78 <_dtoa_r+0x4d0>
 8009fb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009fba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009fc4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009fc8:	ee14 2a90 	vmov	r2, s9
 8009fcc:	3230      	adds	r2, #48	; 0x30
 8009fce:	f808 2b01 	strb.w	r2, [r8], #1
 8009fd2:	45a0      	cmp	r8, r4
 8009fd4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009fd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009fdc:	d118      	bne.n	800a010 <_dtoa_r+0x568>
 8009fde:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009fe2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009fe6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	dc4d      	bgt.n	800a08c <_dtoa_r+0x5e4>
 8009ff0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffc:	f57f af41 	bpl.w	8009e82 <_dtoa_r+0x3da>
 800a000:	4688      	mov	r8, r1
 800a002:	3901      	subs	r1, #1
 800a004:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a008:	2b30      	cmp	r3, #48	; 0x30
 800a00a:	d0f9      	beq.n	800a000 <_dtoa_r+0x558>
 800a00c:	46bb      	mov	fp, r7
 800a00e:	e02a      	b.n	800a066 <_dtoa_r+0x5be>
 800a010:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a014:	e7d6      	b.n	8009fc4 <_dtoa_r+0x51c>
 800a016:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a01a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a01e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a022:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a026:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a02a:	ee15 3a10 	vmov	r3, s10
 800a02e:	3330      	adds	r3, #48	; 0x30
 800a030:	f808 3b01 	strb.w	r3, [r8], #1
 800a034:	9b01      	ldr	r3, [sp, #4]
 800a036:	eba8 0303 	sub.w	r3, r8, r3
 800a03a:	4599      	cmp	r9, r3
 800a03c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a040:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a044:	d133      	bne.n	800a0ae <_dtoa_r+0x606>
 800a046:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a04a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	dc1a      	bgt.n	800a08a <_dtoa_r+0x5e2>
 800a054:	eeb4 7b46 	vcmp.f64	d7, d6
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	d103      	bne.n	800a066 <_dtoa_r+0x5be>
 800a05e:	ee15 3a10 	vmov	r3, s10
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d411      	bmi.n	800a08a <_dtoa_r+0x5e2>
 800a066:	4629      	mov	r1, r5
 800a068:	4630      	mov	r0, r6
 800a06a:	f000 fd1f 	bl	800aaac <_Bfree>
 800a06e:	2300      	movs	r3, #0
 800a070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a072:	f888 3000 	strb.w	r3, [r8]
 800a076:	f10b 0301 	add.w	r3, fp, #1
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f43f ad61 	beq.w	8009b46 <_dtoa_r+0x9e>
 800a084:	f8c3 8000 	str.w	r8, [r3]
 800a088:	e55d      	b.n	8009b46 <_dtoa_r+0x9e>
 800a08a:	465f      	mov	r7, fp
 800a08c:	4643      	mov	r3, r8
 800a08e:	4698      	mov	r8, r3
 800a090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a094:	2a39      	cmp	r2, #57	; 0x39
 800a096:	d106      	bne.n	800a0a6 <_dtoa_r+0x5fe>
 800a098:	9a01      	ldr	r2, [sp, #4]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d1f7      	bne.n	800a08e <_dtoa_r+0x5e6>
 800a09e:	9901      	ldr	r1, [sp, #4]
 800a0a0:	2230      	movs	r2, #48	; 0x30
 800a0a2:	3701      	adds	r7, #1
 800a0a4:	700a      	strb	r2, [r1, #0]
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e7ae      	b.n	800a00c <_dtoa_r+0x564>
 800a0ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a0b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ba:	d1b2      	bne.n	800a022 <_dtoa_r+0x57a>
 800a0bc:	e7d3      	b.n	800a066 <_dtoa_r+0x5be>
 800a0be:	bf00      	nop
 800a0c0:	0800bc10 	.word	0x0800bc10
 800a0c4:	0800bbe8 	.word	0x0800bbe8
 800a0c8:	9907      	ldr	r1, [sp, #28]
 800a0ca:	2900      	cmp	r1, #0
 800a0cc:	f000 80d0 	beq.w	800a270 <_dtoa_r+0x7c8>
 800a0d0:	9906      	ldr	r1, [sp, #24]
 800a0d2:	2901      	cmp	r1, #1
 800a0d4:	f300 80b4 	bgt.w	800a240 <_dtoa_r+0x798>
 800a0d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	f000 80ac 	beq.w	800a238 <_dtoa_r+0x790>
 800a0e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0e8:	461c      	mov	r4, r3
 800a0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	4413      	add	r3, r2
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	f000 fd8e 	bl	800ac1c <__i2b>
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	4607      	mov	r7, r0
 800a104:	f1b8 0f00 	cmp.w	r8, #0
 800a108:	dd0d      	ble.n	800a126 <_dtoa_r+0x67e>
 800a10a:	9a05      	ldr	r2, [sp, #20]
 800a10c:	2a00      	cmp	r2, #0
 800a10e:	dd0a      	ble.n	800a126 <_dtoa_r+0x67e>
 800a110:	4542      	cmp	r2, r8
 800a112:	9904      	ldr	r1, [sp, #16]
 800a114:	bfa8      	it	ge
 800a116:	4642      	movge	r2, r8
 800a118:	1a89      	subs	r1, r1, r2
 800a11a:	9104      	str	r1, [sp, #16]
 800a11c:	9905      	ldr	r1, [sp, #20]
 800a11e:	eba8 0802 	sub.w	r8, r8, r2
 800a122:	1a8a      	subs	r2, r1, r2
 800a124:	9205      	str	r2, [sp, #20]
 800a126:	b303      	cbz	r3, 800a16a <_dtoa_r+0x6c2>
 800a128:	9a07      	ldr	r2, [sp, #28]
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	f000 80a5 	beq.w	800a27a <_dtoa_r+0x7d2>
 800a130:	2c00      	cmp	r4, #0
 800a132:	dd13      	ble.n	800a15c <_dtoa_r+0x6b4>
 800a134:	4639      	mov	r1, r7
 800a136:	4622      	mov	r2, r4
 800a138:	4630      	mov	r0, r6
 800a13a:	930d      	str	r3, [sp, #52]	; 0x34
 800a13c:	f000 fe2e 	bl	800ad9c <__pow5mult>
 800a140:	462a      	mov	r2, r5
 800a142:	4601      	mov	r1, r0
 800a144:	4607      	mov	r7, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f000 fd7e 	bl	800ac48 <__multiply>
 800a14c:	4629      	mov	r1, r5
 800a14e:	900a      	str	r0, [sp, #40]	; 0x28
 800a150:	4630      	mov	r0, r6
 800a152:	f000 fcab 	bl	800aaac <_Bfree>
 800a156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15a:	4615      	mov	r5, r2
 800a15c:	1b1a      	subs	r2, r3, r4
 800a15e:	d004      	beq.n	800a16a <_dtoa_r+0x6c2>
 800a160:	4629      	mov	r1, r5
 800a162:	4630      	mov	r0, r6
 800a164:	f000 fe1a 	bl	800ad9c <__pow5mult>
 800a168:	4605      	mov	r5, r0
 800a16a:	2101      	movs	r1, #1
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 fd55 	bl	800ac1c <__i2b>
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	f340 8081 	ble.w	800a27e <_dtoa_r+0x7d6>
 800a17c:	461a      	mov	r2, r3
 800a17e:	4601      	mov	r1, r0
 800a180:	4630      	mov	r0, r6
 800a182:	f000 fe0b 	bl	800ad9c <__pow5mult>
 800a186:	9b06      	ldr	r3, [sp, #24]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	4604      	mov	r4, r0
 800a18c:	dd7a      	ble.n	800a284 <_dtoa_r+0x7dc>
 800a18e:	2300      	movs	r3, #0
 800a190:	930a      	str	r3, [sp, #40]	; 0x28
 800a192:	6922      	ldr	r2, [r4, #16]
 800a194:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a198:	6910      	ldr	r0, [r2, #16]
 800a19a:	f000 fcef 	bl	800ab7c <__hi0bits>
 800a19e:	f1c0 0020 	rsb	r0, r0, #32
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	4418      	add	r0, r3
 800a1a6:	f010 001f 	ands.w	r0, r0, #31
 800a1aa:	f000 808c 	beq.w	800a2c6 <_dtoa_r+0x81e>
 800a1ae:	f1c0 0220 	rsb	r2, r0, #32
 800a1b2:	2a04      	cmp	r2, #4
 800a1b4:	f340 8085 	ble.w	800a2c2 <_dtoa_r+0x81a>
 800a1b8:	f1c0 001c 	rsb	r0, r0, #28
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	4403      	add	r3, r0
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	4403      	add	r3, r0
 800a1c6:	4480      	add	r8, r0
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	9b04      	ldr	r3, [sp, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd05      	ble.n	800a1dc <_dtoa_r+0x734>
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 fe3b 	bl	800ae50 <__lshift>
 800a1da:	4605      	mov	r5, r0
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dd05      	ble.n	800a1ee <_dtoa_r+0x746>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f000 fe32 	bl	800ae50 <__lshift>
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d06a      	beq.n	800a2ca <_dtoa_r+0x822>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 fe9a 	bl	800af30 <__mcmp>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	da64      	bge.n	800a2ca <_dtoa_r+0x822>
 800a200:	2300      	movs	r3, #0
 800a202:	4629      	mov	r1, r5
 800a204:	220a      	movs	r2, #10
 800a206:	4630      	mov	r0, r6
 800a208:	f000 fc72 	bl	800aaf0 <__multadd>
 800a20c:	9b07      	ldr	r3, [sp, #28]
 800a20e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a212:	4605      	mov	r5, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 8191 	beq.w	800a53c <_dtoa_r+0xa94>
 800a21a:	4639      	mov	r1, r7
 800a21c:	2300      	movs	r3, #0
 800a21e:	220a      	movs	r2, #10
 800a220:	4630      	mov	r0, r6
 800a222:	f000 fc65 	bl	800aaf0 <__multadd>
 800a226:	f1ba 0f00 	cmp.w	sl, #0
 800a22a:	4607      	mov	r7, r0
 800a22c:	f300 808d 	bgt.w	800a34a <_dtoa_r+0x8a2>
 800a230:	9b06      	ldr	r3, [sp, #24]
 800a232:	2b02      	cmp	r3, #2
 800a234:	dc50      	bgt.n	800a2d8 <_dtoa_r+0x830>
 800a236:	e088      	b.n	800a34a <_dtoa_r+0x8a2>
 800a238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a23a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a23e:	e751      	b.n	800a0e4 <_dtoa_r+0x63c>
 800a240:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a244:	42a3      	cmp	r3, r4
 800a246:	bfbf      	itttt	lt
 800a248:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a24a:	1ae3      	sublt	r3, r4, r3
 800a24c:	18d2      	addlt	r2, r2, r3
 800a24e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a250:	bfb6      	itet	lt
 800a252:	4623      	movlt	r3, r4
 800a254:	1b1c      	subge	r4, r3, r4
 800a256:	2400      	movlt	r4, #0
 800a258:	f1b9 0f00 	cmp.w	r9, #0
 800a25c:	bfb5      	itete	lt
 800a25e:	9a04      	ldrlt	r2, [sp, #16]
 800a260:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a264:	eba2 0809 	sublt.w	r8, r2, r9
 800a268:	464a      	movge	r2, r9
 800a26a:	bfb8      	it	lt
 800a26c:	2200      	movlt	r2, #0
 800a26e:	e73c      	b.n	800a0ea <_dtoa_r+0x642>
 800a270:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a274:	9f07      	ldr	r7, [sp, #28]
 800a276:	461c      	mov	r4, r3
 800a278:	e744      	b.n	800a104 <_dtoa_r+0x65c>
 800a27a:	461a      	mov	r2, r3
 800a27c:	e770      	b.n	800a160 <_dtoa_r+0x6b8>
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	2b01      	cmp	r3, #1
 800a282:	dc18      	bgt.n	800a2b6 <_dtoa_r+0x80e>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	b9b3      	cbnz	r3, 800a2b6 <_dtoa_r+0x80e>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a28e:	b9a2      	cbnz	r2, 800a2ba <_dtoa_r+0x812>
 800a290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a294:	0d12      	lsrs	r2, r2, #20
 800a296:	0512      	lsls	r2, r2, #20
 800a298:	b18a      	cbz	r2, 800a2be <_dtoa_r+0x816>
 800a29a:	9b04      	ldr	r3, [sp, #16]
 800a29c:	3301      	adds	r3, #1
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	9b05      	ldr	r3, [sp, #20]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f47f af70 	bne.w	800a192 <_dtoa_r+0x6ea>
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	e775      	b.n	800a1a2 <_dtoa_r+0x6fa>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e7f6      	b.n	800a2a8 <_dtoa_r+0x800>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	e7f4      	b.n	800a2a8 <_dtoa_r+0x800>
 800a2be:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c0:	e7f3      	b.n	800a2aa <_dtoa_r+0x802>
 800a2c2:	d082      	beq.n	800a1ca <_dtoa_r+0x722>
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	301c      	adds	r0, #28
 800a2c8:	e778      	b.n	800a1bc <_dtoa_r+0x714>
 800a2ca:	f1b9 0f00 	cmp.w	r9, #0
 800a2ce:	dc37      	bgt.n	800a340 <_dtoa_r+0x898>
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	dd34      	ble.n	800a340 <_dtoa_r+0x898>
 800a2d6:	46ca      	mov	sl, r9
 800a2d8:	f1ba 0f00 	cmp.w	sl, #0
 800a2dc:	d10d      	bne.n	800a2fa <_dtoa_r+0x852>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4653      	mov	r3, sl
 800a2e2:	2205      	movs	r2, #5
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 fc03 	bl	800aaf0 <__multadd>
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f000 fe1e 	bl	800af30 <__mcmp>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f73f adeb 	bgt.w	8009ed0 <_dtoa_r+0x428>
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a300:	ea6f 0b03 	mvn.w	fp, r3
 800a304:	f04f 0900 	mov.w	r9, #0
 800a308:	4621      	mov	r1, r4
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 fbce 	bl	800aaac <_Bfree>
 800a310:	2f00      	cmp	r7, #0
 800a312:	f43f aea8 	beq.w	800a066 <_dtoa_r+0x5be>
 800a316:	f1b9 0f00 	cmp.w	r9, #0
 800a31a:	d005      	beq.n	800a328 <_dtoa_r+0x880>
 800a31c:	45b9      	cmp	r9, r7
 800a31e:	d003      	beq.n	800a328 <_dtoa_r+0x880>
 800a320:	4649      	mov	r1, r9
 800a322:	4630      	mov	r0, r6
 800a324:	f000 fbc2 	bl	800aaac <_Bfree>
 800a328:	4639      	mov	r1, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	f000 fbbe 	bl	800aaac <_Bfree>
 800a330:	e699      	b.n	800a066 <_dtoa_r+0x5be>
 800a332:	2400      	movs	r4, #0
 800a334:	4627      	mov	r7, r4
 800a336:	e7e0      	b.n	800a2fa <_dtoa_r+0x852>
 800a338:	46bb      	mov	fp, r7
 800a33a:	4604      	mov	r4, r0
 800a33c:	4607      	mov	r7, r0
 800a33e:	e5c7      	b.n	8009ed0 <_dtoa_r+0x428>
 800a340:	9b07      	ldr	r3, [sp, #28]
 800a342:	46ca      	mov	sl, r9
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 8100 	beq.w	800a54a <_dtoa_r+0xaa2>
 800a34a:	f1b8 0f00 	cmp.w	r8, #0
 800a34e:	dd05      	ble.n	800a35c <_dtoa_r+0x8b4>
 800a350:	4639      	mov	r1, r7
 800a352:	4642      	mov	r2, r8
 800a354:	4630      	mov	r0, r6
 800a356:	f000 fd7b 	bl	800ae50 <__lshift>
 800a35a:	4607      	mov	r7, r0
 800a35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d05d      	beq.n	800a41e <_dtoa_r+0x976>
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	4630      	mov	r0, r6
 800a366:	f000 fb61 	bl	800aa2c <_Balloc>
 800a36a:	4680      	mov	r8, r0
 800a36c:	b928      	cbnz	r0, 800a37a <_dtoa_r+0x8d2>
 800a36e:	4b82      	ldr	r3, [pc, #520]	; (800a578 <_dtoa_r+0xad0>)
 800a370:	4602      	mov	r2, r0
 800a372:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a376:	f7ff bbaf 	b.w	8009ad8 <_dtoa_r+0x30>
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	3202      	adds	r2, #2
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	f107 010c 	add.w	r1, r7, #12
 800a384:	300c      	adds	r0, #12
 800a386:	f000 fb29 	bl	800a9dc <memcpy>
 800a38a:	2201      	movs	r2, #1
 800a38c:	4641      	mov	r1, r8
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 fd5e 	bl	800ae50 <__lshift>
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	3301      	adds	r3, #1
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	4453      	add	r3, sl
 800a39e:	9308      	str	r3, [sp, #32]
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	46b9      	mov	r9, r7
 800a3a8:	9307      	str	r3, [sp, #28]
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	9302      	str	r3, [sp, #8]
 800a3b6:	f7ff faea 	bl	800998e <quorem>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	3330      	adds	r3, #48	; 0x30
 800a3be:	9005      	str	r0, [sp, #20]
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c6:	f000 fdb3 	bl	800af30 <__mcmp>
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 fdc9 	bl	800af68 <__mdiff>
 800a3d6:	68c2      	ldr	r2, [r0, #12]
 800a3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3da:	4680      	mov	r8, r0
 800a3dc:	bb0a      	cbnz	r2, 800a422 <_dtoa_r+0x97a>
 800a3de:	4601      	mov	r1, r0
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 fda5 	bl	800af30 <__mcmp>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a3f2:	f000 fb5b 	bl	800aaac <_Bfree>
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3fa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a3fe:	ea43 0102 	orr.w	r1, r3, r2
 800a402:	9b07      	ldr	r3, [sp, #28]
 800a404:	430b      	orrs	r3, r1
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	d10d      	bne.n	800a426 <_dtoa_r+0x97e>
 800a40a:	2b39      	cmp	r3, #57	; 0x39
 800a40c:	d029      	beq.n	800a462 <_dtoa_r+0x9ba>
 800a40e:	f1ba 0f00 	cmp.w	sl, #0
 800a412:	dd01      	ble.n	800a418 <_dtoa_r+0x970>
 800a414:	9b05      	ldr	r3, [sp, #20]
 800a416:	3331      	adds	r3, #49	; 0x31
 800a418:	9a02      	ldr	r2, [sp, #8]
 800a41a:	7013      	strb	r3, [r2, #0]
 800a41c:	e774      	b.n	800a308 <_dtoa_r+0x860>
 800a41e:	4638      	mov	r0, r7
 800a420:	e7b8      	b.n	800a394 <_dtoa_r+0x8ec>
 800a422:	2201      	movs	r2, #1
 800a424:	e7e1      	b.n	800a3ea <_dtoa_r+0x942>
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	db06      	blt.n	800a43a <_dtoa_r+0x992>
 800a42c:	9906      	ldr	r1, [sp, #24]
 800a42e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a432:	9907      	ldr	r1, [sp, #28]
 800a434:	ea5a 0101 	orrs.w	r1, sl, r1
 800a438:	d120      	bne.n	800a47c <_dtoa_r+0x9d4>
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	ddec      	ble.n	800a418 <_dtoa_r+0x970>
 800a43e:	4629      	mov	r1, r5
 800a440:	2201      	movs	r2, #1
 800a442:	4630      	mov	r0, r6
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	f000 fd03 	bl	800ae50 <__lshift>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4605      	mov	r5, r0
 800a44e:	f000 fd6f 	bl	800af30 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	dc02      	bgt.n	800a45e <_dtoa_r+0x9b6>
 800a458:	d1de      	bne.n	800a418 <_dtoa_r+0x970>
 800a45a:	07da      	lsls	r2, r3, #31
 800a45c:	d5dc      	bpl.n	800a418 <_dtoa_r+0x970>
 800a45e:	2b39      	cmp	r3, #57	; 0x39
 800a460:	d1d8      	bne.n	800a414 <_dtoa_r+0x96c>
 800a462:	9a02      	ldr	r2, [sp, #8]
 800a464:	2339      	movs	r3, #57	; 0x39
 800a466:	7013      	strb	r3, [r2, #0]
 800a468:	4643      	mov	r3, r8
 800a46a:	4698      	mov	r8, r3
 800a46c:	3b01      	subs	r3, #1
 800a46e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a472:	2a39      	cmp	r2, #57	; 0x39
 800a474:	d051      	beq.n	800a51a <_dtoa_r+0xa72>
 800a476:	3201      	adds	r2, #1
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	e745      	b.n	800a308 <_dtoa_r+0x860>
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	dd03      	ble.n	800a488 <_dtoa_r+0x9e0>
 800a480:	2b39      	cmp	r3, #57	; 0x39
 800a482:	d0ee      	beq.n	800a462 <_dtoa_r+0x9ba>
 800a484:	3301      	adds	r3, #1
 800a486:	e7c7      	b.n	800a418 <_dtoa_r+0x970>
 800a488:	9a04      	ldr	r2, [sp, #16]
 800a48a:	9908      	ldr	r1, [sp, #32]
 800a48c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a490:	428a      	cmp	r2, r1
 800a492:	d02b      	beq.n	800a4ec <_dtoa_r+0xa44>
 800a494:	4629      	mov	r1, r5
 800a496:	2300      	movs	r3, #0
 800a498:	220a      	movs	r2, #10
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 fb28 	bl	800aaf0 <__multadd>
 800a4a0:	45b9      	cmp	r9, r7
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	f04f 0300 	mov.w	r3, #0
 800a4a8:	f04f 020a 	mov.w	r2, #10
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	d107      	bne.n	800a4c2 <_dtoa_r+0xa1a>
 800a4b2:	f000 fb1d 	bl	800aaf0 <__multadd>
 800a4b6:	4681      	mov	r9, r0
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	9b04      	ldr	r3, [sp, #16]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	e774      	b.n	800a3ac <_dtoa_r+0x904>
 800a4c2:	f000 fb15 	bl	800aaf0 <__multadd>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4681      	mov	r9, r0
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 fb0e 	bl	800aaf0 <__multadd>
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	e7f0      	b.n	800a4ba <_dtoa_r+0xa12>
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	9a01      	ldr	r2, [sp, #4]
 800a4de:	bfcc      	ite	gt
 800a4e0:	46d0      	movgt	r8, sl
 800a4e2:	f04f 0801 	movle.w	r8, #1
 800a4e6:	4490      	add	r8, r2
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	9302      	str	r3, [sp, #8]
 800a4f4:	f000 fcac 	bl	800ae50 <__lshift>
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	f000 fd18 	bl	800af30 <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	dcb1      	bgt.n	800a468 <_dtoa_r+0x9c0>
 800a504:	d102      	bne.n	800a50c <_dtoa_r+0xa64>
 800a506:	9b02      	ldr	r3, [sp, #8]
 800a508:	07db      	lsls	r3, r3, #31
 800a50a:	d4ad      	bmi.n	800a468 <_dtoa_r+0x9c0>
 800a50c:	4643      	mov	r3, r8
 800a50e:	4698      	mov	r8, r3
 800a510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a514:	2a30      	cmp	r2, #48	; 0x30
 800a516:	d0fa      	beq.n	800a50e <_dtoa_r+0xa66>
 800a518:	e6f6      	b.n	800a308 <_dtoa_r+0x860>
 800a51a:	9a01      	ldr	r2, [sp, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d1a4      	bne.n	800a46a <_dtoa_r+0x9c2>
 800a520:	f10b 0b01 	add.w	fp, fp, #1
 800a524:	2331      	movs	r3, #49	; 0x31
 800a526:	e778      	b.n	800a41a <_dtoa_r+0x972>
 800a528:	4b14      	ldr	r3, [pc, #80]	; (800a57c <_dtoa_r+0xad4>)
 800a52a:	f7ff bb27 	b.w	8009b7c <_dtoa_r+0xd4>
 800a52e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a530:	2b00      	cmp	r3, #0
 800a532:	f47f ab03 	bne.w	8009b3c <_dtoa_r+0x94>
 800a536:	4b12      	ldr	r3, [pc, #72]	; (800a580 <_dtoa_r+0xad8>)
 800a538:	f7ff bb20 	b.w	8009b7c <_dtoa_r+0xd4>
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	dc03      	bgt.n	800a54a <_dtoa_r+0xaa2>
 800a542:	9b06      	ldr	r3, [sp, #24]
 800a544:	2b02      	cmp	r3, #2
 800a546:	f73f aec7 	bgt.w	800a2d8 <_dtoa_r+0x830>
 800a54a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f7ff fa1c 	bl	800998e <quorem>
 800a556:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a55a:	f808 3b01 	strb.w	r3, [r8], #1
 800a55e:	9a01      	ldr	r2, [sp, #4]
 800a560:	eba8 0202 	sub.w	r2, r8, r2
 800a564:	4592      	cmp	sl, r2
 800a566:	ddb7      	ble.n	800a4d8 <_dtoa_r+0xa30>
 800a568:	4629      	mov	r1, r5
 800a56a:	2300      	movs	r3, #0
 800a56c:	220a      	movs	r2, #10
 800a56e:	4630      	mov	r0, r6
 800a570:	f000 fabe 	bl	800aaf0 <__multadd>
 800a574:	4605      	mov	r5, r0
 800a576:	e7ea      	b.n	800a54e <_dtoa_r+0xaa6>
 800a578:	0800bb18 	.word	0x0800bb18
 800a57c:	0800ba75 	.word	0x0800ba75
 800a580:	0800ba99 	.word	0x0800ba99

0800a584 <__sflush_r>:
 800a584:	898a      	ldrh	r2, [r1, #12]
 800a586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58a:	4605      	mov	r5, r0
 800a58c:	0710      	lsls	r0, r2, #28
 800a58e:	460c      	mov	r4, r1
 800a590:	d458      	bmi.n	800a644 <__sflush_r+0xc0>
 800a592:	684b      	ldr	r3, [r1, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc05      	bgt.n	800a5a4 <__sflush_r+0x20>
 800a598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dc02      	bgt.n	800a5a4 <__sflush_r+0x20>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d0f9      	beq.n	800a59e <__sflush_r+0x1a>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5b0:	682f      	ldr	r7, [r5, #0]
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	d032      	beq.n	800a61c <__sflush_r+0x98>
 800a5b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	075a      	lsls	r2, r3, #29
 800a5bc:	d505      	bpl.n	800a5ca <__sflush_r+0x46>
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	1ac0      	subs	r0, r0, r3
 800a5c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5c4:	b10b      	cbz	r3, 800a5ca <__sflush_r+0x46>
 800a5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c8:	1ac0      	subs	r0, r0, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5d0:	6a21      	ldr	r1, [r4, #32]
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	47b0      	blx	r6
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	d106      	bne.n	800a5ea <__sflush_r+0x66>
 800a5dc:	6829      	ldr	r1, [r5, #0]
 800a5de:	291d      	cmp	r1, #29
 800a5e0:	d82c      	bhi.n	800a63c <__sflush_r+0xb8>
 800a5e2:	4a2a      	ldr	r2, [pc, #168]	; (800a68c <__sflush_r+0x108>)
 800a5e4:	40ca      	lsrs	r2, r1
 800a5e6:	07d6      	lsls	r6, r2, #31
 800a5e8:	d528      	bpl.n	800a63c <__sflush_r+0xb8>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	6062      	str	r2, [r4, #4]
 800a5ee:	04d9      	lsls	r1, r3, #19
 800a5f0:	6922      	ldr	r2, [r4, #16]
 800a5f2:	6022      	str	r2, [r4, #0]
 800a5f4:	d504      	bpl.n	800a600 <__sflush_r+0x7c>
 800a5f6:	1c42      	adds	r2, r0, #1
 800a5f8:	d101      	bne.n	800a5fe <__sflush_r+0x7a>
 800a5fa:	682b      	ldr	r3, [r5, #0]
 800a5fc:	b903      	cbnz	r3, 800a600 <__sflush_r+0x7c>
 800a5fe:	6560      	str	r0, [r4, #84]	; 0x54
 800a600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a602:	602f      	str	r7, [r5, #0]
 800a604:	2900      	cmp	r1, #0
 800a606:	d0ca      	beq.n	800a59e <__sflush_r+0x1a>
 800a608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a60c:	4299      	cmp	r1, r3
 800a60e:	d002      	beq.n	800a616 <__sflush_r+0x92>
 800a610:	4628      	mov	r0, r5
 800a612:	f000 fda5 	bl	800b160 <_free_r>
 800a616:	2000      	movs	r0, #0
 800a618:	6360      	str	r0, [r4, #52]	; 0x34
 800a61a:	e7c1      	b.n	800a5a0 <__sflush_r+0x1c>
 800a61c:	6a21      	ldr	r1, [r4, #32]
 800a61e:	2301      	movs	r3, #1
 800a620:	4628      	mov	r0, r5
 800a622:	47b0      	blx	r6
 800a624:	1c41      	adds	r1, r0, #1
 800a626:	d1c7      	bne.n	800a5b8 <__sflush_r+0x34>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0c4      	beq.n	800a5b8 <__sflush_r+0x34>
 800a62e:	2b1d      	cmp	r3, #29
 800a630:	d001      	beq.n	800a636 <__sflush_r+0xb2>
 800a632:	2b16      	cmp	r3, #22
 800a634:	d101      	bne.n	800a63a <__sflush_r+0xb6>
 800a636:	602f      	str	r7, [r5, #0]
 800a638:	e7b1      	b.n	800a59e <__sflush_r+0x1a>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	e7ad      	b.n	800a5a0 <__sflush_r+0x1c>
 800a644:	690f      	ldr	r7, [r1, #16]
 800a646:	2f00      	cmp	r7, #0
 800a648:	d0a9      	beq.n	800a59e <__sflush_r+0x1a>
 800a64a:	0793      	lsls	r3, r2, #30
 800a64c:	680e      	ldr	r6, [r1, #0]
 800a64e:	bf08      	it	eq
 800a650:	694b      	ldreq	r3, [r1, #20]
 800a652:	600f      	str	r7, [r1, #0]
 800a654:	bf18      	it	ne
 800a656:	2300      	movne	r3, #0
 800a658:	eba6 0807 	sub.w	r8, r6, r7
 800a65c:	608b      	str	r3, [r1, #8]
 800a65e:	f1b8 0f00 	cmp.w	r8, #0
 800a662:	dd9c      	ble.n	800a59e <__sflush_r+0x1a>
 800a664:	6a21      	ldr	r1, [r4, #32]
 800a666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a668:	4643      	mov	r3, r8
 800a66a:	463a      	mov	r2, r7
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b0      	blx	r6
 800a670:	2800      	cmp	r0, #0
 800a672:	dc06      	bgt.n	800a682 <__sflush_r+0xfe>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a680:	e78e      	b.n	800a5a0 <__sflush_r+0x1c>
 800a682:	4407      	add	r7, r0
 800a684:	eba8 0800 	sub.w	r8, r8, r0
 800a688:	e7e9      	b.n	800a65e <__sflush_r+0xda>
 800a68a:	bf00      	nop
 800a68c:	20400001 	.word	0x20400001

0800a690 <_fflush_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	690b      	ldr	r3, [r1, #16]
 800a694:	4605      	mov	r5, r0
 800a696:	460c      	mov	r4, r1
 800a698:	b913      	cbnz	r3, 800a6a0 <_fflush_r+0x10>
 800a69a:	2500      	movs	r5, #0
 800a69c:	4628      	mov	r0, r5
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	b118      	cbz	r0, 800a6aa <_fflush_r+0x1a>
 800a6a2:	6983      	ldr	r3, [r0, #24]
 800a6a4:	b90b      	cbnz	r3, 800a6aa <_fflush_r+0x1a>
 800a6a6:	f000 f887 	bl	800a7b8 <__sinit>
 800a6aa:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <_fflush_r+0x6c>)
 800a6ac:	429c      	cmp	r4, r3
 800a6ae:	d11b      	bne.n	800a6e8 <_fflush_r+0x58>
 800a6b0:	686c      	ldr	r4, [r5, #4]
 800a6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0ef      	beq.n	800a69a <_fflush_r+0xa>
 800a6ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6bc:	07d0      	lsls	r0, r2, #31
 800a6be:	d404      	bmi.n	800a6ca <_fflush_r+0x3a>
 800a6c0:	0599      	lsls	r1, r3, #22
 800a6c2:	d402      	bmi.n	800a6ca <_fflush_r+0x3a>
 800a6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6c6:	f000 f91a 	bl	800a8fe <__retarget_lock_acquire_recursive>
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	f7ff ff59 	bl	800a584 <__sflush_r>
 800a6d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6d4:	07da      	lsls	r2, r3, #31
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	d4e0      	bmi.n	800a69c <_fflush_r+0xc>
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	059b      	lsls	r3, r3, #22
 800a6de:	d4dd      	bmi.n	800a69c <_fflush_r+0xc>
 800a6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6e2:	f000 f90d 	bl	800a900 <__retarget_lock_release_recursive>
 800a6e6:	e7d9      	b.n	800a69c <_fflush_r+0xc>
 800a6e8:	4b05      	ldr	r3, [pc, #20]	; (800a700 <_fflush_r+0x70>)
 800a6ea:	429c      	cmp	r4, r3
 800a6ec:	d101      	bne.n	800a6f2 <_fflush_r+0x62>
 800a6ee:	68ac      	ldr	r4, [r5, #8]
 800a6f0:	e7df      	b.n	800a6b2 <_fflush_r+0x22>
 800a6f2:	4b04      	ldr	r3, [pc, #16]	; (800a704 <_fflush_r+0x74>)
 800a6f4:	429c      	cmp	r4, r3
 800a6f6:	bf08      	it	eq
 800a6f8:	68ec      	ldreq	r4, [r5, #12]
 800a6fa:	e7da      	b.n	800a6b2 <_fflush_r+0x22>
 800a6fc:	0800bb4c 	.word	0x0800bb4c
 800a700:	0800bb6c 	.word	0x0800bb6c
 800a704:	0800bb2c 	.word	0x0800bb2c

0800a708 <std>:
 800a708:	2300      	movs	r3, #0
 800a70a:	b510      	push	{r4, lr}
 800a70c:	4604      	mov	r4, r0
 800a70e:	e9c0 3300 	strd	r3, r3, [r0]
 800a712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a716:	6083      	str	r3, [r0, #8]
 800a718:	8181      	strh	r1, [r0, #12]
 800a71a:	6643      	str	r3, [r0, #100]	; 0x64
 800a71c:	81c2      	strh	r2, [r0, #14]
 800a71e:	6183      	str	r3, [r0, #24]
 800a720:	4619      	mov	r1, r3
 800a722:	2208      	movs	r2, #8
 800a724:	305c      	adds	r0, #92	; 0x5c
 800a726:	f7fe fa6d 	bl	8008c04 <memset>
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <std+0x38>)
 800a72c:	6263      	str	r3, [r4, #36]	; 0x24
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <std+0x3c>)
 800a730:	62a3      	str	r3, [r4, #40]	; 0x28
 800a732:	4b05      	ldr	r3, [pc, #20]	; (800a748 <std+0x40>)
 800a734:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <std+0x44>)
 800a738:	6224      	str	r4, [r4, #32]
 800a73a:	6323      	str	r3, [r4, #48]	; 0x30
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	bf00      	nop
 800a740:	0800b6dd 	.word	0x0800b6dd
 800a744:	0800b6ff 	.word	0x0800b6ff
 800a748:	0800b737 	.word	0x0800b737
 800a74c:	0800b75b 	.word	0x0800b75b

0800a750 <_cleanup_r>:
 800a750:	4901      	ldr	r1, [pc, #4]	; (800a758 <_cleanup_r+0x8>)
 800a752:	f000 b8af 	b.w	800a8b4 <_fwalk_reent>
 800a756:	bf00      	nop
 800a758:	0800a691 	.word	0x0800a691

0800a75c <__sfmoreglue>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	2268      	movs	r2, #104	; 0x68
 800a760:	1e4d      	subs	r5, r1, #1
 800a762:	4355      	muls	r5, r2
 800a764:	460e      	mov	r6, r1
 800a766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a76a:	f000 fd65 	bl	800b238 <_malloc_r>
 800a76e:	4604      	mov	r4, r0
 800a770:	b140      	cbz	r0, 800a784 <__sfmoreglue+0x28>
 800a772:	2100      	movs	r1, #0
 800a774:	e9c0 1600 	strd	r1, r6, [r0]
 800a778:	300c      	adds	r0, #12
 800a77a:	60a0      	str	r0, [r4, #8]
 800a77c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a780:	f7fe fa40 	bl	8008c04 <memset>
 800a784:	4620      	mov	r0, r4
 800a786:	bd70      	pop	{r4, r5, r6, pc}

0800a788 <__sfp_lock_acquire>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__sfp_lock_acquire+0x8>)
 800a78a:	f000 b8b8 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	24000505 	.word	0x24000505

0800a794 <__sfp_lock_release>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__sfp_lock_release+0x8>)
 800a796:	f000 b8b3 	b.w	800a900 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	24000505 	.word	0x24000505

0800a7a0 <__sinit_lock_acquire>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__sinit_lock_acquire+0x8>)
 800a7a2:	f000 b8ac 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	24000506 	.word	0x24000506

0800a7ac <__sinit_lock_release>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__sinit_lock_release+0x8>)
 800a7ae:	f000 b8a7 	b.w	800a900 <__retarget_lock_release_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	24000506 	.word	0x24000506

0800a7b8 <__sinit>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	f7ff fff0 	bl	800a7a0 <__sinit_lock_acquire>
 800a7c0:	69a3      	ldr	r3, [r4, #24]
 800a7c2:	b11b      	cbz	r3, 800a7cc <__sinit+0x14>
 800a7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c8:	f7ff bff0 	b.w	800a7ac <__sinit_lock_release>
 800a7cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7d0:	6523      	str	r3, [r4, #80]	; 0x50
 800a7d2:	4b13      	ldr	r3, [pc, #76]	; (800a820 <__sinit+0x68>)
 800a7d4:	4a13      	ldr	r2, [pc, #76]	; (800a824 <__sinit+0x6c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	bf04      	itt	eq
 800a7de:	2301      	moveq	r3, #1
 800a7e0:	61a3      	streq	r3, [r4, #24]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 f820 	bl	800a828 <__sfp>
 800a7e8:	6060      	str	r0, [r4, #4]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 f81c 	bl	800a828 <__sfp>
 800a7f0:	60a0      	str	r0, [r4, #8]
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 f818 	bl	800a828 <__sfp>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	60e0      	str	r0, [r4, #12]
 800a7fc:	2104      	movs	r1, #4
 800a7fe:	6860      	ldr	r0, [r4, #4]
 800a800:	f7ff ff82 	bl	800a708 <std>
 800a804:	68a0      	ldr	r0, [r4, #8]
 800a806:	2201      	movs	r2, #1
 800a808:	2109      	movs	r1, #9
 800a80a:	f7ff ff7d 	bl	800a708 <std>
 800a80e:	68e0      	ldr	r0, [r4, #12]
 800a810:	2202      	movs	r2, #2
 800a812:	2112      	movs	r1, #18
 800a814:	f7ff ff78 	bl	800a708 <std>
 800a818:	2301      	movs	r3, #1
 800a81a:	61a3      	str	r3, [r4, #24]
 800a81c:	e7d2      	b.n	800a7c4 <__sinit+0xc>
 800a81e:	bf00      	nop
 800a820:	0800ba50 	.word	0x0800ba50
 800a824:	0800a751 	.word	0x0800a751

0800a828 <__sfp>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	4607      	mov	r7, r0
 800a82c:	f7ff ffac 	bl	800a788 <__sfp_lock_acquire>
 800a830:	4b1e      	ldr	r3, [pc, #120]	; (800a8ac <__sfp+0x84>)
 800a832:	681e      	ldr	r6, [r3, #0]
 800a834:	69b3      	ldr	r3, [r6, #24]
 800a836:	b913      	cbnz	r3, 800a83e <__sfp+0x16>
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff ffbd 	bl	800a7b8 <__sinit>
 800a83e:	3648      	adds	r6, #72	; 0x48
 800a840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a844:	3b01      	subs	r3, #1
 800a846:	d503      	bpl.n	800a850 <__sfp+0x28>
 800a848:	6833      	ldr	r3, [r6, #0]
 800a84a:	b30b      	cbz	r3, 800a890 <__sfp+0x68>
 800a84c:	6836      	ldr	r6, [r6, #0]
 800a84e:	e7f7      	b.n	800a840 <__sfp+0x18>
 800a850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a854:	b9d5      	cbnz	r5, 800a88c <__sfp+0x64>
 800a856:	4b16      	ldr	r3, [pc, #88]	; (800a8b0 <__sfp+0x88>)
 800a858:	60e3      	str	r3, [r4, #12]
 800a85a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a85e:	6665      	str	r5, [r4, #100]	; 0x64
 800a860:	f000 f84c 	bl	800a8fc <__retarget_lock_init_recursive>
 800a864:	f7ff ff96 	bl	800a794 <__sfp_lock_release>
 800a868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a86c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a870:	6025      	str	r5, [r4, #0]
 800a872:	61a5      	str	r5, [r4, #24]
 800a874:	2208      	movs	r2, #8
 800a876:	4629      	mov	r1, r5
 800a878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a87c:	f7fe f9c2 	bl	8008c04 <memset>
 800a880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a888:	4620      	mov	r0, r4
 800a88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a88c:	3468      	adds	r4, #104	; 0x68
 800a88e:	e7d9      	b.n	800a844 <__sfp+0x1c>
 800a890:	2104      	movs	r1, #4
 800a892:	4638      	mov	r0, r7
 800a894:	f7ff ff62 	bl	800a75c <__sfmoreglue>
 800a898:	4604      	mov	r4, r0
 800a89a:	6030      	str	r0, [r6, #0]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1d5      	bne.n	800a84c <__sfp+0x24>
 800a8a0:	f7ff ff78 	bl	800a794 <__sfp_lock_release>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	e7ee      	b.n	800a888 <__sfp+0x60>
 800a8aa:	bf00      	nop
 800a8ac:	0800ba50 	.word	0x0800ba50
 800a8b0:	ffff0001 	.word	0xffff0001

0800a8b4 <_fwalk_reent>:
 800a8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	4688      	mov	r8, r1
 800a8bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8c0:	2700      	movs	r7, #0
 800a8c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8c6:	f1b9 0901 	subs.w	r9, r9, #1
 800a8ca:	d505      	bpl.n	800a8d8 <_fwalk_reent+0x24>
 800a8cc:	6824      	ldr	r4, [r4, #0]
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	d1f7      	bne.n	800a8c2 <_fwalk_reent+0xe>
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d8:	89ab      	ldrh	r3, [r5, #12]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d907      	bls.n	800a8ee <_fwalk_reent+0x3a>
 800a8de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	d003      	beq.n	800a8ee <_fwalk_reent+0x3a>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	47c0      	blx	r8
 800a8ec:	4307      	orrs	r7, r0
 800a8ee:	3568      	adds	r5, #104	; 0x68
 800a8f0:	e7e9      	b.n	800a8c6 <_fwalk_reent+0x12>
	...

0800a8f4 <_localeconv_r>:
 800a8f4:	4800      	ldr	r0, [pc, #0]	; (800a8f8 <_localeconv_r+0x4>)
 800a8f6:	4770      	bx	lr
 800a8f8:	24000170 	.word	0x24000170

0800a8fc <__retarget_lock_init_recursive>:
 800a8fc:	4770      	bx	lr

0800a8fe <__retarget_lock_acquire_recursive>:
 800a8fe:	4770      	bx	lr

0800a900 <__retarget_lock_release_recursive>:
 800a900:	4770      	bx	lr

0800a902 <__swhatbuf_r>:
 800a902:	b570      	push	{r4, r5, r6, lr}
 800a904:	460e      	mov	r6, r1
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	2900      	cmp	r1, #0
 800a90c:	b096      	sub	sp, #88	; 0x58
 800a90e:	4614      	mov	r4, r2
 800a910:	461d      	mov	r5, r3
 800a912:	da08      	bge.n	800a926 <__swhatbuf_r+0x24>
 800a914:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	602a      	str	r2, [r5, #0]
 800a91c:	061a      	lsls	r2, r3, #24
 800a91e:	d410      	bmi.n	800a942 <__swhatbuf_r+0x40>
 800a920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a924:	e00e      	b.n	800a944 <__swhatbuf_r+0x42>
 800a926:	466a      	mov	r2, sp
 800a928:	f000 ff3e 	bl	800b7a8 <_fstat_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	dbf1      	blt.n	800a914 <__swhatbuf_r+0x12>
 800a930:	9a01      	ldr	r2, [sp, #4]
 800a932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a93a:	425a      	negs	r2, r3
 800a93c:	415a      	adcs	r2, r3
 800a93e:	602a      	str	r2, [r5, #0]
 800a940:	e7ee      	b.n	800a920 <__swhatbuf_r+0x1e>
 800a942:	2340      	movs	r3, #64	; 0x40
 800a944:	2000      	movs	r0, #0
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	b016      	add	sp, #88	; 0x58
 800a94a:	bd70      	pop	{r4, r5, r6, pc}

0800a94c <__smakebuf_r>:
 800a94c:	898b      	ldrh	r3, [r1, #12]
 800a94e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a950:	079d      	lsls	r5, r3, #30
 800a952:	4606      	mov	r6, r0
 800a954:	460c      	mov	r4, r1
 800a956:	d507      	bpl.n	800a968 <__smakebuf_r+0x1c>
 800a958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	2301      	movs	r3, #1
 800a962:	6163      	str	r3, [r4, #20]
 800a964:	b002      	add	sp, #8
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	ab01      	add	r3, sp, #4
 800a96a:	466a      	mov	r2, sp
 800a96c:	f7ff ffc9 	bl	800a902 <__swhatbuf_r>
 800a970:	9900      	ldr	r1, [sp, #0]
 800a972:	4605      	mov	r5, r0
 800a974:	4630      	mov	r0, r6
 800a976:	f000 fc5f 	bl	800b238 <_malloc_r>
 800a97a:	b948      	cbnz	r0, 800a990 <__smakebuf_r+0x44>
 800a97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a980:	059a      	lsls	r2, r3, #22
 800a982:	d4ef      	bmi.n	800a964 <__smakebuf_r+0x18>
 800a984:	f023 0303 	bic.w	r3, r3, #3
 800a988:	f043 0302 	orr.w	r3, r3, #2
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	e7e3      	b.n	800a958 <__smakebuf_r+0xc>
 800a990:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <__smakebuf_r+0x7c>)
 800a992:	62b3      	str	r3, [r6, #40]	; 0x28
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	6020      	str	r0, [r4, #0]
 800a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	6163      	str	r3, [r4, #20]
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	6120      	str	r0, [r4, #16]
 800a9a6:	b15b      	cbz	r3, 800a9c0 <__smakebuf_r+0x74>
 800a9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 ff0d 	bl	800b7cc <_isatty_r>
 800a9b2:	b128      	cbz	r0, 800a9c0 <__smakebuf_r+0x74>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	89a0      	ldrh	r0, [r4, #12]
 800a9c2:	4305      	orrs	r5, r0
 800a9c4:	81a5      	strh	r5, [r4, #12]
 800a9c6:	e7cd      	b.n	800a964 <__smakebuf_r+0x18>
 800a9c8:	0800a751 	.word	0x0800a751

0800a9cc <malloc>:
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <malloc+0xc>)
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f000 bc31 	b.w	800b238 <_malloc_r>
 800a9d6:	bf00      	nop
 800a9d8:	2400001c 	.word	0x2400001c

0800a9dc <memcpy>:
 800a9dc:	440a      	add	r2, r1
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9e4:	d100      	bne.n	800a9e8 <memcpy+0xc>
 800a9e6:	4770      	bx	lr
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f2:	4291      	cmp	r1, r2
 800a9f4:	d1f9      	bne.n	800a9ea <memcpy+0xe>
 800a9f6:	bd10      	pop	{r4, pc}

0800a9f8 <memmove>:
 800a9f8:	4288      	cmp	r0, r1
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	eb01 0402 	add.w	r4, r1, r2
 800aa00:	d902      	bls.n	800aa08 <memmove+0x10>
 800aa02:	4284      	cmp	r4, r0
 800aa04:	4623      	mov	r3, r4
 800aa06:	d807      	bhi.n	800aa18 <memmove+0x20>
 800aa08:	1e43      	subs	r3, r0, #1
 800aa0a:	42a1      	cmp	r1, r4
 800aa0c:	d008      	beq.n	800aa20 <memmove+0x28>
 800aa0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa16:	e7f8      	b.n	800aa0a <memmove+0x12>
 800aa18:	4402      	add	r2, r0
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	428a      	cmp	r2, r1
 800aa1e:	d100      	bne.n	800aa22 <memmove+0x2a>
 800aa20:	bd10      	pop	{r4, pc}
 800aa22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa2a:	e7f7      	b.n	800aa1c <memmove+0x24>

0800aa2c <_Balloc>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa30:	4604      	mov	r4, r0
 800aa32:	460d      	mov	r5, r1
 800aa34:	b976      	cbnz	r6, 800aa54 <_Balloc+0x28>
 800aa36:	2010      	movs	r0, #16
 800aa38:	f7ff ffc8 	bl	800a9cc <malloc>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa40:	b920      	cbnz	r0, 800aa4c <_Balloc+0x20>
 800aa42:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <_Balloc+0x78>)
 800aa44:	4818      	ldr	r0, [pc, #96]	; (800aaa8 <_Balloc+0x7c>)
 800aa46:	2166      	movs	r1, #102	; 0x66
 800aa48:	f7fe f882 	bl	8008b50 <__assert_func>
 800aa4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa50:	6006      	str	r6, [r0, #0]
 800aa52:	60c6      	str	r6, [r0, #12]
 800aa54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa56:	68f3      	ldr	r3, [r6, #12]
 800aa58:	b183      	cbz	r3, 800aa7c <_Balloc+0x50>
 800aa5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa62:	b9b8      	cbnz	r0, 800aa94 <_Balloc+0x68>
 800aa64:	2101      	movs	r1, #1
 800aa66:	fa01 f605 	lsl.w	r6, r1, r5
 800aa6a:	1d72      	adds	r2, r6, #5
 800aa6c:	0092      	lsls	r2, r2, #2
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fb60 	bl	800b134 <_calloc_r>
 800aa74:	b160      	cbz	r0, 800aa90 <_Balloc+0x64>
 800aa76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa7a:	e00e      	b.n	800aa9a <_Balloc+0x6e>
 800aa7c:	2221      	movs	r2, #33	; 0x21
 800aa7e:	2104      	movs	r1, #4
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fb57 	bl	800b134 <_calloc_r>
 800aa86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa88:	60f0      	str	r0, [r6, #12]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e4      	bne.n	800aa5a <_Balloc+0x2e>
 800aa90:	2000      	movs	r0, #0
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	6802      	ldr	r2, [r0, #0]
 800aa96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaa0:	e7f7      	b.n	800aa92 <_Balloc+0x66>
 800aaa2:	bf00      	nop
 800aaa4:	0800baa6 	.word	0x0800baa6
 800aaa8:	0800bb8c 	.word	0x0800bb8c

0800aaac <_Bfree>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aab0:	4605      	mov	r5, r0
 800aab2:	460c      	mov	r4, r1
 800aab4:	b976      	cbnz	r6, 800aad4 <_Bfree+0x28>
 800aab6:	2010      	movs	r0, #16
 800aab8:	f7ff ff88 	bl	800a9cc <malloc>
 800aabc:	4602      	mov	r2, r0
 800aabe:	6268      	str	r0, [r5, #36]	; 0x24
 800aac0:	b920      	cbnz	r0, 800aacc <_Bfree+0x20>
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <_Bfree+0x3c>)
 800aac4:	4809      	ldr	r0, [pc, #36]	; (800aaec <_Bfree+0x40>)
 800aac6:	218a      	movs	r1, #138	; 0x8a
 800aac8:	f7fe f842 	bl	8008b50 <__assert_func>
 800aacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aad0:	6006      	str	r6, [r0, #0]
 800aad2:	60c6      	str	r6, [r0, #12]
 800aad4:	b13c      	cbz	r4, 800aae6 <_Bfree+0x3a>
 800aad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aad8:	6862      	ldr	r2, [r4, #4]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aae0:	6021      	str	r1, [r4, #0]
 800aae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	0800baa6 	.word	0x0800baa6
 800aaec:	0800bb8c 	.word	0x0800bb8c

0800aaf0 <__multadd>:
 800aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	690d      	ldr	r5, [r1, #16]
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	461e      	mov	r6, r3
 800aafc:	f101 0c14 	add.w	ip, r1, #20
 800ab00:	2000      	movs	r0, #0
 800ab02:	f8dc 3000 	ldr.w	r3, [ip]
 800ab06:	b299      	uxth	r1, r3
 800ab08:	fb02 6101 	mla	r1, r2, r1, r6
 800ab0c:	0c1e      	lsrs	r6, r3, #16
 800ab0e:	0c0b      	lsrs	r3, r1, #16
 800ab10:	fb02 3306 	mla	r3, r2, r6, r3
 800ab14:	b289      	uxth	r1, r1
 800ab16:	3001      	adds	r0, #1
 800ab18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab1c:	4285      	cmp	r5, r0
 800ab1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab26:	dcec      	bgt.n	800ab02 <__multadd+0x12>
 800ab28:	b30e      	cbz	r6, 800ab6e <__multadd+0x7e>
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dc19      	bgt.n	800ab64 <__multadd+0x74>
 800ab30:	6861      	ldr	r1, [r4, #4]
 800ab32:	4638      	mov	r0, r7
 800ab34:	3101      	adds	r1, #1
 800ab36:	f7ff ff79 	bl	800aa2c <_Balloc>
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	b928      	cbnz	r0, 800ab4a <__multadd+0x5a>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <__multadd+0x84>)
 800ab42:	480d      	ldr	r0, [pc, #52]	; (800ab78 <__multadd+0x88>)
 800ab44:	21b5      	movs	r1, #181	; 0xb5
 800ab46:	f7fe f803 	bl	8008b50 <__assert_func>
 800ab4a:	6922      	ldr	r2, [r4, #16]
 800ab4c:	3202      	adds	r2, #2
 800ab4e:	f104 010c 	add.w	r1, r4, #12
 800ab52:	0092      	lsls	r2, r2, #2
 800ab54:	300c      	adds	r0, #12
 800ab56:	f7ff ff41 	bl	800a9dc <memcpy>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7ff ffa5 	bl	800aaac <_Bfree>
 800ab62:	4644      	mov	r4, r8
 800ab64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab68:	3501      	adds	r5, #1
 800ab6a:	615e      	str	r6, [r3, #20]
 800ab6c:	6125      	str	r5, [r4, #16]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab74:	0800bb18 	.word	0x0800bb18
 800ab78:	0800bb8c 	.word	0x0800bb8c

0800ab7c <__hi0bits>:
 800ab7c:	0c03      	lsrs	r3, r0, #16
 800ab7e:	041b      	lsls	r3, r3, #16
 800ab80:	b9d3      	cbnz	r3, 800abb8 <__hi0bits+0x3c>
 800ab82:	0400      	lsls	r0, r0, #16
 800ab84:	2310      	movs	r3, #16
 800ab86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab8a:	bf04      	itt	eq
 800ab8c:	0200      	lsleq	r0, r0, #8
 800ab8e:	3308      	addeq	r3, #8
 800ab90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab94:	bf04      	itt	eq
 800ab96:	0100      	lsleq	r0, r0, #4
 800ab98:	3304      	addeq	r3, #4
 800ab9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab9e:	bf04      	itt	eq
 800aba0:	0080      	lsleq	r0, r0, #2
 800aba2:	3302      	addeq	r3, #2
 800aba4:	2800      	cmp	r0, #0
 800aba6:	db05      	blt.n	800abb4 <__hi0bits+0x38>
 800aba8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abac:	f103 0301 	add.w	r3, r3, #1
 800abb0:	bf08      	it	eq
 800abb2:	2320      	moveq	r3, #32
 800abb4:	4618      	mov	r0, r3
 800abb6:	4770      	bx	lr
 800abb8:	2300      	movs	r3, #0
 800abba:	e7e4      	b.n	800ab86 <__hi0bits+0xa>

0800abbc <__lo0bits>:
 800abbc:	6803      	ldr	r3, [r0, #0]
 800abbe:	f013 0207 	ands.w	r2, r3, #7
 800abc2:	4601      	mov	r1, r0
 800abc4:	d00b      	beq.n	800abde <__lo0bits+0x22>
 800abc6:	07da      	lsls	r2, r3, #31
 800abc8:	d423      	bmi.n	800ac12 <__lo0bits+0x56>
 800abca:	0798      	lsls	r0, r3, #30
 800abcc:	bf49      	itett	mi
 800abce:	085b      	lsrmi	r3, r3, #1
 800abd0:	089b      	lsrpl	r3, r3, #2
 800abd2:	2001      	movmi	r0, #1
 800abd4:	600b      	strmi	r3, [r1, #0]
 800abd6:	bf5c      	itt	pl
 800abd8:	600b      	strpl	r3, [r1, #0]
 800abda:	2002      	movpl	r0, #2
 800abdc:	4770      	bx	lr
 800abde:	b298      	uxth	r0, r3
 800abe0:	b9a8      	cbnz	r0, 800ac0e <__lo0bits+0x52>
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	2010      	movs	r0, #16
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	b90a      	cbnz	r2, 800abee <__lo0bits+0x32>
 800abea:	3008      	adds	r0, #8
 800abec:	0a1b      	lsrs	r3, r3, #8
 800abee:	071a      	lsls	r2, r3, #28
 800abf0:	bf04      	itt	eq
 800abf2:	091b      	lsreq	r3, r3, #4
 800abf4:	3004      	addeq	r0, #4
 800abf6:	079a      	lsls	r2, r3, #30
 800abf8:	bf04      	itt	eq
 800abfa:	089b      	lsreq	r3, r3, #2
 800abfc:	3002      	addeq	r0, #2
 800abfe:	07da      	lsls	r2, r3, #31
 800ac00:	d403      	bmi.n	800ac0a <__lo0bits+0x4e>
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	f100 0001 	add.w	r0, r0, #1
 800ac08:	d005      	beq.n	800ac16 <__lo0bits+0x5a>
 800ac0a:	600b      	str	r3, [r1, #0]
 800ac0c:	4770      	bx	lr
 800ac0e:	4610      	mov	r0, r2
 800ac10:	e7e9      	b.n	800abe6 <__lo0bits+0x2a>
 800ac12:	2000      	movs	r0, #0
 800ac14:	4770      	bx	lr
 800ac16:	2020      	movs	r0, #32
 800ac18:	4770      	bx	lr
	...

0800ac1c <__i2b>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	2101      	movs	r1, #1
 800ac22:	f7ff ff03 	bl	800aa2c <_Balloc>
 800ac26:	4602      	mov	r2, r0
 800ac28:	b928      	cbnz	r0, 800ac36 <__i2b+0x1a>
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <__i2b+0x24>)
 800ac2c:	4805      	ldr	r0, [pc, #20]	; (800ac44 <__i2b+0x28>)
 800ac2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac32:	f7fd ff8d 	bl	8008b50 <__assert_func>
 800ac36:	2301      	movs	r3, #1
 800ac38:	6144      	str	r4, [r0, #20]
 800ac3a:	6103      	str	r3, [r0, #16]
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	bf00      	nop
 800ac40:	0800bb18 	.word	0x0800bb18
 800ac44:	0800bb8c 	.word	0x0800bb8c

0800ac48 <__multiply>:
 800ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	4691      	mov	r9, r2
 800ac4e:	690a      	ldr	r2, [r1, #16]
 800ac50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	bfb8      	it	lt
 800ac58:	460b      	movlt	r3, r1
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	bfbc      	itt	lt
 800ac5e:	464c      	movlt	r4, r9
 800ac60:	4699      	movlt	r9, r3
 800ac62:	6927      	ldr	r7, [r4, #16]
 800ac64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac68:	68a3      	ldr	r3, [r4, #8]
 800ac6a:	6861      	ldr	r1, [r4, #4]
 800ac6c:	eb07 060a 	add.w	r6, r7, sl
 800ac70:	42b3      	cmp	r3, r6
 800ac72:	b085      	sub	sp, #20
 800ac74:	bfb8      	it	lt
 800ac76:	3101      	addlt	r1, #1
 800ac78:	f7ff fed8 	bl	800aa2c <_Balloc>
 800ac7c:	b930      	cbnz	r0, 800ac8c <__multiply+0x44>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b44      	ldr	r3, [pc, #272]	; (800ad94 <__multiply+0x14c>)
 800ac82:	4845      	ldr	r0, [pc, #276]	; (800ad98 <__multiply+0x150>)
 800ac84:	f240 115d 	movw	r1, #349	; 0x15d
 800ac88:	f7fd ff62 	bl	8008b50 <__assert_func>
 800ac8c:	f100 0514 	add.w	r5, r0, #20
 800ac90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac94:	462b      	mov	r3, r5
 800ac96:	2200      	movs	r2, #0
 800ac98:	4543      	cmp	r3, r8
 800ac9a:	d321      	bcc.n	800ace0 <__multiply+0x98>
 800ac9c:	f104 0314 	add.w	r3, r4, #20
 800aca0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aca4:	f109 0314 	add.w	r3, r9, #20
 800aca8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acac:	9202      	str	r2, [sp, #8]
 800acae:	1b3a      	subs	r2, r7, r4
 800acb0:	3a15      	subs	r2, #21
 800acb2:	f022 0203 	bic.w	r2, r2, #3
 800acb6:	3204      	adds	r2, #4
 800acb8:	f104 0115 	add.w	r1, r4, #21
 800acbc:	428f      	cmp	r7, r1
 800acbe:	bf38      	it	cc
 800acc0:	2204      	movcc	r2, #4
 800acc2:	9201      	str	r2, [sp, #4]
 800acc4:	9a02      	ldr	r2, [sp, #8]
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d80c      	bhi.n	800ace6 <__multiply+0x9e>
 800accc:	2e00      	cmp	r6, #0
 800acce:	dd03      	ble.n	800acd8 <__multiply+0x90>
 800acd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d05a      	beq.n	800ad8e <__multiply+0x146>
 800acd8:	6106      	str	r6, [r0, #16]
 800acda:	b005      	add	sp, #20
 800acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace0:	f843 2b04 	str.w	r2, [r3], #4
 800ace4:	e7d8      	b.n	800ac98 <__multiply+0x50>
 800ace6:	f8b3 a000 	ldrh.w	sl, [r3]
 800acea:	f1ba 0f00 	cmp.w	sl, #0
 800acee:	d024      	beq.n	800ad3a <__multiply+0xf2>
 800acf0:	f104 0e14 	add.w	lr, r4, #20
 800acf4:	46a9      	mov	r9, r5
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acfe:	f8d9 1000 	ldr.w	r1, [r9]
 800ad02:	fa1f fb82 	uxth.w	fp, r2
 800ad06:	b289      	uxth	r1, r1
 800ad08:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad10:	f8d9 2000 	ldr.w	r2, [r9]
 800ad14:	4461      	add	r1, ip
 800ad16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad22:	b289      	uxth	r1, r1
 800ad24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad28:	4577      	cmp	r7, lr
 800ad2a:	f849 1b04 	str.w	r1, [r9], #4
 800ad2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad32:	d8e2      	bhi.n	800acfa <__multiply+0xb2>
 800ad34:	9a01      	ldr	r2, [sp, #4]
 800ad36:	f845 c002 	str.w	ip, [r5, r2]
 800ad3a:	9a03      	ldr	r2, [sp, #12]
 800ad3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad40:	3304      	adds	r3, #4
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	d020      	beq.n	800ad8a <__multiply+0x142>
 800ad48:	6829      	ldr	r1, [r5, #0]
 800ad4a:	f104 0c14 	add.w	ip, r4, #20
 800ad4e:	46ae      	mov	lr, r5
 800ad50:	f04f 0a00 	mov.w	sl, #0
 800ad54:	f8bc b000 	ldrh.w	fp, [ip]
 800ad58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ad60:	4492      	add	sl, r2
 800ad62:	b289      	uxth	r1, r1
 800ad64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad68:	f84e 1b04 	str.w	r1, [lr], #4
 800ad6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad70:	f8be 1000 	ldrh.w	r1, [lr]
 800ad74:	0c12      	lsrs	r2, r2, #16
 800ad76:	fb09 1102 	mla	r1, r9, r2, r1
 800ad7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad7e:	4567      	cmp	r7, ip
 800ad80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad84:	d8e6      	bhi.n	800ad54 <__multiply+0x10c>
 800ad86:	9a01      	ldr	r2, [sp, #4]
 800ad88:	50a9      	str	r1, [r5, r2]
 800ad8a:	3504      	adds	r5, #4
 800ad8c:	e79a      	b.n	800acc4 <__multiply+0x7c>
 800ad8e:	3e01      	subs	r6, #1
 800ad90:	e79c      	b.n	800accc <__multiply+0x84>
 800ad92:	bf00      	nop
 800ad94:	0800bb18 	.word	0x0800bb18
 800ad98:	0800bb8c 	.word	0x0800bb8c

0800ad9c <__pow5mult>:
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	4615      	mov	r5, r2
 800ada2:	f012 0203 	ands.w	r2, r2, #3
 800ada6:	4606      	mov	r6, r0
 800ada8:	460f      	mov	r7, r1
 800adaa:	d007      	beq.n	800adbc <__pow5mult+0x20>
 800adac:	4c25      	ldr	r4, [pc, #148]	; (800ae44 <__pow5mult+0xa8>)
 800adae:	3a01      	subs	r2, #1
 800adb0:	2300      	movs	r3, #0
 800adb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adb6:	f7ff fe9b 	bl	800aaf0 <__multadd>
 800adba:	4607      	mov	r7, r0
 800adbc:	10ad      	asrs	r5, r5, #2
 800adbe:	d03d      	beq.n	800ae3c <__pow5mult+0xa0>
 800adc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adc2:	b97c      	cbnz	r4, 800ade4 <__pow5mult+0x48>
 800adc4:	2010      	movs	r0, #16
 800adc6:	f7ff fe01 	bl	800a9cc <malloc>
 800adca:	4602      	mov	r2, r0
 800adcc:	6270      	str	r0, [r6, #36]	; 0x24
 800adce:	b928      	cbnz	r0, 800addc <__pow5mult+0x40>
 800add0:	4b1d      	ldr	r3, [pc, #116]	; (800ae48 <__pow5mult+0xac>)
 800add2:	481e      	ldr	r0, [pc, #120]	; (800ae4c <__pow5mult+0xb0>)
 800add4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800add8:	f7fd feba 	bl	8008b50 <__assert_func>
 800addc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ade0:	6004      	str	r4, [r0, #0]
 800ade2:	60c4      	str	r4, [r0, #12]
 800ade4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ade8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adec:	b94c      	cbnz	r4, 800ae02 <__pow5mult+0x66>
 800adee:	f240 2171 	movw	r1, #625	; 0x271
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff ff12 	bl	800ac1c <__i2b>
 800adf8:	2300      	movs	r3, #0
 800adfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800adfe:	4604      	mov	r4, r0
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	f04f 0900 	mov.w	r9, #0
 800ae06:	07eb      	lsls	r3, r5, #31
 800ae08:	d50a      	bpl.n	800ae20 <__pow5mult+0x84>
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ff1a 	bl	800ac48 <__multiply>
 800ae14:	4639      	mov	r1, r7
 800ae16:	4680      	mov	r8, r0
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff fe47 	bl	800aaac <_Bfree>
 800ae1e:	4647      	mov	r7, r8
 800ae20:	106d      	asrs	r5, r5, #1
 800ae22:	d00b      	beq.n	800ae3c <__pow5mult+0xa0>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	b938      	cbnz	r0, 800ae38 <__pow5mult+0x9c>
 800ae28:	4622      	mov	r2, r4
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff ff0b 	bl	800ac48 <__multiply>
 800ae32:	6020      	str	r0, [r4, #0]
 800ae34:	f8c0 9000 	str.w	r9, [r0]
 800ae38:	4604      	mov	r4, r0
 800ae3a:	e7e4      	b.n	800ae06 <__pow5mult+0x6a>
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae42:	bf00      	nop
 800ae44:	0800bcd8 	.word	0x0800bcd8
 800ae48:	0800baa6 	.word	0x0800baa6
 800ae4c:	0800bb8c 	.word	0x0800bb8c

0800ae50 <__lshift>:
 800ae50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae54:	460c      	mov	r4, r1
 800ae56:	6849      	ldr	r1, [r1, #4]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	4607      	mov	r7, r0
 800ae62:	4691      	mov	r9, r2
 800ae64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae68:	f108 0601 	add.w	r6, r8, #1
 800ae6c:	42b3      	cmp	r3, r6
 800ae6e:	db0b      	blt.n	800ae88 <__lshift+0x38>
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff fddb 	bl	800aa2c <_Balloc>
 800ae76:	4605      	mov	r5, r0
 800ae78:	b948      	cbnz	r0, 800ae8e <__lshift+0x3e>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4b2a      	ldr	r3, [pc, #168]	; (800af28 <__lshift+0xd8>)
 800ae7e:	482b      	ldr	r0, [pc, #172]	; (800af2c <__lshift+0xdc>)
 800ae80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae84:	f7fd fe64 	bl	8008b50 <__assert_func>
 800ae88:	3101      	adds	r1, #1
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	e7ee      	b.n	800ae6c <__lshift+0x1c>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f100 0114 	add.w	r1, r0, #20
 800ae94:	f100 0210 	add.w	r2, r0, #16
 800ae98:	4618      	mov	r0, r3
 800ae9a:	4553      	cmp	r3, sl
 800ae9c:	db37      	blt.n	800af0e <__lshift+0xbe>
 800ae9e:	6920      	ldr	r0, [r4, #16]
 800aea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aea4:	f104 0314 	add.w	r3, r4, #20
 800aea8:	f019 091f 	ands.w	r9, r9, #31
 800aeac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aeb4:	d02f      	beq.n	800af16 <__lshift+0xc6>
 800aeb6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeba:	468a      	mov	sl, r1
 800aebc:	f04f 0c00 	mov.w	ip, #0
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	fa02 f209 	lsl.w	r2, r2, r9
 800aec6:	ea42 020c 	orr.w	r2, r2, ip
 800aeca:	f84a 2b04 	str.w	r2, [sl], #4
 800aece:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed2:	4298      	cmp	r0, r3
 800aed4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aed8:	d8f2      	bhi.n	800aec0 <__lshift+0x70>
 800aeda:	1b03      	subs	r3, r0, r4
 800aedc:	3b15      	subs	r3, #21
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	3304      	adds	r3, #4
 800aee4:	f104 0215 	add.w	r2, r4, #21
 800aee8:	4290      	cmp	r0, r2
 800aeea:	bf38      	it	cc
 800aeec:	2304      	movcc	r3, #4
 800aeee:	f841 c003 	str.w	ip, [r1, r3]
 800aef2:	f1bc 0f00 	cmp.w	ip, #0
 800aef6:	d001      	beq.n	800aefc <__lshift+0xac>
 800aef8:	f108 0602 	add.w	r6, r8, #2
 800aefc:	3e01      	subs	r6, #1
 800aefe:	4638      	mov	r0, r7
 800af00:	612e      	str	r6, [r5, #16]
 800af02:	4621      	mov	r1, r4
 800af04:	f7ff fdd2 	bl	800aaac <_Bfree>
 800af08:	4628      	mov	r0, r5
 800af0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af12:	3301      	adds	r3, #1
 800af14:	e7c1      	b.n	800ae9a <__lshift+0x4a>
 800af16:	3904      	subs	r1, #4
 800af18:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800af20:	4298      	cmp	r0, r3
 800af22:	d8f9      	bhi.n	800af18 <__lshift+0xc8>
 800af24:	e7ea      	b.n	800aefc <__lshift+0xac>
 800af26:	bf00      	nop
 800af28:	0800bb18 	.word	0x0800bb18
 800af2c:	0800bb8c 	.word	0x0800bb8c

0800af30 <__mcmp>:
 800af30:	b530      	push	{r4, r5, lr}
 800af32:	6902      	ldr	r2, [r0, #16]
 800af34:	690c      	ldr	r4, [r1, #16]
 800af36:	1b12      	subs	r2, r2, r4
 800af38:	d10e      	bne.n	800af58 <__mcmp+0x28>
 800af3a:	f100 0314 	add.w	r3, r0, #20
 800af3e:	3114      	adds	r1, #20
 800af40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af50:	42a5      	cmp	r5, r4
 800af52:	d003      	beq.n	800af5c <__mcmp+0x2c>
 800af54:	d305      	bcc.n	800af62 <__mcmp+0x32>
 800af56:	2201      	movs	r2, #1
 800af58:	4610      	mov	r0, r2
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d3f3      	bcc.n	800af48 <__mcmp+0x18>
 800af60:	e7fa      	b.n	800af58 <__mcmp+0x28>
 800af62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af66:	e7f7      	b.n	800af58 <__mcmp+0x28>

0800af68 <__mdiff>:
 800af68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	460c      	mov	r4, r1
 800af6e:	4606      	mov	r6, r0
 800af70:	4611      	mov	r1, r2
 800af72:	4620      	mov	r0, r4
 800af74:	4690      	mov	r8, r2
 800af76:	f7ff ffdb 	bl	800af30 <__mcmp>
 800af7a:	1e05      	subs	r5, r0, #0
 800af7c:	d110      	bne.n	800afa0 <__mdiff+0x38>
 800af7e:	4629      	mov	r1, r5
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff fd53 	bl	800aa2c <_Balloc>
 800af86:	b930      	cbnz	r0, 800af96 <__mdiff+0x2e>
 800af88:	4b3a      	ldr	r3, [pc, #232]	; (800b074 <__mdiff+0x10c>)
 800af8a:	4602      	mov	r2, r0
 800af8c:	f240 2132 	movw	r1, #562	; 0x232
 800af90:	4839      	ldr	r0, [pc, #228]	; (800b078 <__mdiff+0x110>)
 800af92:	f7fd fddd 	bl	8008b50 <__assert_func>
 800af96:	2301      	movs	r3, #1
 800af98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	bfa4      	itt	ge
 800afa2:	4643      	movge	r3, r8
 800afa4:	46a0      	movge	r8, r4
 800afa6:	4630      	mov	r0, r6
 800afa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afac:	bfa6      	itte	ge
 800afae:	461c      	movge	r4, r3
 800afb0:	2500      	movge	r5, #0
 800afb2:	2501      	movlt	r5, #1
 800afb4:	f7ff fd3a 	bl	800aa2c <_Balloc>
 800afb8:	b920      	cbnz	r0, 800afc4 <__mdiff+0x5c>
 800afba:	4b2e      	ldr	r3, [pc, #184]	; (800b074 <__mdiff+0x10c>)
 800afbc:	4602      	mov	r2, r0
 800afbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afc2:	e7e5      	b.n	800af90 <__mdiff+0x28>
 800afc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afc8:	6926      	ldr	r6, [r4, #16]
 800afca:	60c5      	str	r5, [r0, #12]
 800afcc:	f104 0914 	add.w	r9, r4, #20
 800afd0:	f108 0514 	add.w	r5, r8, #20
 800afd4:	f100 0e14 	add.w	lr, r0, #20
 800afd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afe0:	f108 0210 	add.w	r2, r8, #16
 800afe4:	46f2      	mov	sl, lr
 800afe6:	2100      	movs	r1, #0
 800afe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800afec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aff0:	fa1f f883 	uxth.w	r8, r3
 800aff4:	fa11 f18b 	uxtah	r1, r1, fp
 800aff8:	0c1b      	lsrs	r3, r3, #16
 800affa:	eba1 0808 	sub.w	r8, r1, r8
 800affe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b002:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b006:	fa1f f888 	uxth.w	r8, r8
 800b00a:	1419      	asrs	r1, r3, #16
 800b00c:	454e      	cmp	r6, r9
 800b00e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b012:	f84a 3b04 	str.w	r3, [sl], #4
 800b016:	d8e7      	bhi.n	800afe8 <__mdiff+0x80>
 800b018:	1b33      	subs	r3, r6, r4
 800b01a:	3b15      	subs	r3, #21
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	3304      	adds	r3, #4
 800b022:	3415      	adds	r4, #21
 800b024:	42a6      	cmp	r6, r4
 800b026:	bf38      	it	cc
 800b028:	2304      	movcc	r3, #4
 800b02a:	441d      	add	r5, r3
 800b02c:	4473      	add	r3, lr
 800b02e:	469e      	mov	lr, r3
 800b030:	462e      	mov	r6, r5
 800b032:	4566      	cmp	r6, ip
 800b034:	d30e      	bcc.n	800b054 <__mdiff+0xec>
 800b036:	f10c 0203 	add.w	r2, ip, #3
 800b03a:	1b52      	subs	r2, r2, r5
 800b03c:	f022 0203 	bic.w	r2, r2, #3
 800b040:	3d03      	subs	r5, #3
 800b042:	45ac      	cmp	ip, r5
 800b044:	bf38      	it	cc
 800b046:	2200      	movcc	r2, #0
 800b048:	441a      	add	r2, r3
 800b04a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b04e:	b17b      	cbz	r3, 800b070 <__mdiff+0x108>
 800b050:	6107      	str	r7, [r0, #16]
 800b052:	e7a3      	b.n	800af9c <__mdiff+0x34>
 800b054:	f856 8b04 	ldr.w	r8, [r6], #4
 800b058:	fa11 f288 	uxtah	r2, r1, r8
 800b05c:	1414      	asrs	r4, r2, #16
 800b05e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b062:	b292      	uxth	r2, r2
 800b064:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b068:	f84e 2b04 	str.w	r2, [lr], #4
 800b06c:	1421      	asrs	r1, r4, #16
 800b06e:	e7e0      	b.n	800b032 <__mdiff+0xca>
 800b070:	3f01      	subs	r7, #1
 800b072:	e7ea      	b.n	800b04a <__mdiff+0xe2>
 800b074:	0800bb18 	.word	0x0800bb18
 800b078:	0800bb8c 	.word	0x0800bb8c

0800b07c <__d2b>:
 800b07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b080:	4689      	mov	r9, r1
 800b082:	2101      	movs	r1, #1
 800b084:	ec57 6b10 	vmov	r6, r7, d0
 800b088:	4690      	mov	r8, r2
 800b08a:	f7ff fccf 	bl	800aa2c <_Balloc>
 800b08e:	4604      	mov	r4, r0
 800b090:	b930      	cbnz	r0, 800b0a0 <__d2b+0x24>
 800b092:	4602      	mov	r2, r0
 800b094:	4b25      	ldr	r3, [pc, #148]	; (800b12c <__d2b+0xb0>)
 800b096:	4826      	ldr	r0, [pc, #152]	; (800b130 <__d2b+0xb4>)
 800b098:	f240 310a 	movw	r1, #778	; 0x30a
 800b09c:	f7fd fd58 	bl	8008b50 <__assert_func>
 800b0a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0a8:	bb35      	cbnz	r5, 800b0f8 <__d2b+0x7c>
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	d028      	beq.n	800b102 <__d2b+0x86>
 800b0b0:	4668      	mov	r0, sp
 800b0b2:	9600      	str	r6, [sp, #0]
 800b0b4:	f7ff fd82 	bl	800abbc <__lo0bits>
 800b0b8:	9900      	ldr	r1, [sp, #0]
 800b0ba:	b300      	cbz	r0, 800b0fe <__d2b+0x82>
 800b0bc:	9a01      	ldr	r2, [sp, #4]
 800b0be:	f1c0 0320 	rsb	r3, r0, #32
 800b0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	40c2      	lsrs	r2, r0
 800b0ca:	6163      	str	r3, [r4, #20]
 800b0cc:	9201      	str	r2, [sp, #4]
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	61a3      	str	r3, [r4, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bf14      	ite	ne
 800b0d6:	2202      	movne	r2, #2
 800b0d8:	2201      	moveq	r2, #1
 800b0da:	6122      	str	r2, [r4, #16]
 800b0dc:	b1d5      	cbz	r5, 800b114 <__d2b+0x98>
 800b0de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0e2:	4405      	add	r5, r0
 800b0e4:	f8c9 5000 	str.w	r5, [r9]
 800b0e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0ec:	f8c8 0000 	str.w	r0, [r8]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	b003      	add	sp, #12
 800b0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0fc:	e7d5      	b.n	800b0aa <__d2b+0x2e>
 800b0fe:	6161      	str	r1, [r4, #20]
 800b100:	e7e5      	b.n	800b0ce <__d2b+0x52>
 800b102:	a801      	add	r0, sp, #4
 800b104:	f7ff fd5a 	bl	800abbc <__lo0bits>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	6163      	str	r3, [r4, #20]
 800b10c:	2201      	movs	r2, #1
 800b10e:	6122      	str	r2, [r4, #16]
 800b110:	3020      	adds	r0, #32
 800b112:	e7e3      	b.n	800b0dc <__d2b+0x60>
 800b114:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b118:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b11c:	f8c9 0000 	str.w	r0, [r9]
 800b120:	6918      	ldr	r0, [r3, #16]
 800b122:	f7ff fd2b 	bl	800ab7c <__hi0bits>
 800b126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b12a:	e7df      	b.n	800b0ec <__d2b+0x70>
 800b12c:	0800bb18 	.word	0x0800bb18
 800b130:	0800bb8c 	.word	0x0800bb8c

0800b134 <_calloc_r>:
 800b134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b136:	fba1 2402 	umull	r2, r4, r1, r2
 800b13a:	b94c      	cbnz	r4, 800b150 <_calloc_r+0x1c>
 800b13c:	4611      	mov	r1, r2
 800b13e:	9201      	str	r2, [sp, #4]
 800b140:	f000 f87a 	bl	800b238 <_malloc_r>
 800b144:	9a01      	ldr	r2, [sp, #4]
 800b146:	4605      	mov	r5, r0
 800b148:	b930      	cbnz	r0, 800b158 <_calloc_r+0x24>
 800b14a:	4628      	mov	r0, r5
 800b14c:	b003      	add	sp, #12
 800b14e:	bd30      	pop	{r4, r5, pc}
 800b150:	220c      	movs	r2, #12
 800b152:	6002      	str	r2, [r0, #0]
 800b154:	2500      	movs	r5, #0
 800b156:	e7f8      	b.n	800b14a <_calloc_r+0x16>
 800b158:	4621      	mov	r1, r4
 800b15a:	f7fd fd53 	bl	8008c04 <memset>
 800b15e:	e7f4      	b.n	800b14a <_calloc_r+0x16>

0800b160 <_free_r>:
 800b160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b162:	2900      	cmp	r1, #0
 800b164:	d044      	beq.n	800b1f0 <_free_r+0x90>
 800b166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b16a:	9001      	str	r0, [sp, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f1a1 0404 	sub.w	r4, r1, #4
 800b172:	bfb8      	it	lt
 800b174:	18e4      	addlt	r4, r4, r3
 800b176:	f000 fb5d 	bl	800b834 <__malloc_lock>
 800b17a:	4a1e      	ldr	r2, [pc, #120]	; (800b1f4 <_free_r+0x94>)
 800b17c:	9801      	ldr	r0, [sp, #4]
 800b17e:	6813      	ldr	r3, [r2, #0]
 800b180:	b933      	cbnz	r3, 800b190 <_free_r+0x30>
 800b182:	6063      	str	r3, [r4, #4]
 800b184:	6014      	str	r4, [r2, #0]
 800b186:	b003      	add	sp, #12
 800b188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b18c:	f000 bb58 	b.w	800b840 <__malloc_unlock>
 800b190:	42a3      	cmp	r3, r4
 800b192:	d908      	bls.n	800b1a6 <_free_r+0x46>
 800b194:	6825      	ldr	r5, [r4, #0]
 800b196:	1961      	adds	r1, r4, r5
 800b198:	428b      	cmp	r3, r1
 800b19a:	bf01      	itttt	eq
 800b19c:	6819      	ldreq	r1, [r3, #0]
 800b19e:	685b      	ldreq	r3, [r3, #4]
 800b1a0:	1949      	addeq	r1, r1, r5
 800b1a2:	6021      	streq	r1, [r4, #0]
 800b1a4:	e7ed      	b.n	800b182 <_free_r+0x22>
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	b10b      	cbz	r3, 800b1b0 <_free_r+0x50>
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	d9fa      	bls.n	800b1a6 <_free_r+0x46>
 800b1b0:	6811      	ldr	r1, [r2, #0]
 800b1b2:	1855      	adds	r5, r2, r1
 800b1b4:	42a5      	cmp	r5, r4
 800b1b6:	d10b      	bne.n	800b1d0 <_free_r+0x70>
 800b1b8:	6824      	ldr	r4, [r4, #0]
 800b1ba:	4421      	add	r1, r4
 800b1bc:	1854      	adds	r4, r2, r1
 800b1be:	42a3      	cmp	r3, r4
 800b1c0:	6011      	str	r1, [r2, #0]
 800b1c2:	d1e0      	bne.n	800b186 <_free_r+0x26>
 800b1c4:	681c      	ldr	r4, [r3, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	6053      	str	r3, [r2, #4]
 800b1ca:	4421      	add	r1, r4
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	e7da      	b.n	800b186 <_free_r+0x26>
 800b1d0:	d902      	bls.n	800b1d8 <_free_r+0x78>
 800b1d2:	230c      	movs	r3, #12
 800b1d4:	6003      	str	r3, [r0, #0]
 800b1d6:	e7d6      	b.n	800b186 <_free_r+0x26>
 800b1d8:	6825      	ldr	r5, [r4, #0]
 800b1da:	1961      	adds	r1, r4, r5
 800b1dc:	428b      	cmp	r3, r1
 800b1de:	bf04      	itt	eq
 800b1e0:	6819      	ldreq	r1, [r3, #0]
 800b1e2:	685b      	ldreq	r3, [r3, #4]
 800b1e4:	6063      	str	r3, [r4, #4]
 800b1e6:	bf04      	itt	eq
 800b1e8:	1949      	addeq	r1, r1, r5
 800b1ea:	6021      	streq	r1, [r4, #0]
 800b1ec:	6054      	str	r4, [r2, #4]
 800b1ee:	e7ca      	b.n	800b186 <_free_r+0x26>
 800b1f0:	b003      	add	sp, #12
 800b1f2:	bd30      	pop	{r4, r5, pc}
 800b1f4:	24000508 	.word	0x24000508

0800b1f8 <sbrk_aligned>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	4e0e      	ldr	r6, [pc, #56]	; (800b234 <sbrk_aligned+0x3c>)
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	6831      	ldr	r1, [r6, #0]
 800b200:	4605      	mov	r5, r0
 800b202:	b911      	cbnz	r1, 800b20a <sbrk_aligned+0x12>
 800b204:	f000 fa16 	bl	800b634 <_sbrk_r>
 800b208:	6030      	str	r0, [r6, #0]
 800b20a:	4621      	mov	r1, r4
 800b20c:	4628      	mov	r0, r5
 800b20e:	f000 fa11 	bl	800b634 <_sbrk_r>
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	d00a      	beq.n	800b22c <sbrk_aligned+0x34>
 800b216:	1cc4      	adds	r4, r0, #3
 800b218:	f024 0403 	bic.w	r4, r4, #3
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	d007      	beq.n	800b230 <sbrk_aligned+0x38>
 800b220:	1a21      	subs	r1, r4, r0
 800b222:	4628      	mov	r0, r5
 800b224:	f000 fa06 	bl	800b634 <_sbrk_r>
 800b228:	3001      	adds	r0, #1
 800b22a:	d101      	bne.n	800b230 <sbrk_aligned+0x38>
 800b22c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b230:	4620      	mov	r0, r4
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	2400050c 	.word	0x2400050c

0800b238 <_malloc_r>:
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	1ccd      	adds	r5, r1, #3
 800b23e:	f025 0503 	bic.w	r5, r5, #3
 800b242:	3508      	adds	r5, #8
 800b244:	2d0c      	cmp	r5, #12
 800b246:	bf38      	it	cc
 800b248:	250c      	movcc	r5, #12
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	4607      	mov	r7, r0
 800b24e:	db01      	blt.n	800b254 <_malloc_r+0x1c>
 800b250:	42a9      	cmp	r1, r5
 800b252:	d905      	bls.n	800b260 <_malloc_r+0x28>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	2600      	movs	r6, #0
 800b25a:	4630      	mov	r0, r6
 800b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b260:	4e2e      	ldr	r6, [pc, #184]	; (800b31c <_malloc_r+0xe4>)
 800b262:	f000 fae7 	bl	800b834 <__malloc_lock>
 800b266:	6833      	ldr	r3, [r6, #0]
 800b268:	461c      	mov	r4, r3
 800b26a:	bb34      	cbnz	r4, 800b2ba <_malloc_r+0x82>
 800b26c:	4629      	mov	r1, r5
 800b26e:	4638      	mov	r0, r7
 800b270:	f7ff ffc2 	bl	800b1f8 <sbrk_aligned>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	4604      	mov	r4, r0
 800b278:	d14d      	bne.n	800b316 <_malloc_r+0xde>
 800b27a:	6834      	ldr	r4, [r6, #0]
 800b27c:	4626      	mov	r6, r4
 800b27e:	2e00      	cmp	r6, #0
 800b280:	d140      	bne.n	800b304 <_malloc_r+0xcc>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	4631      	mov	r1, r6
 800b286:	4638      	mov	r0, r7
 800b288:	eb04 0803 	add.w	r8, r4, r3
 800b28c:	f000 f9d2 	bl	800b634 <_sbrk_r>
 800b290:	4580      	cmp	r8, r0
 800b292:	d13a      	bne.n	800b30a <_malloc_r+0xd2>
 800b294:	6821      	ldr	r1, [r4, #0]
 800b296:	3503      	adds	r5, #3
 800b298:	1a6d      	subs	r5, r5, r1
 800b29a:	f025 0503 	bic.w	r5, r5, #3
 800b29e:	3508      	adds	r5, #8
 800b2a0:	2d0c      	cmp	r5, #12
 800b2a2:	bf38      	it	cc
 800b2a4:	250c      	movcc	r5, #12
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff ffa5 	bl	800b1f8 <sbrk_aligned>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d02b      	beq.n	800b30a <_malloc_r+0xd2>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	442b      	add	r3, r5
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	e00e      	b.n	800b2d8 <_malloc_r+0xa0>
 800b2ba:	6822      	ldr	r2, [r4, #0]
 800b2bc:	1b52      	subs	r2, r2, r5
 800b2be:	d41e      	bmi.n	800b2fe <_malloc_r+0xc6>
 800b2c0:	2a0b      	cmp	r2, #11
 800b2c2:	d916      	bls.n	800b2f2 <_malloc_r+0xba>
 800b2c4:	1961      	adds	r1, r4, r5
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	6025      	str	r5, [r4, #0]
 800b2ca:	bf18      	it	ne
 800b2cc:	6059      	strne	r1, [r3, #4]
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	bf08      	it	eq
 800b2d2:	6031      	streq	r1, [r6, #0]
 800b2d4:	5162      	str	r2, [r4, r5]
 800b2d6:	604b      	str	r3, [r1, #4]
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f104 060b 	add.w	r6, r4, #11
 800b2de:	f000 faaf 	bl	800b840 <__malloc_unlock>
 800b2e2:	f026 0607 	bic.w	r6, r6, #7
 800b2e6:	1d23      	adds	r3, r4, #4
 800b2e8:	1af2      	subs	r2, r6, r3
 800b2ea:	d0b6      	beq.n	800b25a <_malloc_r+0x22>
 800b2ec:	1b9b      	subs	r3, r3, r6
 800b2ee:	50a3      	str	r3, [r4, r2]
 800b2f0:	e7b3      	b.n	800b25a <_malloc_r+0x22>
 800b2f2:	6862      	ldr	r2, [r4, #4]
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	bf0c      	ite	eq
 800b2f8:	6032      	streq	r2, [r6, #0]
 800b2fa:	605a      	strne	r2, [r3, #4]
 800b2fc:	e7ec      	b.n	800b2d8 <_malloc_r+0xa0>
 800b2fe:	4623      	mov	r3, r4
 800b300:	6864      	ldr	r4, [r4, #4]
 800b302:	e7b2      	b.n	800b26a <_malloc_r+0x32>
 800b304:	4634      	mov	r4, r6
 800b306:	6876      	ldr	r6, [r6, #4]
 800b308:	e7b9      	b.n	800b27e <_malloc_r+0x46>
 800b30a:	230c      	movs	r3, #12
 800b30c:	603b      	str	r3, [r7, #0]
 800b30e:	4638      	mov	r0, r7
 800b310:	f000 fa96 	bl	800b840 <__malloc_unlock>
 800b314:	e7a1      	b.n	800b25a <_malloc_r+0x22>
 800b316:	6025      	str	r5, [r4, #0]
 800b318:	e7de      	b.n	800b2d8 <_malloc_r+0xa0>
 800b31a:	bf00      	nop
 800b31c:	24000508 	.word	0x24000508

0800b320 <_realloc_r>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	4680      	mov	r8, r0
 800b326:	4614      	mov	r4, r2
 800b328:	460e      	mov	r6, r1
 800b32a:	b921      	cbnz	r1, 800b336 <_realloc_r+0x16>
 800b32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b330:	4611      	mov	r1, r2
 800b332:	f7ff bf81 	b.w	800b238 <_malloc_r>
 800b336:	b92a      	cbnz	r2, 800b344 <_realloc_r+0x24>
 800b338:	f7ff ff12 	bl	800b160 <_free_r>
 800b33c:	4625      	mov	r5, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	f000 fa82 	bl	800b84c <_malloc_usable_size_r>
 800b348:	4284      	cmp	r4, r0
 800b34a:	4607      	mov	r7, r0
 800b34c:	d802      	bhi.n	800b354 <_realloc_r+0x34>
 800b34e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b352:	d812      	bhi.n	800b37a <_realloc_r+0x5a>
 800b354:	4621      	mov	r1, r4
 800b356:	4640      	mov	r0, r8
 800b358:	f7ff ff6e 	bl	800b238 <_malloc_r>
 800b35c:	4605      	mov	r5, r0
 800b35e:	2800      	cmp	r0, #0
 800b360:	d0ed      	beq.n	800b33e <_realloc_r+0x1e>
 800b362:	42bc      	cmp	r4, r7
 800b364:	4622      	mov	r2, r4
 800b366:	4631      	mov	r1, r6
 800b368:	bf28      	it	cs
 800b36a:	463a      	movcs	r2, r7
 800b36c:	f7ff fb36 	bl	800a9dc <memcpy>
 800b370:	4631      	mov	r1, r6
 800b372:	4640      	mov	r0, r8
 800b374:	f7ff fef4 	bl	800b160 <_free_r>
 800b378:	e7e1      	b.n	800b33e <_realloc_r+0x1e>
 800b37a:	4635      	mov	r5, r6
 800b37c:	e7df      	b.n	800b33e <_realloc_r+0x1e>

0800b37e <__ssputs_r>:
 800b37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b382:	688e      	ldr	r6, [r1, #8]
 800b384:	429e      	cmp	r6, r3
 800b386:	4682      	mov	sl, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	4690      	mov	r8, r2
 800b38c:	461f      	mov	r7, r3
 800b38e:	d838      	bhi.n	800b402 <__ssputs_r+0x84>
 800b390:	898a      	ldrh	r2, [r1, #12]
 800b392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b396:	d032      	beq.n	800b3fe <__ssputs_r+0x80>
 800b398:	6825      	ldr	r5, [r4, #0]
 800b39a:	6909      	ldr	r1, [r1, #16]
 800b39c:	eba5 0901 	sub.w	r9, r5, r1
 800b3a0:	6965      	ldr	r5, [r4, #20]
 800b3a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	444b      	add	r3, r9
 800b3ae:	106d      	asrs	r5, r5, #1
 800b3b0:	429d      	cmp	r5, r3
 800b3b2:	bf38      	it	cc
 800b3b4:	461d      	movcc	r5, r3
 800b3b6:	0553      	lsls	r3, r2, #21
 800b3b8:	d531      	bpl.n	800b41e <__ssputs_r+0xa0>
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	f7ff ff3c 	bl	800b238 <_malloc_r>
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	b950      	cbnz	r0, 800b3da <__ssputs_r+0x5c>
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	f8ca 3000 	str.w	r3, [sl]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3da:	6921      	ldr	r1, [r4, #16]
 800b3dc:	464a      	mov	r2, r9
 800b3de:	f7ff fafd 	bl	800a9dc <memcpy>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	6126      	str	r6, [r4, #16]
 800b3f0:	6165      	str	r5, [r4, #20]
 800b3f2:	444e      	add	r6, r9
 800b3f4:	eba5 0509 	sub.w	r5, r5, r9
 800b3f8:	6026      	str	r6, [r4, #0]
 800b3fa:	60a5      	str	r5, [r4, #8]
 800b3fc:	463e      	mov	r6, r7
 800b3fe:	42be      	cmp	r6, r7
 800b400:	d900      	bls.n	800b404 <__ssputs_r+0x86>
 800b402:	463e      	mov	r6, r7
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	4632      	mov	r2, r6
 800b408:	4641      	mov	r1, r8
 800b40a:	f7ff faf5 	bl	800a9f8 <memmove>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	1b9b      	subs	r3, r3, r6
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	4433      	add	r3, r6
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	2000      	movs	r0, #0
 800b41c:	e7db      	b.n	800b3d6 <__ssputs_r+0x58>
 800b41e:	462a      	mov	r2, r5
 800b420:	f7ff ff7e 	bl	800b320 <_realloc_r>
 800b424:	4606      	mov	r6, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d1e1      	bne.n	800b3ee <__ssputs_r+0x70>
 800b42a:	6921      	ldr	r1, [r4, #16]
 800b42c:	4650      	mov	r0, sl
 800b42e:	f7ff fe97 	bl	800b160 <_free_r>
 800b432:	e7c7      	b.n	800b3c4 <__ssputs_r+0x46>

0800b434 <_svfiprintf_r>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	4698      	mov	r8, r3
 800b43a:	898b      	ldrh	r3, [r1, #12]
 800b43c:	061b      	lsls	r3, r3, #24
 800b43e:	b09d      	sub	sp, #116	; 0x74
 800b440:	4607      	mov	r7, r0
 800b442:	460d      	mov	r5, r1
 800b444:	4614      	mov	r4, r2
 800b446:	d50e      	bpl.n	800b466 <_svfiprintf_r+0x32>
 800b448:	690b      	ldr	r3, [r1, #16]
 800b44a:	b963      	cbnz	r3, 800b466 <_svfiprintf_r+0x32>
 800b44c:	2140      	movs	r1, #64	; 0x40
 800b44e:	f7ff fef3 	bl	800b238 <_malloc_r>
 800b452:	6028      	str	r0, [r5, #0]
 800b454:	6128      	str	r0, [r5, #16]
 800b456:	b920      	cbnz	r0, 800b462 <_svfiprintf_r+0x2e>
 800b458:	230c      	movs	r3, #12
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b460:	e0d1      	b.n	800b606 <_svfiprintf_r+0x1d2>
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	616b      	str	r3, [r5, #20]
 800b466:	2300      	movs	r3, #0
 800b468:	9309      	str	r3, [sp, #36]	; 0x24
 800b46a:	2320      	movs	r3, #32
 800b46c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b470:	f8cd 800c 	str.w	r8, [sp, #12]
 800b474:	2330      	movs	r3, #48	; 0x30
 800b476:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b620 <_svfiprintf_r+0x1ec>
 800b47a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b47e:	f04f 0901 	mov.w	r9, #1
 800b482:	4623      	mov	r3, r4
 800b484:	469a      	mov	sl, r3
 800b486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48a:	b10a      	cbz	r2, 800b490 <_svfiprintf_r+0x5c>
 800b48c:	2a25      	cmp	r2, #37	; 0x25
 800b48e:	d1f9      	bne.n	800b484 <_svfiprintf_r+0x50>
 800b490:	ebba 0b04 	subs.w	fp, sl, r4
 800b494:	d00b      	beq.n	800b4ae <_svfiprintf_r+0x7a>
 800b496:	465b      	mov	r3, fp
 800b498:	4622      	mov	r2, r4
 800b49a:	4629      	mov	r1, r5
 800b49c:	4638      	mov	r0, r7
 800b49e:	f7ff ff6e 	bl	800b37e <__ssputs_r>
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	f000 80aa 	beq.w	800b5fc <_svfiprintf_r+0x1c8>
 800b4a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4aa:	445a      	add	r2, fp
 800b4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80a2 	beq.w	800b5fc <_svfiprintf_r+0x1c8>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c2:	f10a 0a01 	add.w	sl, sl, #1
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	9307      	str	r3, [sp, #28]
 800b4ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d0:	4654      	mov	r4, sl
 800b4d2:	2205      	movs	r2, #5
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	4851      	ldr	r0, [pc, #324]	; (800b620 <_svfiprintf_r+0x1ec>)
 800b4da:	f7f4 ff09 	bl	80002f0 <memchr>
 800b4de:	9a04      	ldr	r2, [sp, #16]
 800b4e0:	b9d8      	cbnz	r0, 800b51a <_svfiprintf_r+0xe6>
 800b4e2:	06d0      	lsls	r0, r2, #27
 800b4e4:	bf44      	itt	mi
 800b4e6:	2320      	movmi	r3, #32
 800b4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ec:	0711      	lsls	r1, r2, #28
 800b4ee:	bf44      	itt	mi
 800b4f0:	232b      	movmi	r3, #43	; 0x2b
 800b4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fc:	d015      	beq.n	800b52a <_svfiprintf_r+0xf6>
 800b4fe:	9a07      	ldr	r2, [sp, #28]
 800b500:	4654      	mov	r4, sl
 800b502:	2000      	movs	r0, #0
 800b504:	f04f 0c0a 	mov.w	ip, #10
 800b508:	4621      	mov	r1, r4
 800b50a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b50e:	3b30      	subs	r3, #48	; 0x30
 800b510:	2b09      	cmp	r3, #9
 800b512:	d94e      	bls.n	800b5b2 <_svfiprintf_r+0x17e>
 800b514:	b1b0      	cbz	r0, 800b544 <_svfiprintf_r+0x110>
 800b516:	9207      	str	r2, [sp, #28]
 800b518:	e014      	b.n	800b544 <_svfiprintf_r+0x110>
 800b51a:	eba0 0308 	sub.w	r3, r0, r8
 800b51e:	fa09 f303 	lsl.w	r3, r9, r3
 800b522:	4313      	orrs	r3, r2
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	46a2      	mov	sl, r4
 800b528:	e7d2      	b.n	800b4d0 <_svfiprintf_r+0x9c>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	1d19      	adds	r1, r3, #4
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	9103      	str	r1, [sp, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	bfbb      	ittet	lt
 800b536:	425b      	neglt	r3, r3
 800b538:	f042 0202 	orrlt.w	r2, r2, #2
 800b53c:	9307      	strge	r3, [sp, #28]
 800b53e:	9307      	strlt	r3, [sp, #28]
 800b540:	bfb8      	it	lt
 800b542:	9204      	strlt	r2, [sp, #16]
 800b544:	7823      	ldrb	r3, [r4, #0]
 800b546:	2b2e      	cmp	r3, #46	; 0x2e
 800b548:	d10c      	bne.n	800b564 <_svfiprintf_r+0x130>
 800b54a:	7863      	ldrb	r3, [r4, #1]
 800b54c:	2b2a      	cmp	r3, #42	; 0x2a
 800b54e:	d135      	bne.n	800b5bc <_svfiprintf_r+0x188>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	1d1a      	adds	r2, r3, #4
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	9203      	str	r2, [sp, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfb8      	it	lt
 800b55c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b560:	3402      	adds	r4, #2
 800b562:	9305      	str	r3, [sp, #20]
 800b564:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b630 <_svfiprintf_r+0x1fc>
 800b568:	7821      	ldrb	r1, [r4, #0]
 800b56a:	2203      	movs	r2, #3
 800b56c:	4650      	mov	r0, sl
 800b56e:	f7f4 febf 	bl	80002f0 <memchr>
 800b572:	b140      	cbz	r0, 800b586 <_svfiprintf_r+0x152>
 800b574:	2340      	movs	r3, #64	; 0x40
 800b576:	eba0 000a 	sub.w	r0, r0, sl
 800b57a:	fa03 f000 	lsl.w	r0, r3, r0
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	4303      	orrs	r3, r0
 800b582:	3401      	adds	r4, #1
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58a:	4826      	ldr	r0, [pc, #152]	; (800b624 <_svfiprintf_r+0x1f0>)
 800b58c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b590:	2206      	movs	r2, #6
 800b592:	f7f4 fead 	bl	80002f0 <memchr>
 800b596:	2800      	cmp	r0, #0
 800b598:	d038      	beq.n	800b60c <_svfiprintf_r+0x1d8>
 800b59a:	4b23      	ldr	r3, [pc, #140]	; (800b628 <_svfiprintf_r+0x1f4>)
 800b59c:	bb1b      	cbnz	r3, 800b5e6 <_svfiprintf_r+0x1b2>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	3307      	adds	r3, #7
 800b5a2:	f023 0307 	bic.w	r3, r3, #7
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	9303      	str	r3, [sp, #12]
 800b5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ac:	4433      	add	r3, r6
 800b5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b0:	e767      	b.n	800b482 <_svfiprintf_r+0x4e>
 800b5b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	e7a5      	b.n	800b508 <_svfiprintf_r+0xd4>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	3401      	adds	r4, #1
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	f04f 0c0a 	mov.w	ip, #10
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ce:	3a30      	subs	r2, #48	; 0x30
 800b5d0:	2a09      	cmp	r2, #9
 800b5d2:	d903      	bls.n	800b5dc <_svfiprintf_r+0x1a8>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0c5      	beq.n	800b564 <_svfiprintf_r+0x130>
 800b5d8:	9105      	str	r1, [sp, #20]
 800b5da:	e7c3      	b.n	800b564 <_svfiprintf_r+0x130>
 800b5dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e7f0      	b.n	800b5c8 <_svfiprintf_r+0x194>
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <_svfiprintf_r+0x1f8>)
 800b5ee:	a904      	add	r1, sp, #16
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7fd fcf9 	bl	8008fe8 <_printf_float>
 800b5f6:	1c42      	adds	r2, r0, #1
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	d1d6      	bne.n	800b5aa <_svfiprintf_r+0x176>
 800b5fc:	89ab      	ldrh	r3, [r5, #12]
 800b5fe:	065b      	lsls	r3, r3, #25
 800b600:	f53f af2c 	bmi.w	800b45c <_svfiprintf_r+0x28>
 800b604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b606:	b01d      	add	sp, #116	; 0x74
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <_svfiprintf_r+0x1f8>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4638      	mov	r0, r7
 800b618:	f7fd ff72 	bl	8009500 <_printf_i>
 800b61c:	e7eb      	b.n	800b5f6 <_svfiprintf_r+0x1c2>
 800b61e:	bf00      	nop
 800b620:	0800ba54 	.word	0x0800ba54
 800b624:	0800ba5e 	.word	0x0800ba5e
 800b628:	08008fe9 	.word	0x08008fe9
 800b62c:	0800b37f 	.word	0x0800b37f
 800b630:	0800ba5a 	.word	0x0800ba5a

0800b634 <_sbrk_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d06      	ldr	r5, [pc, #24]	; (800b650 <_sbrk_r+0x1c>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	602b      	str	r3, [r5, #0]
 800b640:	f7f5 ff18 	bl	8001474 <_sbrk>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_sbrk_r+0x1a>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_sbrk_r+0x1a>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	24000510 	.word	0x24000510

0800b654 <_raise_r>:
 800b654:	291f      	cmp	r1, #31
 800b656:	b538      	push	{r3, r4, r5, lr}
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	d904      	bls.n	800b668 <_raise_r+0x14>
 800b65e:	2316      	movs	r3, #22
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b66a:	b112      	cbz	r2, 800b672 <_raise_r+0x1e>
 800b66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b670:	b94b      	cbnz	r3, 800b686 <_raise_r+0x32>
 800b672:	4620      	mov	r0, r4
 800b674:	f000 f830 	bl	800b6d8 <_getpid_r>
 800b678:	462a      	mov	r2, r5
 800b67a:	4601      	mov	r1, r0
 800b67c:	4620      	mov	r0, r4
 800b67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b682:	f000 b817 	b.w	800b6b4 <_kill_r>
 800b686:	2b01      	cmp	r3, #1
 800b688:	d00a      	beq.n	800b6a0 <_raise_r+0x4c>
 800b68a:	1c59      	adds	r1, r3, #1
 800b68c:	d103      	bne.n	800b696 <_raise_r+0x42>
 800b68e:	2316      	movs	r3, #22
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	2001      	movs	r0, #1
 800b694:	e7e7      	b.n	800b666 <_raise_r+0x12>
 800b696:	2400      	movs	r4, #0
 800b698:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b69c:	4628      	mov	r0, r5
 800b69e:	4798      	blx	r3
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	e7e0      	b.n	800b666 <_raise_r+0x12>

0800b6a4 <raise>:
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <raise+0xc>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f7ff bfd3 	b.w	800b654 <_raise_r>
 800b6ae:	bf00      	nop
 800b6b0:	2400001c 	.word	0x2400001c

0800b6b4 <_kill_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	; (800b6d4 <_kill_r+0x20>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	f7f5 fe4f 	bl	8001364 <_kill>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d102      	bne.n	800b6d0 <_kill_r+0x1c>
 800b6ca:	682b      	ldr	r3, [r5, #0]
 800b6cc:	b103      	cbz	r3, 800b6d0 <_kill_r+0x1c>
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	bf00      	nop
 800b6d4:	24000510 	.word	0x24000510

0800b6d8 <_getpid_r>:
 800b6d8:	f7f5 be3c 	b.w	8001354 <_getpid>

0800b6dc <__sread>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	460c      	mov	r4, r1
 800b6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e4:	f000 f8ba 	bl	800b85c <_read_r>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	bfab      	itete	ge
 800b6ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b6f0:	181b      	addge	r3, r3, r0
 800b6f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6f6:	bfac      	ite	ge
 800b6f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6fa:	81a3      	strhlt	r3, [r4, #12]
 800b6fc:	bd10      	pop	{r4, pc}

0800b6fe <__swrite>:
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	461f      	mov	r7, r3
 800b704:	898b      	ldrh	r3, [r1, #12]
 800b706:	05db      	lsls	r3, r3, #23
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	4616      	mov	r6, r2
 800b70e:	d505      	bpl.n	800b71c <__swrite+0x1e>
 800b710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b714:	2302      	movs	r3, #2
 800b716:	2200      	movs	r2, #0
 800b718:	f000 f868 	bl	800b7ec <_lseek_r>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b726:	81a3      	strh	r3, [r4, #12]
 800b728:	4632      	mov	r2, r6
 800b72a:	463b      	mov	r3, r7
 800b72c:	4628      	mov	r0, r5
 800b72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b732:	f000 b817 	b.w	800b764 <_write_r>

0800b736 <__sseek>:
 800b736:	b510      	push	{r4, lr}
 800b738:	460c      	mov	r4, r1
 800b73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73e:	f000 f855 	bl	800b7ec <_lseek_r>
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	bf15      	itete	ne
 800b748:	6560      	strne	r0, [r4, #84]	; 0x54
 800b74a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b74e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b752:	81a3      	strheq	r3, [r4, #12]
 800b754:	bf18      	it	ne
 800b756:	81a3      	strhne	r3, [r4, #12]
 800b758:	bd10      	pop	{r4, pc}

0800b75a <__sclose>:
 800b75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75e:	f000 b813 	b.w	800b788 <_close_r>
	...

0800b764 <_write_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_write_r+0x20>)
 800b768:	4604      	mov	r4, r0
 800b76a:	4608      	mov	r0, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f5 fe2d 	bl	80013d2 <_write>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_write_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_write_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	24000510 	.word	0x24000510

0800b788 <_close_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d06      	ldr	r5, [pc, #24]	; (800b7a4 <_close_r+0x1c>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f5 fe39 	bl	800140a <_close>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_close_r+0x1a>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_close_r+0x1a>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	24000510 	.word	0x24000510

0800b7a8 <_fstat_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	; (800b7c8 <_fstat_r+0x20>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f7f5 fe34 	bl	8001422 <_fstat>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d102      	bne.n	800b7c4 <_fstat_r+0x1c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b103      	cbz	r3, 800b7c4 <_fstat_r+0x1c>
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	24000510 	.word	0x24000510

0800b7cc <_isatty_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d06      	ldr	r5, [pc, #24]	; (800b7e8 <_isatty_r+0x1c>)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	f7f5 fe33 	bl	8001442 <_isatty>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_isatty_r+0x1a>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_isatty_r+0x1a>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	24000510 	.word	0x24000510

0800b7ec <_lseek_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d07      	ldr	r5, [pc, #28]	; (800b80c <_lseek_r+0x20>)
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	4608      	mov	r0, r1
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	602a      	str	r2, [r5, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f7f5 fe2c 	bl	8001458 <_lseek>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_lseek_r+0x1e>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_lseek_r+0x1e>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	24000510 	.word	0x24000510

0800b810 <__ascii_mbtowc>:
 800b810:	b082      	sub	sp, #8
 800b812:	b901      	cbnz	r1, 800b816 <__ascii_mbtowc+0x6>
 800b814:	a901      	add	r1, sp, #4
 800b816:	b142      	cbz	r2, 800b82a <__ascii_mbtowc+0x1a>
 800b818:	b14b      	cbz	r3, 800b82e <__ascii_mbtowc+0x1e>
 800b81a:	7813      	ldrb	r3, [r2, #0]
 800b81c:	600b      	str	r3, [r1, #0]
 800b81e:	7812      	ldrb	r2, [r2, #0]
 800b820:	1e10      	subs	r0, r2, #0
 800b822:	bf18      	it	ne
 800b824:	2001      	movne	r0, #1
 800b826:	b002      	add	sp, #8
 800b828:	4770      	bx	lr
 800b82a:	4610      	mov	r0, r2
 800b82c:	e7fb      	b.n	800b826 <__ascii_mbtowc+0x16>
 800b82e:	f06f 0001 	mvn.w	r0, #1
 800b832:	e7f8      	b.n	800b826 <__ascii_mbtowc+0x16>

0800b834 <__malloc_lock>:
 800b834:	4801      	ldr	r0, [pc, #4]	; (800b83c <__malloc_lock+0x8>)
 800b836:	f7ff b862 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800b83a:	bf00      	nop
 800b83c:	24000504 	.word	0x24000504

0800b840 <__malloc_unlock>:
 800b840:	4801      	ldr	r0, [pc, #4]	; (800b848 <__malloc_unlock+0x8>)
 800b842:	f7ff b85d 	b.w	800a900 <__retarget_lock_release_recursive>
 800b846:	bf00      	nop
 800b848:	24000504 	.word	0x24000504

0800b84c <_malloc_usable_size_r>:
 800b84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b850:	1f18      	subs	r0, r3, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	bfbc      	itt	lt
 800b856:	580b      	ldrlt	r3, [r1, r0]
 800b858:	18c0      	addlt	r0, r0, r3
 800b85a:	4770      	bx	lr

0800b85c <_read_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d07      	ldr	r5, [pc, #28]	; (800b87c <_read_r+0x20>)
 800b860:	4604      	mov	r4, r0
 800b862:	4608      	mov	r0, r1
 800b864:	4611      	mov	r1, r2
 800b866:	2200      	movs	r2, #0
 800b868:	602a      	str	r2, [r5, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	f7f5 fd94 	bl	8001398 <_read>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_read_r+0x1e>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_read_r+0x1e>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	24000510 	.word	0x24000510

0800b880 <__ascii_wctomb>:
 800b880:	b149      	cbz	r1, 800b896 <__ascii_wctomb+0x16>
 800b882:	2aff      	cmp	r2, #255	; 0xff
 800b884:	bf85      	ittet	hi
 800b886:	238a      	movhi	r3, #138	; 0x8a
 800b888:	6003      	strhi	r3, [r0, #0]
 800b88a:	700a      	strbls	r2, [r1, #0]
 800b88c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b890:	bf98      	it	ls
 800b892:	2001      	movls	r0, #1
 800b894:	4770      	bx	lr
 800b896:	4608      	mov	r0, r1
 800b898:	4770      	bx	lr
	...

0800b89c <_init>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	bf00      	nop
 800b8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a2:	bc08      	pop	{r3}
 800b8a4:	469e      	mov	lr, r3
 800b8a6:	4770      	bx	lr

0800b8a8 <_fini>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	bf00      	nop
 800b8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ae:	bc08      	pop	{r3}
 800b8b0:	469e      	mov	lr, r3
 800b8b2:	4770      	bx	lr
